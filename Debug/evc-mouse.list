
evc-mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e30  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007ff4  08007ff4  00008ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  0000a144  2**0
                  CONTENTS
  4 .ARM          00000008  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  0000a144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  0800805c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  20000144  080081a0  0000a144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  080081a0  0000abd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014506  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d0  00000000  00000000  0001e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00021b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de2  00000000  00000000  00022d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025aab  00000000  00000000  00023b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ae1  00000000  00000000  00049615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deec4  00000000  00000000  000610f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ffba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  00140000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00144c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000144 	.word	0x20000144
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007fdc 	.word	0x08007fdc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000148 	.word	0x20000148
 8000200:	08007fdc 	.word	0x08007fdc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fab9 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f835 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f917 	bl	8000734 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f007 f85d 	bl	80075c4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050a:	f000 f89b 	bl	8000644 <MX_ADC1_Init>
  MX_TIM10_Init();
 800050e:	f000 f8ed 	bl	80006ec <MX_TIM10_Init>

  /* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4813      	ldr	r0, [pc, #76]	@ (8000564 <main+0x70>)
 8000518:	f001 f858 	bl	80015cc <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d019      	beq.n	8000556 <main+0x62>
		{
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	4810      	ldr	r0, [pc, #64]	@ (8000568 <main+0x74>)
 8000528:	f001 f868 	bl	80015fc <HAL_GPIO_WritePin>
			ViewportReport r = {0};
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
			r.pan_x = 100;
 8000530:	2364      	movs	r3, #100	@ 0x64
 8000532:	717b      	strb	r3, [r7, #5]
			r.pan_y = -100;
 8000534:	239c      	movs	r3, #156	@ 0x9c
 8000536:	71bb      	strb	r3, [r7, #6]
			r.zoom = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	71fb      	strb	r3, [r7, #7]
			send_viewport_report(r);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f007 f82f 	bl	80075a0 <send_viewport_report>
			while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin));
 8000542:	bf00      	nop
 8000544:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <main+0x70>)
 800054a:	f001 f83f 	bl	80015cc <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f7      	bne.n	8000544 <main+0x50>
 8000554:	e7dd      	b.n	8000512 <main+0x1e>
		}
		else
		{
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4803      	ldr	r0, [pc, #12]	@ (8000568 <main+0x74>)
 800055c:	f001 f84e 	bl	80015fc <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000560:	e7d7      	b.n	8000512 <main+0x1e>
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800
 8000568:	40020400 	.word	0x40020400

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2234      	movs	r2, #52	@ 0x34
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fd02 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b29      	ldr	r3, [pc, #164]	@ (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	@ (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	@ (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <SystemClock_Config+0xd4>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005e0:	23a8      	movs	r3, #168	@ 0xa8
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f8eb 	bl	80037d0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 f91c 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2105      	movs	r1, #5
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fa88 	bl	8002b38 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 f905 	bl	800083c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <MX_ADC1_Init+0xa0>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800066a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000674:	2200      	movs	r2, #0
 8000676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000682:	2200      	movs	r2, #0
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <MX_ADC1_Init+0xa4>)
 800068a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000694:	2201      	movs	r2, #1
 8000696:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006a8:	f000 fa78 	bl	8000b9c <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006b2:	f000 f8c3 	bl	800083c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006c8:	f000 faac 	bl	8000c24 <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006d2:	f000 f8b3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000160 	.word	0x20000160
 80006e4:	40012000 	.word	0x40012000
 80006e8:	0f000001 	.word	0x0f000001

080006ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_TIM10_Init+0x40>)
 80006f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <MX_TIM10_Init+0x44>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16700;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_TIM10_Init+0x40>)
 80006f8:	f244 123c 	movw	r2, #16700	@ 0x413c
 80006fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_TIM10_Init+0x40>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_TIM10_Init+0x40>)
 8000706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800070a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_TIM10_Init+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_TIM10_Init+0x40>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_TIM10_Init+0x40>)
 800071a:	f003 faf7 	bl	8003d0c <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000724:	f000 f88a 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001a8 	.word	0x200001a8
 8000730:	40014400 	.word	0x40014400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2101      	movs	r1, #1
 80007be:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f000 ff1c 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fd62 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80007e0:	2301      	movs	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fd54 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800

08000810 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if (htim == &htim10)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d102      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tim10_overflow = 1;
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
	}
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	200001a8 	.word	0x200001a8
 8000838:	200001f0 	.word	0x200001f0

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_ADC_MspInit+0x7c>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d127      	bne.n	800090a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a15      	ldr	r2, [pc, #84]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_ADC_MspInit+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <HAL_ADC_MspInit+0x84>)
 8000906:	f000 fccd 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40012000 	.word	0x40012000
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_TIM_Base_MspInit+0x48>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d115      	bne.n	800095e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_TIM_Base_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <HAL_TIM_Base_MspInit+0x4c>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_TIM_Base_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2019      	movs	r0, #25
 8000954:	f000 fc6f 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000958:	2019      	movs	r0, #25
 800095a:	f000 fc88 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40014400 	.word	0x40014400
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f8a5 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009d6:	f003 f9e8 	bl	8003daa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001a8 	.word	0x200001a8

080009e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <OTG_FS_IRQHandler+0x10>)
 80009ea:	f000 ff6b 	bl	80018c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200006d8 	.word	0x200006d8

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f007 faa3 	bl	8007f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd51 	bl	80004f4 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000a60:	0800805c 	.word	0x0800805c
  ldr r2, =_sbss
 8000a64:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000a68:	20000bd8 	.word	0x20000bd8

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 fbc1 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fed0 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fbd9 	bl	800128a <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 fba1 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	@ (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200001f4 	.word	0x200001f4

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200001f4 	.word	0x200001f4

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e033      	b.n	8000c1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d109      	bne.n	8000bce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fe6c 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d118      	bne.n	8000c0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000be2:	f023 0302 	bic.w	r3, r3, #2
 8000be6:	f043 0202 	orr.w	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f94a 	bl	8000e88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f023 0303 	bic.w	r3, r3, #3
 8000c02:	f043 0201 	orr.w	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c0a:	e001      	b.n	8000c10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d101      	bne.n	8000c40 <HAL_ADC_ConfigChannel+0x1c>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e113      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x244>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b09      	cmp	r3, #9
 8000c4e:	d925      	bls.n	8000c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68d9      	ldr	r1, [r3, #12]
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	3b1e      	subs	r3, #30
 8000c66:	2207      	movs	r2, #7
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	400a      	ands	r2, r1
 8000c74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68d9      	ldr	r1, [r3, #12]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4403      	add	r3, r0
 8000c8e:	3b1e      	subs	r3, #30
 8000c90:	409a      	lsls	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	e022      	b.n	8000ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6919      	ldr	r1, [r3, #16]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4403      	add	r3, r0
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d824      	bhi.n	8000d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685a      	ldr	r2, [r3, #4]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3b05      	subs	r3, #5
 8000cfc:	221f      	movs	r2, #31
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	400a      	ands	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	3b05      	subs	r3, #5
 8000d26:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d32:	e04c      	b.n	8000dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d824      	bhi.n	8000d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3b23      	subs	r3, #35	@ 0x23
 8000d4e:	221f      	movs	r2, #31
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43da      	mvns	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3b23      	subs	r3, #35	@ 0x23
 8000d78:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d84:	e023      	b.n	8000dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	3b41      	subs	r3, #65	@ 0x41
 8000d98:	221f      	movs	r2, #31
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	400a      	ands	r2, r1
 8000da6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3b41      	subs	r3, #65	@ 0x41
 8000dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dce:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <HAL_ADC_ConfigChannel+0x250>)
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a28      	ldr	r2, [pc, #160]	@ (8000e78 <HAL_ADC_ConfigChannel+0x254>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d10f      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1d8>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b12      	cmp	r3, #18
 8000de2:	d10b      	bne.n	8000dfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <HAL_ADC_ConfigChannel+0x254>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x23a>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <HAL_ADC_ConfigChannel+0x258>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_ADC_ConfigChannel+0x1f4>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b11      	cmp	r3, #17
 8000e16:	d122      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a11      	ldr	r2, [pc, #68]	@ (8000e7c <HAL_ADC_ConfigChannel+0x258>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d111      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_ADC_ConfigChannel+0x25c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <HAL_ADC_ConfigChannel+0x260>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9a      	lsrs	r2, r3, #18
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000e50:	e002      	b.n	8000e58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f9      	bne.n	8000e52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40012300 	.word	0x40012300
 8000e78:	40012000 	.word	0x40012000
 8000e7c:	10000012 	.word	0x10000012
 8000e80:	20000000 	.word	0x20000000
 8000e84:	431bde83 	.word	0x431bde83

08000e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e90:	4b79      	ldr	r3, [pc, #484]	@ (8001078 <ADC_Init+0x1f0>)
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	021a      	lsls	r2, r3, #8
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000ee0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6859      	ldr	r1, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6899      	ldr	r1, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f1a:	4a58      	ldr	r2, [pc, #352]	@ (800107c <ADC_Init+0x1f4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d022      	beq.n	8000f66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6899      	ldr	r1, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6899      	ldr	r1, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	e00f      	b.n	8000f86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0202 	bic.w	r2, r2, #2
 8000f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6899      	ldr	r1, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7e1b      	ldrb	r3, [r3, #24]
 8000fa0:	005a      	lsls	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01b      	beq.n	8000fec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000fd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	035a      	lsls	r2, r3, #13
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	e007      	b.n	8000ffc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800100a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	3b01      	subs	r3, #1
 8001018:	051a      	lsls	r2, r3, #20
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800103e:	025a      	lsls	r2, r3, #9
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6899      	ldr	r1, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	029a      	lsls	r2, r3, #10
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	609a      	str	r2, [r3, #8]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	40012300 	.word	0x40012300
 800107c:	0f000001 	.word	0x0f000001

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	@ (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e165      	b.n	800158c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8154 	bne.w	8001586 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80ae 	beq.w	8001586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a5c      	ldr	r2, [pc, #368]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b5a      	ldr	r3, [pc, #360]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a58      	ldr	r2, [pc, #352]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	@ (80015ac <HAL_GPIO_Init+0x308>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d025      	beq.n	80014be <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	@ (80015b0 <HAL_GPIO_Init+0x30c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01f      	beq.n	80014ba <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	@ (80015b4 <HAL_GPIO_Init+0x310>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d019      	beq.n	80014b6 <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	@ (80015b8 <HAL_GPIO_Init+0x314>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	@ (80015bc <HAL_GPIO_Init+0x318>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x20a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4a      	ldr	r2, [pc, #296]	@ (80015c0 <HAL_GPIO_Init+0x31c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x206>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a49      	ldr	r2, [pc, #292]	@ (80015c4 <HAL_GPIO_Init+0x320>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x202>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00c      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00a      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014aa:	2305      	movs	r3, #5
 80014ac:	e008      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014b2:	2303      	movs	r3, #3
 80014b4:	e004      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014ba:	2301      	movs	r3, #1
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x21c>
 80014be:	2300      	movs	r3, #0
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	f002 0203 	and.w	r2, r2, #3
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	4093      	lsls	r3, r2
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d0:	4935      	ldr	r1, [pc, #212]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014de:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001502:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800152c:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001532:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001556:	4a1c      	ldr	r2, [pc, #112]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001580:	4a11      	ldr	r2, [pc, #68]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3301      	adds	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	f67f ae96 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020c00 	.word	0x40020c00
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40021800 	.word	0x40021800
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af02      	add	r7, sp, #8
 8001634:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e108      	b.n	8001852 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f006 f92c 	bl	80078b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800166e:	d102      	bne.n	8001676 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fe85 	bl	800438a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1a      	ldrb	r2, [r3, #16]
 8001688:	f88d 2000 	strb.w	r2, [sp]
 800168c:	3304      	adds	r3, #4
 800168e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001690:	f002 fd64 	bl	800415c <USB_CoreInit>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0d5      	b.n	8001852 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fe7d 	bl	80043ac <USB_SetCurrentMode>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0c6      	b.n	8001852 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e04a      	b.n	8001760 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3315      	adds	r3, #21
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3314      	adds	r3, #20
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	b298      	uxth	r0, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	332e      	adds	r3, #46	@ 0x2e
 8001706:	4602      	mov	r2, r0
 8001708:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3318      	adds	r3, #24
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	331c      	adds	r3, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3320      	adds	r3, #32
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3324      	adds	r3, #36	@ 0x24
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	3301      	adds	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	791b      	ldrb	r3, [r3, #4]
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3af      	bcc.n	80016ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e044      	b.n	80017fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	791b      	ldrb	r3, [r3, #4]
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	d3b5      	bcc.n	8001770 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c1a      	ldrb	r2, [r3, #16]
 800180c:	f88d 2000 	strb.w	r2, [sp]
 8001810:	3304      	adds	r3, #4
 8001812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001814:	f002 fe16 	bl	8004444 <USB_DevInit>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e013      	b.n	8001852 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b1b      	ldrb	r3, [r3, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f001 f955 	bl	8002af0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fe4d 	bl	80054ea <USB_DevDisconnect>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_PCD_Start+0x1c>
 8001872:	2302      	movs	r3, #2
 8001874:	e022      	b.n	80018bc <HAL_PCD_Start+0x62>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001896:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fd60 	bl	8004368 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fdfb 	bl	80054a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b08d      	sub	sp, #52	@ 0x34
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 feb9 	bl	8005652 <USB_GetMode>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 84b9 	bne.w	800225a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fe1d 	bl	800552c <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 84af 	beq.w	8002258 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fe0a 	bl	800552c <USB_ReadInterrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f002 0202 	and.w	r2, r2, #2
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fdf8 	bl	800552c <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b10      	cmp	r3, #16
 8001944:	d161      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0210 	bic.w	r2, r2, #16
 8001954:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	0c5b      	lsrs	r3, r3, #17
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	2b02      	cmp	r3, #2
 8001980:	d124      	bne.n	80019cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d035      	beq.n	80019fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	6a38      	ldr	r0, [r7, #32]
 80019a2:	f003 fc2f 	bl	8005204 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b2:	441a      	add	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019c4:	441a      	add	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	e016      	b.n	80019fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	0c5b      	lsrs	r3, r3, #17
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	d110      	bne.n	80019fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019de:	2208      	movs	r2, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	6a38      	ldr	r0, [r7, #32]
 80019e4:	f003 fc0e 	bl	8005204 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f4:	441a      	add	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0210 	orr.w	r2, r2, #16
 8001a08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fd8c 	bl	800552c <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a1e:	f040 80a7 	bne.w	8001b70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fd91 	bl	8005552 <USB_ReadDevAllOutEpInterrupt>
 8001a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a32:	e099      	b.n	8001b68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 808e 	beq.w	8001b5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fdb5 	bl	80055ba <USB_ReadDevOutEPInterrupt>
 8001a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 feb7 	bl	80027e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2308      	movs	r3, #8
 8001a90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 ff8d 	bl	80029b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d030      	beq.n	8001b22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac8:	2b80      	cmp	r3, #128	@ 0x80
 8001aca:	d109      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ade:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	78db      	ldrb	r3, [r3, #3]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2200      	movs	r2, #0
 8001b02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f005 fff0 	bl	8007af0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	015a      	lsls	r2, r3, #5
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	4413      	add	r3, r2
 8001b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	2302      	movs	r3, #2
 8001b20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	015a      	lsls	r2, r3, #5
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b54:	461a      	mov	r2, r3
 8001b56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f47f af62 	bne.w	8001a34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fcd9 	bl	800552c <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b84:	f040 80db 	bne.w	8001d3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fcfa 	bl	8005586 <USB_ReadDevAllInEpInterrupt>
 8001b92:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b98:	e0cd      	b.n	8001d36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80c2 	beq.w	8001d2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fd20 	bl	80055f6 <USB_ReadDevInEPInterrupt>
 8001bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d057      	beq.n	8001c72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	2201      	movs	r2, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001be2:	4013      	ands	r3, r2
 8001be4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	799b      	ldrb	r3, [r3, #6]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d132      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3320      	adds	r3, #32
 8001c10:	6819      	ldr	r1, [r3, #0]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4403      	add	r3, r0
 8001c20:	331c      	adds	r3, #28
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4419      	add	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4403      	add	r3, r0
 8001c34:	3320      	adds	r3, #32
 8001c36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3324      	adds	r3, #36	@ 0x24
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2101      	movs	r1, #1
 8001c62:	f003 fd27 	bl	80056b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f005 feba 	bl	80079e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2340      	movs	r3, #64	@ 0x40
 8001cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d023      	beq.n	8001d18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cd2:	6a38      	ldr	r0, [r7, #32]
 8001cd4:	f002 fd14 	bl	8004700 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	3310      	adds	r3, #16
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f005 ff07 	bl	8007b14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d12:	461a      	mov	r2, r3
 8001d14:	2302      	movs	r3, #2
 8001d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fcd0 	bl	80026ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f af2e 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fbf2 	bl	800552c <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d52:	d122      	bne.n	8001d9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f006 f86f 	bl	8007e60 <HAL_PCDEx_LPM_Callback>
 8001d82:	e002      	b.n	8001d8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 fea5 	bl	8007ad4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fbc4 	bl	800552c <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dae:	d112      	bne.n	8001dd6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f005 fe61 	bl	8007a88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001dd4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fba6 	bl	800552c <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dea:	d121      	bne.n	8001e30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001dfa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d111      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	f003 020f 	and.w	r2, r3, #15
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e20:	2101      	movs	r1, #1
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 f81c 	bl	8007e60 <HAL_PCDEx_LPM_Callback>
 8001e28:	e002      	b.n	8001e30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f005 fe2c 	bl	8007a88 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fb79 	bl	800552c <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e44:	f040 80b7 	bne.w	8001fb6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2110      	movs	r1, #16
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fc4c 	bl	8004700 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6c:	e046      	b.n	8001efc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e92:	0151      	lsls	r1, r2, #5
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	440a      	add	r2, r1
 8001e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001e9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ea0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001eb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ec6:	0151      	lsls	r1, r2, #5
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ed0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee6:	0151      	lsls	r1, r2, #5
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	440a      	add	r2, r1
 8001eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ef0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ef4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ef8:	3301      	adds	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	461a      	mov	r2, r3
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d3b2      	bcc.n	8001e6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f16:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001f1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	7bdb      	ldrb	r3, [r3, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d016      	beq.n	8001f52 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f34:	f043 030b 	orr.w	r3, r3, #11
 8001f38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f4a:	f043 030b 	orr.w	r3, r3, #11
 8001f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f50:	e015      	b.n	8001f7e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f64:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001f68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f78:	f043 030b 	orr.w	r3, r3, #11
 8001f7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f8c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f003 fb87 	bl	80056b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fab6 	bl	800552c <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fca:	d123      	bne.n	8002014 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fb4c 	bl	800566e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fc09 	bl	80047f2 <USB_GetDevSpeed>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	f000 fe8a 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f002 f913 	bl	8004224 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f005 fd19 	bl	8007a36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002012:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fa87 	bl	800552c <USB_ReadInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d10a      	bne.n	800203e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f005 fcf6 	bl	8007a1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f002 0208 	and.w	r2, r2, #8
 800203c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fa72 	bl	800552c <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d123      	bne.n	800209a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800205e:	2301      	movs	r3, #1
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	e014      	b.n	800208e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 faf0 	bl	8002668 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	791b      	ldrb	r3, [r3, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	4293      	cmp	r3, r2
 8002098:	d3e4      	bcc.n	8002064 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fa44 	bl	800552c <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ae:	d13c      	bne.n	800212a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	e02b      	b.n	800210e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3318      	adds	r3, #24
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d115      	bne.n	8002108 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da12      	bge.n	8002108 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3317      	adds	r3, #23
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fab0 	bl	8002668 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	3301      	adds	r3, #1
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	4293      	cmp	r3, r2
 8002118:	d3cd      	bcc.n	80020b6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f9fc 	bl	800552c <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800213e:	d156      	bne.n	80021ee <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002140:	2301      	movs	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
 8002144:	e045      	b.n	80021d2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d12e      	bne.n	80021cc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800216e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	da2b      	bge.n	80021cc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002180:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c8:	6053      	str	r3, [r2, #4]
            break;
 80021ca:	e008      	b.n	80021de <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	3301      	adds	r3, #1
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	4293      	cmp	r3, r2
 80021dc:	d3b3      	bcc.n	8002146 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 f99a 	bl	800552c <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002202:	d10a      	bne.n	800221a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f005 fc97 	bl	8007b38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002218:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 f984 	bl	800552c <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d115      	bne.n	800225a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f005 fc87 	bl	8007b54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e000      	b.n	800225a <HAL_PCD_IRQHandler+0x996>
      return;
 8002258:	bf00      	nop
    }
  }
}
 800225a:	3734      	adds	r7, #52	@ 0x34
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}

08002260 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_SetAddress+0x1a>
 8002276:	2302      	movs	r3, #2
 8002278:	e012      	b.n	80022a0 <HAL_PCD_SetAddress+0x40>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f003 f8e3 	bl	800545c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	70fb      	strb	r3, [r7, #3]
 80022ba:	460b      	mov	r3, r1
 80022bc:	803b      	strh	r3, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da0f      	bge.n	80022ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 020f 	and.w	r2, r3, #15
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	3310      	adds	r3, #16
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	705a      	strb	r2, [r3, #1]
 80022ec:	e00f      	b.n	800230e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	3304      	adds	r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800231a:	883a      	ldrh	r2, [r7, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	78ba      	ldrb	r2, [r7, #2]
 8002324:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002338:	78bb      	ldrb	r3, [r7, #2]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d102      	bne.n	8002344 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_PCD_EP_Open+0xaa>
 800234e:	2302      	movs	r3, #2
 8002350:	e00e      	b.n	8002370 <HAL_PCD_EP_Open+0xc8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fa6b 	bl	800483c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800236e:	7afb      	ldrb	r3, [r7, #11]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0f      	bge.n	80023ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3310      	adds	r3, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	705a      	strb	r2, [r3, #1]
 80023aa:	e00f      	b.n	80023cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_EP_Close+0x6e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e00e      	b.n	8002404 <HAL_PCD_EP_Close+0x8c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 faa9 	bl	800494c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2200      	movs	r2, #0
 800244c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	b2da      	uxtb	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	799b      	ldrb	r3, [r3, #6]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	799b      	ldrb	r3, [r3, #6]
 8002470:	461a      	mov	r2, r3
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	f002 fb46 	bl	8004b04 <USB_EPStartXfer>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	460b      	mov	r3, r1
 8002490:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3310      	adds	r3, #16
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	799b      	ldrb	r3, [r3, #6]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	799b      	ldrb	r3, [r3, #6]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6979      	ldr	r1, [r7, #20]
 80024e8:	f002 fb0c 	bl	8004b04 <USB_EPStartXfer>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	460b      	mov	r3, r1
 8002500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	7912      	ldrb	r2, [r2, #4]
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e04f      	b.n	80025b4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da0f      	bge.n	800253c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	3310      	adds	r3, #16
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	3304      	adds	r3, #4
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	705a      	strb	r2, [r3, #1]
 800253a:	e00d      	b.n	8002558 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_PCD_EP_SetStall+0x82>
 8002574:	2302      	movs	r3, #2
 8002576:	e01d      	b.n	80025b4 <HAL_PCD_EP_SetStall+0xbe>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	4618      	mov	r0, r3
 8002588:	f002 fe94 	bl	80052b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7999      	ldrb	r1, [r3, #6]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025a4:	461a      	mov	r2, r3
 80025a6:	f003 f885 	bl	80056b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	7912      	ldrb	r2, [r2, #4]
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e042      	b.n	8002660 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da0f      	bge.n	8002602 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3310      	adds	r3, #16
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	705a      	strb	r2, [r3, #1]
 8002600:	e00f      	b.n	8002622 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_PCD_EP_ClrStall+0x86>
 800263e:	2302      	movs	r3, #2
 8002640:	e00e      	b.n	8002660 <HAL_PCD_EP_ClrStall+0xa4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fe9d 	bl	8005390 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da0c      	bge.n	8002696 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3310      	adds	r3, #16
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e00c      	b.n	80026b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	3304      	adds	r3, #4
 80026ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fcbc 	bl	8005034 <USB_EPStopXfer>
 80026bc:	4603      	mov	r3, r0
 80026be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80026c0:	7afb      	ldrb	r3, [r7, #11]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b08a      	sub	sp, #40	@ 0x28
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	3310      	adds	r3, #16
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	3304      	adds	r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d901      	bls.n	8002702 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06b      	b.n	80027da <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3303      	adds	r3, #3
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002726:	e02a      	b.n	800277e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	429a      	cmp	r2, r3
 800273c:	d902      	bls.n	8002744 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3303      	adds	r3, #3
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68d9      	ldr	r1, [r3, #12]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4603      	mov	r3, r0
 8002760:	6978      	ldr	r0, [r7, #20]
 8002762:	f002 fd11 	bl	8005188 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	441a      	add	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	441a      	add	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	429a      	cmp	r2, r3
 8002792:	d809      	bhi.n	80027a8 <PCD_WriteEmptyTxFifo+0xde>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800279c:	429a      	cmp	r2, r3
 800279e:	d203      	bcs.n	80027a8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1bf      	bne.n	8002728 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d811      	bhi.n	80027d8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027d4:	4013      	ands	r3, r2
 80027d6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	333c      	adds	r3, #60	@ 0x3c
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	799b      	ldrb	r3, [r3, #6]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d17b      	bne.n	8002912 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	4a61      	ldr	r2, [pc, #388]	@ (80029ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	f240 80b9 	bls.w	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80b3 	beq.w	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002846:	461a      	mov	r2, r3
 8002848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800284c:	6093      	str	r3, [r2, #8]
 800284e:	e0a7      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002866:	461a      	mov	r2, r3
 8002868:	2320      	movs	r3, #32
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	e098      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 8093 	bne.w	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4a4b      	ldr	r2, [pc, #300]	@ (80029ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d90f      	bls.n	80028a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	e07e      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	440b      	add	r3, r1
 80028c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d114      	bne.n	8002904 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028ec:	461a      	mov	r2, r3
 80028ee:	2101      	movs	r1, #1
 80028f0:	f002 fee0 	bl	80056b4 <USB_EP0_OutStart>
 80028f4:	e006      	b.n	8002904 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	441a      	add	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 f850 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
 8002910:	e046      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a26      	ldr	r2, [pc, #152]	@ (80029b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d124      	bne.n	8002964 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	e032      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	2320      	movs	r3, #32
 8002954:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f005 f827 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
 8002962:	e01d      	b.n	80029a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d114      	bne.n	8002994 <PCD_EP_OutXfrComplete_int+0x1b0>
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800298c:	461a      	mov	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f002 fe90 	bl	80056b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f005 f808 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	4f54300a 	.word	0x4f54300a
 80029b0:	4f54310a 	.word	0x4f54310a

080029b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	333c      	adds	r3, #60	@ 0x3c
 80029cc:	3304      	adds	r3, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <PCD_EP_OutSetupPacket_int+0x88>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d90e      	bls.n	8002a08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f004 ffbf 	bl	800798c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d90c      	bls.n	8002a30 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	799b      	ldrb	r3, [r3, #6]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f002 fe42 	bl	80056b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	4f54300a 	.word	0x4f54300a

08002a40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a5e:	883b      	ldrh	r3, [r7, #0]
 8002a60:	0419      	lsls	r1, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a6c:	e028      	b.n	8002ac0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e00d      	b.n	8002a9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	3340      	adds	r3, #64	@ 0x40
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4413      	add	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3ec      	bcc.n	8002a82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002aa8:	883b      	ldrh	r3, [r7, #0]
 8002aaa:	0418      	lsls	r0, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	4302      	orrs	r2, r0
 8002ab8:	3340      	adds	r3, #64	@ 0x40
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	f043 0303 	orr.w	r3, r3, #3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cc      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b68      	ldr	r3, [pc, #416]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d90c      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b65      	ldr	r3, [pc, #404]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d044      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e06f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e067      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b37      	ldr	r3, [pc, #220]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4934      	ldr	r1, [pc, #208]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7fd ff88 	bl	8000b3c <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fd ff84 	bl	8000b3c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e04f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 fb57 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	@ (8002cfc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fee8 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	0800803c 	.word	0x0800803c
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	@ 0x30
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d54:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d62:	496c      	ldr	r1, [pc, #432]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d82:	4b64      	ldr	r3, [pc, #400]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d88:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	4960      	ldr	r1, [pc, #384]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4955      	ldr	r1, [pc, #340]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d017      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dec:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfa:	4946      	ldr	r1, [pc, #280]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 808a 	beq.w	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	4a38      	ldr	r2, [pc, #224]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3a:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e46:	4b34      	ldr	r3, [pc, #208]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a33      	ldr	r2, [pc, #204]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e52:	f7fd fe73 	bl	8000b3c <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fd fe6f 	bl	8000b3c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e278      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e80:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e96:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eb2:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d114      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fd fe3d 	bl	8000b3c <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fd fe39 	bl	8000b3c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e240      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ef4:	d114      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ef6:	4b07      	ldr	r3, [pc, #28]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f0a:	4902      	ldr	r1, [pc, #8]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
 8002f10:	e00c      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	42470e40 	.word	0x42470e40
 8002f20:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a49      	ldr	r2, [pc, #292]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	4944      	ldr	r1, [pc, #272]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002f50:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f52:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f60:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4937      	ldr	r1, [pc, #220]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f82:	4b32      	ldr	r3, [pc, #200]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f88:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f90:	492e      	ldr	r1, [pc, #184]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fa4:	4b29      	ldr	r3, [pc, #164]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002faa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	4926      	ldr	r1, [pc, #152]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fda:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	491a      	ldr	r1, [pc, #104]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d011      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003004:	4911      	ldr	r1, [pc, #68]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003016:	2301      	movs	r3, #1
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d005      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003028:	f040 80ff 	bne.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003032:	f7fd fd83 	bl	8000b3c <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003038:	e00e      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800303a:	f7fd fd7f 	bl	8000b3c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d907      	bls.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e188      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800304c:	40023800 	.word	0x40023800
 8003050:	424711e0 	.word	0x424711e0
 8003054:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003058:	4b7e      	ldr	r3, [pc, #504]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003080:	2b00      	cmp	r3, #0
 8003082:	d028      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d124      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800308c:	4b71      	ldr	r3, [pc, #452]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800309e:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a4:	0e1b      	lsrs	r3, r3, #24
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	431a      	orrs	r2, r3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	4961      	ldr	r1, [pc, #388]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003100:	d130      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003102:	4b54      	ldr	r3, [pc, #336]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003114:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311a:	0f1b      	lsrs	r3, r3, #28
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	431a      	orrs	r2, r3
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	071b      	lsls	r3, r3, #28
 8003144:	4943      	ldr	r1, [pc, #268]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800314c:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003152:	f023 021f 	bic.w	r2, r3, #31
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	493d      	ldr	r1, [pc, #244]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d029      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003178:	d124      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800317a:	4b36      	ldr	r3, [pc, #216]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800318c:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003192:	0f1b      	lsrs	r3, r3, #28
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	071b      	lsls	r3, r3, #28
 80031bc:	4925      	ldr	r1, [pc, #148]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4917      	ldr	r1, [pc, #92]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003204:	f7fd fc9a 	bl	8000b3c <HAL_GetTick>
 8003208:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800320c:	f7fd fc96 	bl	8000b3c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e09f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 8095 	bne.w	800335c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003238:	f7fd fc80 	bl	8000b3c <HAL_GetTick>
 800323c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800323e:	e00f      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003240:	f7fd fc7c 	bl	8000b3c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d908      	bls.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e085      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	42470068 	.word	0x42470068
 800325c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003260:	4b41      	ldr	r3, [pc, #260]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800326c:	d0e8      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02b      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003292:	2b00      	cmp	r3, #0
 8003294:	d127      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699a      	ldr	r2, [r3, #24]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	431a      	orrs	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4928      	ldr	r1, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032cc:	4b26      	ldr	r3, [pc, #152]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	3b01      	subs	r3, #1
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	4922      	ldr	r1, [pc, #136]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01d      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032fa:	d118      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	0e1b      	lsrs	r3, r3, #24
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	019b      	lsls	r3, r3, #6
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	4910      	ldr	r1, [pc, #64]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003334:	f7fd fc02 	bl	8000b3c <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800333c:	f7fd fbfe 	bl	8000b3c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335a:	d1ef      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	@ 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	42470070 	.word	0x42470070

08003370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003374:	b0ae      	sub	sp, #184	@ 0xb8
 8003376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003396:	4bcb      	ldr	r3, [pc, #812]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f200 8206 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x440>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080037b1 	.word	0x080037b1
 80033b4:	080037b1 	.word	0x080037b1
 80033b8:	080037b1 	.word	0x080037b1
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	080037b1 	.word	0x080037b1
 80033c4:	080037b1 	.word	0x080037b1
 80033c8:	080037b1 	.word	0x080037b1
 80033cc:	080033f1 	.word	0x080033f1
 80033d0:	080037b1 	.word	0x080037b1
 80033d4:	080037b1 	.word	0x080037b1
 80033d8:	080037b1 	.word	0x080037b1
 80033dc:	080035e1 	.word	0x080035e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4bb9      	ldr	r3, [pc, #740]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80033e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80033e6:	e1e7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e8:	4bb8      	ldr	r3, [pc, #736]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ee:	e1e3      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4bb4      	ldr	r3, [pc, #720]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fc:	4bb1      	ldr	r3, [pc, #708]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d071      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4bae      	ldr	r3, [pc, #696]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003414:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	f04f 0000 	mov.w	r0, #0
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	0159      	lsls	r1, r3, #5
 800343c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003440:	0150      	lsls	r0, r2, #5
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4621      	mov	r1, r4
 8003448:	1a51      	subs	r1, r2, r1
 800344a:	6439      	str	r1, [r7, #64]	@ 0x40
 800344c:	4629      	mov	r1, r5
 800344e:	eb63 0301 	sbc.w	r3, r3, r1
 8003452:	647b      	str	r3, [r7, #68]	@ 0x44
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003460:	4649      	mov	r1, r9
 8003462:	018b      	lsls	r3, r1, #6
 8003464:	4641      	mov	r1, r8
 8003466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346a:	4641      	mov	r1, r8
 800346c:	018a      	lsls	r2, r1, #6
 800346e:	4641      	mov	r1, r8
 8003470:	1a51      	subs	r1, r2, r1
 8003472:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003474:	4649      	mov	r1, r9
 8003476:	eb63 0301 	sbc.w	r3, r3, r1
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003488:	4649      	mov	r1, r9
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4641      	mov	r1, r8
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4622      	mov	r2, r4
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034a2:	462b      	mov	r3, r5
 80034a4:	460a      	mov	r2, r1
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034b8:	4629      	mov	r1, r5
 80034ba:	024b      	lsls	r3, r1, #9
 80034bc:	4621      	mov	r1, r4
 80034be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c2:	4621      	mov	r1, r4
 80034c4:	024a      	lsls	r2, r1, #9
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034dc:	f7fc fe92 	bl	8000204 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ea:	e067      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b75      	ldr	r3, [pc, #468]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003506:	2300      	movs	r3, #0
 8003508:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003540:	4649      	mov	r1, r9
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4641      	mov	r1, r8
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4641      	mov	r1, r8
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4641      	mov	r1, r8
 8003550:	ebb2 0a01 	subs.w	sl, r2, r1
 8003554:	4649      	mov	r1, r9
 8003556:	eb63 0b01 	sbc.w	fp, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003566:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800356a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356e:	4692      	mov	sl, r2
 8003570:	469b      	mov	fp, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb1a 0303 	adds.w	r3, sl, r3
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	462b      	mov	r3, r5
 800357c:	eb4b 0303 	adc.w	r3, fp, r3
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800358e:	4629      	mov	r1, r5
 8003590:	028b      	lsls	r3, r1, #10
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003598:	4621      	mov	r1, r4
 800359a:	028a      	lsls	r2, r1, #10
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a4:	2200      	movs	r2, #0
 80035a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80035a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80035aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035ae:	f7fc fe29 	bl	8000204 <__aeabi_uldivmod>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4613      	mov	r3, r2
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80035ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035de:	e0eb      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b38      	ldr	r3, [pc, #224]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ec:	4b35      	ldr	r3, [pc, #212]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d06b      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4b32      	ldr	r3, [pc, #200]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003602:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	663b      	str	r3, [r7, #96]	@ 0x60
 800360c:	2300      	movs	r3, #0
 800360e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003610:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003614:	4622      	mov	r2, r4
 8003616:	462b      	mov	r3, r5
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4621      	mov	r1, r4
 800362e:	1a51      	subs	r1, r2, r1
 8003630:	61b9      	str	r1, [r7, #24]
 8003632:	4629      	mov	r1, r5
 8003634:	eb63 0301 	sbc.w	r3, r3, r1
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003646:	4659      	mov	r1, fp
 8003648:	018b      	lsls	r3, r1, #6
 800364a:	4651      	mov	r1, sl
 800364c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003650:	4651      	mov	r1, sl
 8003652:	018a      	lsls	r2, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ebb2 0801 	subs.w	r8, r2, r1
 800365a:	4659      	mov	r1, fp
 800365c:	eb63 0901 	sbc.w	r9, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800366c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003670:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003674:	4690      	mov	r8, r2
 8003676:	4699      	mov	r9, r3
 8003678:	4623      	mov	r3, r4
 800367a:	eb18 0303 	adds.w	r3, r8, r3
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	462b      	mov	r3, r5
 8003682:	eb49 0303 	adc.w	r3, r9, r3
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003694:	4629      	mov	r1, r5
 8003696:	024b      	lsls	r3, r1, #9
 8003698:	4621      	mov	r1, r4
 800369a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369e:	4621      	mov	r1, r4
 80036a0:	024a      	lsls	r2, r1, #9
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036aa:	2200      	movs	r2, #0
 80036ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036b4:	f7fc fda6 	bl	8000204 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036c2:	e065      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x420>
 80036c4:	40023800 	.word	0x40023800
 80036c8:	00f42400 	.word	0x00f42400
 80036cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	2200      	movs	r2, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	4611      	mov	r1, r2
 80036dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036ea:	4642      	mov	r2, r8
 80036ec:	464b      	mov	r3, r9
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4641      	mov	r1, r8
 8003704:	1a51      	subs	r1, r2, r1
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4649      	mov	r1, r9
 800370a:	eb63 0301 	sbc.w	r3, r3, r1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800371c:	4659      	mov	r1, fp
 800371e:	018b      	lsls	r3, r1, #6
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003726:	4651      	mov	r1, sl
 8003728:	018a      	lsls	r2, r1, #6
 800372a:	4651      	mov	r1, sl
 800372c:	1a54      	subs	r4, r2, r1
 800372e:	4659      	mov	r1, fp
 8003730:	eb63 0501 	sbc.w	r5, r3, r1
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	00eb      	lsls	r3, r5, #3
 800373e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003742:	00e2      	lsls	r2, r4, #3
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	4643      	mov	r3, r8
 800374a:	18e3      	adds	r3, r4, r3
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	464b      	mov	r3, r9
 8003750:	eb45 0303 	adc.w	r3, r5, r3
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003762:	4629      	mov	r1, r5
 8003764:	028b      	lsls	r3, r1, #10
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800376c:	4621      	mov	r1, r4
 800376e:	028a      	lsls	r2, r1, #10
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003778:	2200      	movs	r2, #0
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800377e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003782:	f7fc fd3f 	bl	8000204 <__aeabi_uldivmod>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	4613      	mov	r3, r2
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003790:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0f1b      	lsrs	r3, r3, #28
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800379e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ae:	e003      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80037b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	37b8      	adds	r7, #184	@ 0xb8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	00f42400 	.word	0x00f42400

080037d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e28d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8083 	beq.w	80038f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037f0:	4b94      	ldr	r3, [pc, #592]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d019      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037fc:	4b91      	ldr	r3, [pc, #580]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003804:	2b08      	cmp	r3, #8
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003808:	4b8e      	ldr	r3, [pc, #568]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4b8b      	ldr	r3, [pc, #556]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b84      	ldr	r3, [pc, #528]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x124>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e25a      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x90>
 8003852:	4b7c      	ldr	r3, [pc, #496]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7b      	ldr	r2, [pc, #492]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0xb4>
 800386a:	4b76      	ldr	r3, [pc, #472]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a75      	ldr	r2, [pc, #468]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b73      	ldr	r3, [pc, #460]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a72      	ldr	r2, [pc, #456]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xcc>
 8003884:	4b6f      	ldr	r3, [pc, #444]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b6c      	ldr	r3, [pc, #432]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a6b      	ldr	r2, [pc, #428]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fd f94a 	bl	8000b3c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7fd f946 	bl	8000b3c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e21f      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b61      	ldr	r3, [pc, #388]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xdc>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd f936 	bl	8000b3c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fd f932 	bl	8000b3c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e20b      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b57      	ldr	r3, [pc, #348]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x104>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06f      	beq.n	80039e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003902:	4b50      	ldr	r3, [pc, #320]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800390e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800391a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d11c      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b44      	ldr	r3, [pc, #272]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d116      	bne.n	800396c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	4b41      	ldr	r3, [pc, #260]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1d3      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4937      	ldr	r1, [pc, #220]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	e03a      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x278>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd f8df 	bl	8000b3c <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd f8db 	bl	8000b3c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1b4      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b28      	ldr	r3, [pc, #160]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4925      	ldr	r1, [pc, #148]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_RCC_OscConfig+0x278>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd f8be 	bl	8000b3c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c4:	f7fd f8ba 	bl	8000b3c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e193      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d036      	beq.n	8003a5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d016      	beq.n	8003a24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <HAL_RCC_OscConfig+0x27c>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd f89e 	bl	8000b3c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fd f89a 	bl	8000b3c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e173      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_RCC_OscConfig+0x274>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x234>
 8003a22:	e01b      	b.n	8003a5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a24:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_OscConfig+0x27c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd f887 	bl	8000b3c <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	e00e      	b.n	8003a50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fd f883 	bl	8000b3c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d907      	bls.n	8003a50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e15c      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470000 	.word	0x42470000
 8003a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	4b8a      	ldr	r3, [pc, #552]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ea      	bne.n	8003a32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8097 	beq.w	8003b98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b83      	ldr	r3, [pc, #524]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10f      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	4a7e      	ldr	r2, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9a:	4b79      	ldr	r3, [pc, #484]	@ (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d118      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	@ (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a75      	ldr	r2, [pc, #468]	@ (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fd f843 	bl	8000b3c <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aba:	f7fd f83f 	bl	8000b3c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e118      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c80 <HAL_RCC_OscConfig+0x4b0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x31e>
 8003ae0:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a65      	ldr	r2, [pc, #404]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aec:	e01c      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x340>
 8003af6:	4b61      	ldr	r3, [pc, #388]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	4a60      	ldr	r2, [pc, #384]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b02:	4b5e      	ldr	r3, [pc, #376]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	4a5d      	ldr	r2, [pc, #372]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0x358>
 8003b10:	4b5a      	ldr	r3, [pc, #360]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a59      	ldr	r2, [pc, #356]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1c:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a56      	ldr	r2, [pc, #344]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f023 0304 	bic.w	r3, r3, #4
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fd f804 	bl	8000b3c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fd f800 	bl	8000b3c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e0d7      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ee      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b5a:	e014      	b.n	8003b86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fc ffee 	bl	8000b3c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fc ffea 	bl	8000b3c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0c1      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	4b40      	ldr	r3, [pc, #256]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ee      	bne.n	8003b64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	4a3a      	ldr	r2, [pc, #232]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80ad 	beq.w	8003cfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d060      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d145      	bne.n	8003c42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b33      	ldr	r3, [pc, #204]	@ (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fc ffbe 	bl	8000b3c <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fc ffba 	bl	8000b3c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e093      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	019b      	lsls	r3, r3, #6
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fc ff8f 	bl	8000b3c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fc ff8b 	bl	8000b3c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e064      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x452>
 8003c40:	e05c      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_RCC_OscConfig+0x4b4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fc ff78 	bl	8000b3c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fc ff74 	bl	8000b3c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04d      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x4ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x480>
 8003c6e:	e045      	b.n	8003cfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e040      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <HAL_RCC_OscConfig+0x538>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d030      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d129      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d122      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d119      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d107      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc fdf4 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 f946 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f06f 0202 	mvn.w	r2, #2
 8003dde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8d2 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f8c4 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8d5 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0204 	mvn.w	r2, #4
 8003e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8ac 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003e46:	e005      	b.n	8003e54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f89e 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f8af 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0208 	mvn.w	r2, #8
 8003e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f886 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003e92:	e005      	b.n	8003ea0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f878 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f889 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01b      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f06f 0210 	mvn.w	r2, #16
 8003ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f860 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
 8003ede:	e005      	b.n	8003eec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f852 	bl	8003f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f863 	bl	8003fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00c      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f06f 0201 	mvn.w	r2, #1
 8003f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fc fc7d 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f907 	bl	8004148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f834 	bl	8003fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00c      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d007      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0220 	mvn.w	r2, #32
 8003f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8d9 	bl	8004134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a46      	ldr	r2, [pc, #280]	@ (8004108 <TIM_Base_SetConfig+0x12c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d00f      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a43      	ldr	r2, [pc, #268]	@ (800410c <TIM_Base_SetConfig+0x130>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a42      	ldr	r2, [pc, #264]	@ (8004110 <TIM_Base_SetConfig+0x134>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a41      	ldr	r2, [pc, #260]	@ (8004114 <TIM_Base_SetConfig+0x138>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a40      	ldr	r2, [pc, #256]	@ (8004118 <TIM_Base_SetConfig+0x13c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a35      	ldr	r2, [pc, #212]	@ (8004108 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403c:	d027      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a32      	ldr	r2, [pc, #200]	@ (800410c <TIM_Base_SetConfig+0x130>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d023      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a31      	ldr	r2, [pc, #196]	@ (8004110 <TIM_Base_SetConfig+0x134>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a30      	ldr	r2, [pc, #192]	@ (8004114 <TIM_Base_SetConfig+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2f      	ldr	r2, [pc, #188]	@ (8004118 <TIM_Base_SetConfig+0x13c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d017      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2e      	ldr	r2, [pc, #184]	@ (800411c <TIM_Base_SetConfig+0x140>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2d      	ldr	r2, [pc, #180]	@ (8004120 <TIM_Base_SetConfig+0x144>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00f      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <TIM_Base_SetConfig+0x148>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2b      	ldr	r2, [pc, #172]	@ (8004128 <TIM_Base_SetConfig+0x14c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2a      	ldr	r2, [pc, #168]	@ (800412c <TIM_Base_SetConfig+0x150>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a29      	ldr	r2, [pc, #164]	@ (8004130 <TIM_Base_SetConfig+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <TIM_Base_SetConfig+0x12c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <TIM_Base_SetConfig+0x13c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	611a      	str	r2, [r3, #16]
  }
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40010400 	.word	0x40010400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800
 8004128:	40001800 	.word	0x40001800
 800412c:	40001c00 	.word	0x40001c00
 8004130:	40002000 	.word	0x40002000

08004134 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800415c:	b084      	sub	sp, #16
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	f107 001c 	add.w	r0, r7, #28
 800416a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004172:	2b01      	cmp	r3, #1
 8004174:	d123      	bne.n	80041be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800418a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800419e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d105      	bne.n	80041b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 fadc 	bl	8005770 <USB_CoreReset>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e01b      	b.n	80041f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f001 fad0 	bl	8005770 <USB_CoreReset>
 80041d0:	4603      	mov	r3, r0
 80041d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80041e8:	e005      	b.n	80041f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041f6:	7fbb      	ldrb	r3, [r7, #30]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10b      	bne.n	8004214 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f043 0206 	orr.w	r2, r3, #6
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004220:	b004      	add	sp, #16
 8004222:	4770      	bx	lr

08004224 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d165      	bne.n	8004304 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a41      	ldr	r2, [pc, #260]	@ (8004340 <USB_SetTurnaroundTime+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d906      	bls.n	800424e <USB_SetTurnaroundTime+0x2a>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a40      	ldr	r2, [pc, #256]	@ (8004344 <USB_SetTurnaroundTime+0x120>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d202      	bcs.n	800424e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004248:	230f      	movs	r3, #15
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e062      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a3c      	ldr	r2, [pc, #240]	@ (8004344 <USB_SetTurnaroundTime+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d306      	bcc.n	8004264 <USB_SetTurnaroundTime+0x40>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <USB_SetTurnaroundTime+0x124>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d202      	bcs.n	8004264 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800425e:	230e      	movs	r3, #14
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e057      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <USB_SetTurnaroundTime+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d306      	bcc.n	800427a <USB_SetTurnaroundTime+0x56>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a37      	ldr	r2, [pc, #220]	@ (800434c <USB_SetTurnaroundTime+0x128>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d202      	bcs.n	800427a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004274:	230d      	movs	r3, #13
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e04c      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4a33      	ldr	r2, [pc, #204]	@ (800434c <USB_SetTurnaroundTime+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d306      	bcc.n	8004290 <USB_SetTurnaroundTime+0x6c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a32      	ldr	r2, [pc, #200]	@ (8004350 <USB_SetTurnaroundTime+0x12c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d802      	bhi.n	8004290 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800428a:	230c      	movs	r3, #12
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e041      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a2f      	ldr	r2, [pc, #188]	@ (8004350 <USB_SetTurnaroundTime+0x12c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d906      	bls.n	80042a6 <USB_SetTurnaroundTime+0x82>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a2e      	ldr	r2, [pc, #184]	@ (8004354 <USB_SetTurnaroundTime+0x130>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d802      	bhi.n	80042a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042a0:	230b      	movs	r3, #11
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e036      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <USB_SetTurnaroundTime+0x130>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d906      	bls.n	80042bc <USB_SetTurnaroundTime+0x98>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a29      	ldr	r2, [pc, #164]	@ (8004358 <USB_SetTurnaroundTime+0x134>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d802      	bhi.n	80042bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042b6:	230a      	movs	r3, #10
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e02b      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <USB_SetTurnaroundTime+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d906      	bls.n	80042d2 <USB_SetTurnaroundTime+0xae>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a25      	ldr	r2, [pc, #148]	@ (800435c <USB_SetTurnaroundTime+0x138>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d202      	bcs.n	80042d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042cc:	2309      	movs	r3, #9
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e020      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a21      	ldr	r2, [pc, #132]	@ (800435c <USB_SetTurnaroundTime+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d306      	bcc.n	80042e8 <USB_SetTurnaroundTime+0xc4>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a20      	ldr	r2, [pc, #128]	@ (8004360 <USB_SetTurnaroundTime+0x13c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042e2:	2308      	movs	r3, #8
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e015      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004360 <USB_SetTurnaroundTime+0x13c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d906      	bls.n	80042fe <USB_SetTurnaroundTime+0xda>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <USB_SetTurnaroundTime+0x140>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d202      	bcs.n	80042fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042f8:	2307      	movs	r3, #7
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e00a      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042fe:	2306      	movs	r3, #6
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e007      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800430a:	2309      	movs	r3, #9
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e001      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004310:	2309      	movs	r3, #9
 8004312:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	00d8acbf 	.word	0x00d8acbf
 8004344:	00e4e1c0 	.word	0x00e4e1c0
 8004348:	00f42400 	.word	0x00f42400
 800434c:	01067380 	.word	0x01067380
 8004350:	011a499f 	.word	0x011a499f
 8004354:	01312cff 	.word	0x01312cff
 8004358:	014ca43f 	.word	0x014ca43f
 800435c:	016e3600 	.word	0x016e3600
 8004360:	01a6ab1f 	.word	0x01a6ab1f
 8004364:	01e84800 	.word	0x01e84800

08004368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043da:	200a      	movs	r0, #10
 80043dc:	f7fc fbba 	bl	8000b54 <HAL_Delay>
      ms += 10U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	330a      	adds	r3, #10
 80043e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f001 f933 	bl	8005652 <USB_GetMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d01e      	beq.n	8004430 <USB_SetCurrentMode+0x84>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80043f6:	d9f0      	bls.n	80043da <USB_SetCurrentMode+0x2e>
 80043f8:	e01a      	b.n	8004430 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d115      	bne.n	800442c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800440c:	200a      	movs	r0, #10
 800440e:	f7fc fba1 	bl	8000b54 <HAL_Delay>
      ms += 10U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	330a      	adds	r3, #10
 8004416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f91a 	bl	8005652 <USB_GetMode>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <USB_SetCurrentMode+0x84>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2bc7      	cmp	r3, #199	@ 0xc7
 8004428:	d9f0      	bls.n	800440c <USB_SetCurrentMode+0x60>
 800442a:	e001      	b.n	8004430 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e005      	b.n	800443c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2bc8      	cmp	r3, #200	@ 0xc8
 8004434:	d101      	bne.n	800443a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004444:	b084      	sub	sp, #16
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e009      	b.n	8004478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3340      	adds	r3, #64	@ 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0e      	cmp	r3, #14
 800447c:	d9f2      	bls.n	8004464 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800447e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11c      	bne.n	80044c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e005      	b.n	80044cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10d      	bne.n	80044fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044e8:	2100      	movs	r1, #0
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f968 	bl	80047c0 <USB_SetDevSpeed>
 80044f0:	e008      	b.n	8004504 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044f2:	2101      	movs	r1, #1
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f963 	bl	80047c0 <USB_SetDevSpeed>
 80044fa:	e003      	b.n	8004504 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044fc:	2103      	movs	r1, #3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f95e 	bl	80047c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004504:	2110      	movs	r1, #16
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8fa 	bl	8004700 <USB_FlushTxFifo>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f924 	bl	8004764 <USB_FlushRxFifo>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004538:	461a      	mov	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	e043      	b.n	80045d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004566:	d118      	bne.n	800459a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e013      	b.n	80045ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e008      	b.n	80045ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ca:	461a      	mov	r2, r3
 80045cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d3b5      	bcc.n	8004550 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e043      	b.n	8004672 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004600:	d118      	bne.n	8004634 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004614:	461a      	mov	r2, r3
 8004616:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e013      	b.n	8004646 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e008      	b.n	8004646 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004664:	461a      	mov	r2, r3
 8004666:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800466a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004676:	461a      	mov	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4293      	cmp	r3, r2
 800467c:	d3b5      	bcc.n	80045ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004690:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800469e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <USB_DevInit+0x2b8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f043 0208 	orr.w	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f8:	b004      	add	sp, #16
 80046fa:	4770      	bx	lr
 80046fc:	803c3800 	.word	0x803c3800

08004700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471a:	d901      	bls.n	8004720 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e01b      	b.n	8004758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	daf2      	bge.n	800470e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004744:	d901      	bls.n	800474a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e006      	b.n	8004758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d0f0      	beq.n	8004738 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800477c:	d901      	bls.n	8004782 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e018      	b.n	80047b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	daf2      	bge.n	8004770 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2210      	movs	r2, #16
 8004792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047a0:	d901      	bls.n	80047a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e006      	b.n	80047b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d0f0      	beq.n	8004794 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]
 8004816:	e00a      	b.n	800482e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d002      	beq.n	8004824 <USB_GetDevSpeed+0x32>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b06      	cmp	r3, #6
 8004822:	d102      	bne.n	800482a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004824:	2302      	movs	r3, #2
 8004826:	75fb      	strb	r3, [r7, #23]
 8004828:	e001      	b.n	800482e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800482a:	230f      	movs	r3, #15
 800482c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800482e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d13a      	bne.n	80048ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004876:	4313      	orrs	r3, r2
 8004878:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d155      	bne.n	800493c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	791b      	ldrb	r3, [r3, #4]
 80048aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	059b      	lsls	r3, r3, #22
 80048b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048b4:	4313      	orrs	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e036      	b.n	800493c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11a      	bne.n	800493c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	791b      	ldrb	r3, [r3, #4]
 8004920:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004922:	430b      	orrs	r3, r1
 8004924:	4313      	orrs	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d161      	bne.n	8004a2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800497a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800497e:	d11f      	bne.n	80049c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800499a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800499e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f303 	lsl.w	r3, r1, r3
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049e0:	4013      	ands	r3, r2
 80049e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a04:	4013      	ands	r3, r2
 8004a06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	0159      	lsls	r1, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	440b      	add	r3, r1
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a22:	4619      	mov	r1, r3
 8004a24:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <USB_DeactivateEndpoint+0x1b0>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	600b      	str	r3, [r1, #0]
 8004a2a:	e060      	b.n	8004aee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a42:	d11f      	bne.n	8004a84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	0159      	lsls	r1, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <USB_DeactivateEndpoint+0x1b4>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	ec337800 	.word	0xec337800
 8004b00:	eff37800 	.word	0xeff37800

08004b04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	@ 0x28
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 817a 	bne.w	8004e1a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d132      	bne.n	8004b94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	0151      	lsls	r1, r2, #5
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	440a      	add	r2, r1
 8004b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b8c:	0cdb      	lsrs	r3, r3, #19
 8004b8e:	04db      	lsls	r3, r3, #19
 8004b90:	6113      	str	r3, [r2, #16]
 8004b92:	e092      	b.n	8004cba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bae:	0cdb      	lsrs	r3, r3, #19
 8004bb0:	04db      	lsls	r3, r3, #19
 8004bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bd2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bd6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d11a      	bne.n	8004c14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d903      	bls.n	8004bf2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c10:	6113      	str	r3, [r2, #16]
 8004c12:	e01b      	b.n	8004c4c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6919      	ldr	r1, [r3, #16]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	440b      	add	r3, r1
 8004c2c:	1e59      	subs	r1, r3, #1
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c36:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c38:	4ba2      	ldr	r3, [pc, #648]	@ (8004ec4 <USB_EPStartXfer+0x3c0>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	0148      	lsls	r0, r1, #5
 8004c40:	69f9      	ldr	r1, [r7, #28]
 8004c42:	4401      	add	r1, r0
 8004c44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	0148      	lsls	r0, r1, #5
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	4401      	add	r1, r0
 8004c6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d11f      	bne.n	8004cba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c94:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004c98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d14b      	bne.n	8004d58 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	791b      	ldrb	r3, [r3, #4]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d128      	bne.n	8004d36 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	e00f      	b.n	8004d36 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d50:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e165      	b.n	8005024 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d015      	beq.n	8004dac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 814d 	beq.w	8005024 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004da6:	4313      	orrs	r3, r2
 8004da8:	634b      	str	r3, [r1, #52]	@ 0x34
 8004daa:	e13b      	b.n	8005024 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dd6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e00f      	b.n	8004dfe <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	68d9      	ldr	r1, [r3, #12]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	b298      	uxth	r0, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4603      	mov	r3, r0
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f9b8 	bl	8005188 <USB_WritePacket>
 8004e18:	e104      	b.n	8005024 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e34:	0cdb      	lsrs	r3, r3, #19
 8004e36:	04db      	lsls	r3, r3, #19
 8004e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e5c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d131      	bne.n	8004ec8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	69b9      	ldr	r1, [r7, #24]
 8004e94:	0148      	lsls	r0, r1, #5
 8004e96:	69f9      	ldr	r1, [r7, #28]
 8004e98:	4401      	add	r1, r0
 8004e9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ebc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ec0:	6113      	str	r3, [r2, #16]
 8004ec2:	e061      	b.n	8004f88 <USB_EPStartXfer+0x484>
 8004ec4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d123      	bne.n	8004f18 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee6:	69b9      	ldr	r1, [r7, #24]
 8004ee8:	0148      	lsls	r0, r1, #5
 8004eea:	69f9      	ldr	r1, [r7, #28]
 8004eec:	4401      	add	r1, r0
 8004eee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f14:	6113      	str	r3, [r2, #16]
 8004f16:	e037      	b.n	8004f88 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	1e5a      	subs	r2, r3, #1
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	8afa      	ldrh	r2, [r7, #22]
 8004f34:	fb03 f202 	mul.w	r2, r3, r2
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	8afb      	ldrh	r3, [r7, #22]
 8004f4c:	04d9      	lsls	r1, r3, #19
 8004f4e:	4b38      	ldr	r3, [pc, #224]	@ (8005030 <USB_EPStartXfer+0x52c>)
 8004f50:	400b      	ands	r3, r1
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	0148      	lsls	r0, r1, #5
 8004f56:	69f9      	ldr	r1, [r7, #28]
 8004f58:	4401      	add	r1, r0
 8004f5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f78:	69b9      	ldr	r1, [r7, #24]
 8004f7a:	0148      	lsls	r0, r1, #5
 8004f7c:	69f9      	ldr	r1, [r7, #28]
 8004f7e:	4401      	add	r1, r0
 8004f80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f84:	4313      	orrs	r3, r2
 8004f86:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10d      	bne.n	8004faa <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	68d9      	ldr	r1, [r3, #12]
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	791b      	ldrb	r3, [r3, #4]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d128      	bne.n	8005004 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d110      	bne.n	8004fe4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	e00f      	b.n	8005004 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005002:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005022:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	1ff80000 	.word	0x1ff80000

08005034 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d14a      	bne.n	80050e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005066:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800506a:	f040 8086 	bne.w	800517a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	7812      	ldrb	r2, [r2, #0]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800508c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005090:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d902      	bls.n	80050cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
          break;
 80050ca:	e056      	b.n	800517a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e4:	d0e7      	beq.n	80050b6 <USB_EPStopXfer+0x82>
 80050e6:	e048      	b.n	800517a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005100:	d13b      	bne.n	800517a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005120:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005124:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005148:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3301      	adds	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005156:	4293      	cmp	r3, r2
 8005158:	d902      	bls.n	8005160 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
          break;
 800515e:	e00c      	b.n	800517a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005178:	d0e7      	beq.n	800514a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005188:	b480      	push	{r7}
 800518a:	b089      	sub	sp, #36	@ 0x24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	460b      	mov	r3, r1
 8005198:	71fb      	strb	r3, [r7, #7]
 800519a:	4613      	mov	r3, r2
 800519c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d123      	bne.n	80051f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051ae:	88bb      	ldrh	r3, [r7, #4]
 80051b0:	3303      	adds	r3, #3
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	e018      	b.n	80051ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	031a      	lsls	r2, r3, #12
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c8:	461a      	mov	r2, r3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	3301      	adds	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3301      	adds	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	3301      	adds	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3e2      	bcc.n	80051bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3724      	adds	r7, #36	@ 0x24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005204:	b480      	push	{r7}
 8005206:	b08b      	sub	sp, #44	@ 0x2c
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	089b      	lsrs	r3, r3, #2
 800521e:	b29b      	uxth	r3, r3
 8005220:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	f003 0303 	and.w	r3, r3, #3
 8005228:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	623b      	str	r3, [r7, #32]
 800522e:	e014      	b.n	800525a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	601a      	str	r2, [r3, #0]
    pDest++;
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	3301      	adds	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	3301      	adds	r3, #1
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	3301      	adds	r3, #1
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	3301      	adds	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	3301      	adds	r3, #1
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3e6      	bcc.n	8005230 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01e      	beq.n	80052a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005272:	461a      	mov	r2, r3
 8005274:	f107 0310 	add.w	r3, r7, #16
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	b2da      	uxtb	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	701a      	strb	r2, [r3, #0]
      i++;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	3301      	adds	r3, #1
 8005292:	623b      	str	r3, [r7, #32]
      pDest++;
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	3301      	adds	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800529a:	8bfb      	ldrh	r3, [r7, #30]
 800529c:	3b01      	subs	r3, #1
 800529e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052a0:	8bfb      	ldrh	r3, [r7, #30]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1ea      	bne.n	800527c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	372c      	adds	r7, #44	@ 0x2c
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d12c      	bne.n	800532a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	db12      	blt.n	8005308 <USB_EPSetStall+0x54>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00f      	beq.n	8005308 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005306:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e02b      	b.n	8005382 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	db12      	blt.n	8005362 <USB_EPSetStall+0xae>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800535c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005360:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800537c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005380:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d128      	bne.n	80053fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d003      	beq.n	80053dc <USB_EPClearStall+0x4c>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d138      	bne.n	800544e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e027      	b.n	800544e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005418:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800541c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	791b      	ldrb	r3, [r3, #4]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d003      	beq.n	800542e <USB_EPClearStall+0x9e>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	791b      	ldrb	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d10f      	bne.n	800544e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800547e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054d6:	f023 0302 	bic.w	r3, r3, #2
 80054da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005504:	f023 0303 	bic.w	r3, r3, #3
 8005508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4013      	ands	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005544:	68fb      	ldr	r3, [r7, #12]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0c1b      	lsrs	r3, r3, #16
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	b29b      	uxth	r3, r3
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b085      	sub	sp, #20
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055e8:	68bb      	ldr	r3, [r7, #8]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005618:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	b2db      	uxtb	r3, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4013      	ands	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005644:	68bb      	ldr	r3, [r7, #8]
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0301 	and.w	r3, r3, #1
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005688:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800568c:	f023 0307 	bic.w	r3, r3, #7
 8005690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	460b      	mov	r3, r1
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	333c      	adds	r3, #60	@ 0x3c
 80056ca:	3304      	adds	r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4a26      	ldr	r2, [pc, #152]	@ (800576c <USB_EP0_OutStart+0xb8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d90a      	bls.n	80056ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e8:	d101      	bne.n	80056ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e037      	b.n	800575e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800570c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800571c:	f043 0318 	orr.w	r3, r3, #24
 8005720:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005730:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005734:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005736:	7afb      	ldrb	r3, [r7, #11]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10f      	bne.n	800575c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005756:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800575a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	4f54300a 	.word	0x4f54300a

08005770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005788:	d901      	bls.n	800578e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e01b      	b.n	80057c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	daf2      	bge.n	800577c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f043 0201 	orr.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3301      	adds	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057b2:	d901      	bls.n	80057b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e006      	b.n	80057c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d0f0      	beq.n	80057a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80057e0:	2018      	movs	r0, #24
 80057e2:	f002 fb8b 	bl	8007efc <USBD_static_malloc>
 80057e6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d109      	bne.n	8005802 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	32b0      	adds	r2, #176	@ 0xb0
 80057f8:	2100      	movs	r1, #0
 80057fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057fe:	2302      	movs	r3, #2
 8005800:	e08a      	b.n	8005918 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	32b0      	adds	r2, #176	@ 0xb0
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	32b0      	adds	r2, #176	@ 0xb0
 800581c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11b      	bne.n	8005866 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800582e:	4b3c      	ldr	r3, [pc, #240]	@ (8005920 <USBD_CUSTOM_HID_Init+0x14c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 020f 	and.w	r2, r3, #15
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	3326      	adds	r3, #38	@ 0x26
 8005844:	2205      	movs	r2, #5
 8005846:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005848:	4b36      	ldr	r3, [pc, #216]	@ (8005924 <USBD_CUSTOM_HID_Init+0x150>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005860:	2205      	movs	r2, #5
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e01a      	b.n	800589c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005866:	4b2e      	ldr	r3, [pc, #184]	@ (8005920 <USBD_CUSTOM_HID_Init+0x14c>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3326      	adds	r3, #38	@ 0x26
 800587c:	2201      	movs	r2, #1
 800587e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005880:	4b28      	ldr	r3, [pc, #160]	@ (8005924 <USBD_CUSTOM_HID_Init+0x150>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005898:	2201      	movs	r2, #1
 800589a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800589c:	4b20      	ldr	r3, [pc, #128]	@ (8005920 <USBD_CUSTOM_HID_Init+0x14c>)
 800589e:	7819      	ldrb	r1, [r3, #0]
 80058a0:	2304      	movs	r3, #4
 80058a2:	2203      	movs	r2, #3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f002 f9ca 	bl	8007c3e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80058aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005920 <USBD_CUSTOM_HID_Init+0x14c>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 020f 	and.w	r2, r3, #15
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3324      	adds	r3, #36	@ 0x24
 80058c0:	2201      	movs	r2, #1
 80058c2:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80058c4:	4b17      	ldr	r3, [pc, #92]	@ (8005924 <USBD_CUSTOM_HID_Init+0x150>)
 80058c6:	7819      	ldrb	r1, [r3, #0]
 80058c8:	2302      	movs	r3, #2
 80058ca:	2203      	movs	r2, #3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f002 f9b6 	bl	8007c3e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80058d2:	4b14      	ldr	r3, [pc, #80]	@ (8005924 <USBD_CUSTOM_HID_Init+0x150>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80058ea:	2201      	movs	r2, #1
 80058ec:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	33b0      	adds	r3, #176	@ 0xb0
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005908:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <USBD_CUSTOM_HID_Init+0x150>)
 800590a:	7819      	ldrb	r1, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	2302      	movs	r3, #2
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f002 fa83 	bl	8007e1c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000086 	.word	0x20000086
 8005924:	20000087 	.word	0x20000087

08005928 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005934:	4b37      	ldr	r3, [pc, #220]	@ (8005a14 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f002 f9a5 	bl	8007c8a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8005940:	4b34      	ldr	r3, [pc, #208]	@ (8005a14 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3324      	adds	r3, #36	@ 0x24
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800595a:	4b2e      	ldr	r3, [pc, #184]	@ (8005a14 <USBD_CUSTOM_HID_DeInit+0xec>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	3326      	adds	r3, #38	@ 0x26
 8005970:	2200      	movs	r2, #0
 8005972:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005974:	4b28      	ldr	r3, [pc, #160]	@ (8005a18 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f002 f985 	bl	8007c8a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8005980:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005998:	2200      	movs	r2, #0
 800599a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800599c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a18 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80059b4:	2200      	movs	r2, #0
 80059b6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	32b0      	adds	r2, #176	@ 0xb0
 80059c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01f      	beq.n	8005a0a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	33b0      	adds	r3, #176	@ 0xb0
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	32b0      	adds	r2, #176	@ 0xb0
 80059e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fa93 	bl	8007f18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	32b0      	adds	r2, #176	@ 0xb0
 80059fc:	2100      	movs	r1, #0
 80059fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000086 	.word	0x20000086
 8005a18:	20000087 	.word	0x20000087

08005a1c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	32b0      	adds	r2, #176	@ 0xb0
 8005a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a34:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0f8      	b.n	8005c42 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d056      	beq.n	8005b0a <USBD_CUSTOM_HID_Setup+0xee>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f040 80e8 	bne.w	8005c32 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	3b02      	subs	r3, #2
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	d846      	bhi.n	8005afa <USBD_CUSTOM_HID_Setup+0xde>
 8005a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <USBD_CUSTOM_HID_Setup+0x58>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005afb 	.word	0x08005afb
 8005a80:	08005afb 	.word	0x08005afb
 8005a84:	08005afb 	.word	0x08005afb
 8005a88:	08005afb 	.word	0x08005afb
 8005a8c:	08005afb 	.word	0x08005afb
 8005a90:	08005add 	.word	0x08005add
 8005a94:	08005abb 	.word	0x08005abb
 8005a98:	08005a9d 	.word	0x08005a9d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	885b      	ldrh	r3, [r3, #2]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]
          break;
 8005aa8:	e02e      	b.n	8005b08 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3304      	adds	r3, #4
 8005aae:	2201      	movs	r2, #1
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fcf4 	bl	80074a0 <USBD_CtlSendData>
          break;
 8005ab8:	e026      	b.n	8005b08 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	885b      	ldrh	r3, [r3, #2]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	609a      	str	r2, [r3, #8]
          break;
 8005aca:	e01d      	b.n	8005b08 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fce3 	bl	80074a0 <USBD_CtlSendData>
          break;
 8005ada:	e015      	b.n	8005b08 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005ae2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	88db      	ldrh	r3, [r3, #6]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	bf28      	it	cs
 8005aec:	2302      	movcs	r3, #2
 8005aee:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005af0:	461a      	mov	r2, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 fd00 	bl	80074f8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005af8:	e006      	b.n	8005b08 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fc5e 	bl	80073be <USBD_CtlError>
          ret = USBD_FAIL;
 8005b02:	2303      	movs	r3, #3
 8005b04:	75fb      	strb	r3, [r7, #23]
          break;
 8005b06:	bf00      	nop
      }
      break;
 8005b08:	e09a      	b.n	8005c40 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b0b      	cmp	r3, #11
 8005b10:	f200 8086 	bhi.w	8005c20 <USBD_CUSTOM_HID_Setup+0x204>
 8005b14:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <USBD_CUSTOM_HID_Setup+0x100>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b4d 	.word	0x08005b4d
 8005b20:	08005c2f 	.word	0x08005c2f
 8005b24:	08005c21 	.word	0x08005c21
 8005b28:	08005c21 	.word	0x08005c21
 8005b2c:	08005c21 	.word	0x08005c21
 8005b30:	08005c21 	.word	0x08005c21
 8005b34:	08005b77 	.word	0x08005b77
 8005b38:	08005c21 	.word	0x08005c21
 8005b3c:	08005c21 	.word	0x08005c21
 8005b40:	08005c21 	.word	0x08005c21
 8005b44:	08005bcf 	.word	0x08005bcf
 8005b48:	08005bf9 	.word	0x08005bf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d107      	bne.n	8005b68 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b58:	f107 030e 	add.w	r3, r7, #14
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fc9d 	bl	80074a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b66:	e063      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 fc27 	bl	80073be <USBD_CtlError>
            ret = USBD_FAIL;
 8005b70:	2303      	movs	r3, #3
 8005b72:	75fb      	strb	r3, [r7, #23]
          break;
 8005b74:	e05c      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	885b      	ldrh	r3, [r3, #2]
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b22      	cmp	r3, #34	@ 0x22
 8005b80:	d110      	bne.n	8005ba4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	2b4b      	cmp	r3, #75	@ 0x4b
 8005b88:	bf28      	it	cs
 8005b8a:	234b      	movcs	r3, #75	@ 0x4b
 8005b8c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	33b0      	adds	r3, #176	@ 0xb0
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e00d      	b.n	8005bc0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	885b      	ldrh	r3, [r3, #2]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b21      	cmp	r3, #33	@ 0x21
 8005bae:	d107      	bne.n	8005bc0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005bb0:	4b26      	ldr	r3, [pc, #152]	@ (8005c4c <USBD_CUSTOM_HID_Setup+0x230>)
 8005bb2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	88db      	ldrh	r3, [r3, #6]
 8005bb8:	2b09      	cmp	r3, #9
 8005bba:	bf28      	it	cs
 8005bbc:	2309      	movcs	r3, #9
 8005bbe:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	69b9      	ldr	r1, [r7, #24]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fc6a 	bl	80074a0 <USBD_CtlSendData>
          break;
 8005bcc:	e030      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d107      	bne.n	8005bea <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	2201      	movs	r2, #1
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 fc5c 	bl	80074a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be8:	e022      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fbe6 	bl	80073be <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8005bf6:	e01b      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d106      	bne.n	8005c12 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	885b      	ldrh	r3, [r3, #2]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c10:	e00e      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fbd2 	bl	80073be <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c1e:	e007      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fbcb 	bl	80073be <USBD_CtlError>
          ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2c:	e000      	b.n	8005c30 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8005c2e:	bf00      	nop
      }
      break;
 8005c30:	e006      	b.n	8005c40 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fbc2 	bl	80073be <USBD_CtlError>
      ret = USBD_FAIL;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3e:	bf00      	nop
  }
  return (uint8_t)ret;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000070 	.word	0x20000070

08005c50 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	32b0      	adds	r2, #176	@ 0xb0
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e017      	b.n	8005ca8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d110      	bne.n	8005ca6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	7d1b      	ldrb	r3, [r3, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005c94:	7819      	ldrb	r1, [r3, #0]
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f002 f89d 	bl	8007dda <USBD_LL_Transmit>
 8005ca0:	e001      	b.n	8005ca6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000086 	.word	0x20000086

08005cb4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005cbc:	2181      	movs	r1, #129	@ 0x81
 8005cbe:	4815      	ldr	r0, [pc, #84]	@ (8005d14 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005cc0:	f000 fd1d 	bl	80066fe <USBD_GetEpDesc>
 8005cc4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4812      	ldr	r0, [pc, #72]	@ (8005d14 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005cca:	f000 fd18 	bl	80066fe <USBD_GetEpDesc>
 8005cce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f042 0204 	orr.w	r2, r2, #4
 8005cde:	711a      	strb	r2, [r3, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f042 0202 	orr.w	r2, r2, #2
 8005cf8:	711a      	strb	r2, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2201      	movs	r2, #1
 8005d02:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2229      	movs	r2, #41	@ 0x29
 8005d08:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005d0a:	4b02      	ldr	r3, [pc, #8]	@ (8005d14 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000044 	.word	0x20000044

08005d18 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d20:	2181      	movs	r1, #129	@ 0x81
 8005d22:	4815      	ldr	r0, [pc, #84]	@ (8005d78 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d24:	f000 fceb 	bl	80066fe <USBD_GetEpDesc>
 8005d28:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4812      	ldr	r0, [pc, #72]	@ (8005d78 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005d2e:	f000 fce6 	bl	80066fe <USBD_GetEpDesc>
 8005d32:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f042 0204 	orr.w	r2, r2, #4
 8005d42:	711a      	strb	r2, [r3, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2205      	movs	r2, #5
 8005d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f042 0202 	orr.w	r2, r2, #2
 8005d5c:	711a      	strb	r2, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2205      	movs	r2, #5
 8005d66:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2229      	movs	r2, #41	@ 0x29
 8005d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005d6e:	4b02      	ldr	r3, [pc, #8]	@ (8005d78 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000044 	.word	0x20000044

08005d7c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005d84:	2181      	movs	r1, #129	@ 0x81
 8005d86:	4815      	ldr	r0, [pc, #84]	@ (8005ddc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005d88:	f000 fcb9 	bl	80066fe <USBD_GetEpDesc>
 8005d8c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4812      	ldr	r0, [pc, #72]	@ (8005ddc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005d92:	f000 fcb4 	bl	80066fe <USBD_GetEpDesc>
 8005d96:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f042 0204 	orr.w	r2, r2, #4
 8005da6:	711a      	strb	r2, [r3, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f042 0202 	orr.w	r2, r2, #2
 8005dc0:	711a      	strb	r2, [r3, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2229      	movs	r2, #41	@ 0x29
 8005dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005dd2:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000044 	.word	0x20000044

08005de0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	32b0      	adds	r2, #176	@ 0xb0
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	32b0      	adds	r2, #176	@ 0xb0
 8005e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e017      	b.n	8005e5e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32b0      	adds	r2, #176	@ 0xb0
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	33b0      	adds	r3, #176	@ 0xb0
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	7810      	ldrb	r0, [r2, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	7852      	ldrb	r2, [r2, #1]
 8005e58:	4611      	mov	r1, r2
 8005e5a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	32b0      	adds	r2, #176	@ 0xb0
 8005e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e00f      	b.n	8005ea6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	32b0      	adds	r2, #176	@ 0xb0
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005e98:	7819      	ldrb	r1, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 ffbc 	bl	8007e1c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000087 	.word	0x20000087

08005eb4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32b0      	adds	r2, #176	@ 0xb0
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e016      	b.n	8005f04 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d111      	bne.n	8005f02 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	33b0      	adds	r3, #176	@ 0xb0
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	7810      	ldrb	r0, [r2, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	7852      	ldrb	r2, [r2, #1]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	220a      	movs	r2, #10
 8005f18:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005f1a:	4b03      	ldr	r3, [pc, #12]	@ (8005f28 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	2000007c 	.word	0x2000007c

08005f2c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e009      	b.n	8005f54 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	33b0      	adds	r3, #176	@ 0xb0
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e01f      	b.n	8005fb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	79fa      	ldrb	r2, [r7, #7]
 8005faa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f001 fddf 	bl	8007b70 <USBD_LL_Init>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e025      	b.n	8006024 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	32ae      	adds	r2, #174	@ 0xae
 8005fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00f      	beq.n	8006014 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32ae      	adds	r2, #174	@ 0xae
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	f107 020e 	add.w	r2, r7, #14
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
 800600c:	4602      	mov	r2, r0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fde7 	bl	8007c08 <USBD_LL_Start>
 800603a:	4603      	mov	r3, r0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800604c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	4611      	mov	r1, r2
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80060b8:	2303      	movs	r3, #3
 80060ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f936 	bl	800734a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d01a      	beq.n	8006138 <USBD_LL_SetupStage+0x72>
 8006102:	2b02      	cmp	r3, #2
 8006104:	d822      	bhi.n	800614c <USBD_LL_SetupStage+0x86>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <USBD_LL_SetupStage+0x4a>
 800610a:	2b01      	cmp	r3, #1
 800610c:	d00a      	beq.n	8006124 <USBD_LL_SetupStage+0x5e>
 800610e:	e01d      	b.n	800614c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb63 	bl	80067e4 <USBD_StdDevReq>
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
      break;
 8006122:	e020      	b.n	8006166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fbcb 	bl	80068c8 <USBD_StdItfReq>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
      break;
 8006136:	e016      	b.n	8006166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc2d 	bl	80069a0 <USBD_StdEPReq>
 8006146:	4603      	mov	r3, r0
 8006148:	73fb      	strb	r3, [r7, #15]
      break;
 800614a:	e00c      	b.n	8006166 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006152:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006156:	b2db      	uxtb	r3, r3
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 fdb4 	bl	8007cc8 <USBD_LL_StallEP>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	bf00      	nop
  }

  return ret;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	460b      	mov	r3, r1
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d16e      	bne.n	8006266 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800618e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006196:	2b03      	cmp	r3, #3
 8006198:	f040 8098 	bne.w	80062cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d913      	bls.n	80061d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4293      	cmp	r3, r2
 80061c0:	bf28      	it	cs
 80061c2:	4613      	movcs	r3, r2
 80061c4:	461a      	mov	r2, r3
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f001 f9b2 	bl	8007532 <USBD_CtlContinueRx>
 80061ce:	e07d      	b.n	80062cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061d6:	f003 031f 	and.w	r3, r3, #31
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d014      	beq.n	8006208 <USBD_LL_DataOutStage+0x98>
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d81d      	bhi.n	800621e <USBD_LL_DataOutStage+0xae>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <USBD_LL_DataOutStage+0x7c>
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d003      	beq.n	80061f2 <USBD_LL_DataOutStage+0x82>
 80061ea:	e018      	b.n	800621e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	75bb      	strb	r3, [r7, #22]
            break;
 80061f0:	e018      	b.n	8006224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa64 	bl	80066ca <USBD_CoreFindIF>
 8006202:	4603      	mov	r3, r0
 8006204:	75bb      	strb	r3, [r7, #22]
            break;
 8006206:	e00d      	b.n	8006224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800620e:	b2db      	uxtb	r3, r3
 8006210:	4619      	mov	r1, r3
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa66 	bl	80066e4 <USBD_CoreFindEP>
 8006218:	4603      	mov	r3, r0
 800621a:	75bb      	strb	r3, [r7, #22]
            break;
 800621c:	e002      	b.n	8006224 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	75bb      	strb	r3, [r7, #22]
            break;
 8006222:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006224:	7dbb      	ldrb	r3, [r7, #22]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d119      	bne.n	800625e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b03      	cmp	r3, #3
 8006234:	d113      	bne.n	800625e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006236:	7dba      	ldrb	r2, [r7, #22]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	32ae      	adds	r2, #174	@ 0xae
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006246:	7dba      	ldrb	r2, [r7, #22]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800624e:	7dba      	ldrb	r2, [r7, #22]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	32ae      	adds	r2, #174	@ 0xae
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 f978 	bl	8007554 <USBD_CtlSendStatus>
 8006264:	e032      	b.n	80062cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006266:	7afb      	ldrb	r3, [r7, #11]
 8006268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa37 	bl	80066e4 <USBD_CoreFindEP>
 8006276:	4603      	mov	r3, r0
 8006278:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800627a:	7dbb      	ldrb	r3, [r7, #22]
 800627c:	2bff      	cmp	r3, #255	@ 0xff
 800627e:	d025      	beq.n	80062cc <USBD_LL_DataOutStage+0x15c>
 8006280:	7dbb      	ldrb	r3, [r7, #22]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d122      	bne.n	80062cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b03      	cmp	r3, #3
 8006290:	d117      	bne.n	80062c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006292:	7dba      	ldrb	r2, [r7, #22]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	32ae      	adds	r2, #174	@ 0xae
 8006298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00f      	beq.n	80062c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80062a2:	7dba      	ldrb	r2, [r7, #22]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80062aa:	7dba      	ldrb	r2, [r7, #22]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	32ae      	adds	r2, #174	@ 0xae
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	7afa      	ldrb	r2, [r7, #11]
 80062b8:	4611      	mov	r1, r2
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	4798      	blx	r3
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	e000      	b.n	80062ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	460b      	mov	r3, r1
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062e4:	7afb      	ldrb	r3, [r7, #11]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d16f      	bne.n	80063ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3314      	adds	r3, #20
 80062ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d15a      	bne.n	80063b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	429a      	cmp	r2, r3
 8006304:	d914      	bls.n	8006330 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	461a      	mov	r2, r3
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f001 f8da 	bl	80074d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f001 fd77 	bl	8007e1c <USBD_LL_PrepareReceive>
 800632e:	e03f      	b.n	80063b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d11c      	bne.n	8006376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006344:	429a      	cmp	r2, r3
 8006346:	d316      	bcc.n	8006376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006352:	429a      	cmp	r2, r3
 8006354:	d20f      	bcs.n	8006376 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f001 f8bb 	bl	80074d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006368:	2300      	movs	r3, #0
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 fd54 	bl	8007e1c <USBD_LL_PrepareReceive>
 8006374:	e01c      	b.n	80063b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d10f      	bne.n	80063a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063a2:	2180      	movs	r1, #128	@ 0x80
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fc8f 	bl	8007cc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 f8e5 	bl	800757a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03a      	beq.n	8006430 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f7ff fe42 	bl	8006044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80063c8:	e032      	b.n	8006430 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f985 	bl	80066e4 <USBD_CoreFindEP>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	2bff      	cmp	r3, #255	@ 0xff
 80063e2:	d025      	beq.n	8006430 <USBD_LL_DataInStage+0x15a>
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d122      	bne.n	8006430 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d11c      	bne.n	8006430 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063f6:	7dfa      	ldrb	r2, [r7, #23]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	32ae      	adds	r2, #174	@ 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d014      	beq.n	8006430 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006406:	7dfa      	ldrb	r2, [r7, #23]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800640e:	7dfa      	ldrb	r2, [r7, #23]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	32ae      	adds	r2, #174	@ 0xae
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	7afa      	ldrb	r2, [r7, #11]
 800641c:	4611      	mov	r1, r2
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006426:	7dbb      	ldrb	r3, [r7, #22]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800642c:	7dbb      	ldrb	r3, [r7, #22]
 800642e:	e000      	b.n	8006432 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d014      	beq.n	80064a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6852      	ldr	r2, [r2, #4]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	4611      	mov	r1, r2
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a0:	2340      	movs	r3, #64	@ 0x40
 80064a2:	2200      	movs	r2, #0
 80064a4:	2100      	movs	r1, #0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 fbc9 	bl	8007c3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2240      	movs	r2, #64	@ 0x40
 80064b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064bc:	2340      	movs	r3, #64	@ 0x40
 80064be:	2200      	movs	r2, #0
 80064c0:	2180      	movs	r1, #128	@ 0x80
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fbbb 	bl	8007c3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2240      	movs	r2, #64	@ 0x40
 80064d2:	621a      	str	r2, [r3, #32]

  return ret;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b04      	cmp	r3, #4
 8006510:	d006      	beq.n	8006520 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2204      	movs	r2, #4
 8006524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b04      	cmp	r3, #4
 8006548:	d106      	bne.n	8006558 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006550:	b2da      	uxtb	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d110      	bne.n	800659c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	32ae      	adds	r2, #174	@ 0xae
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e01c      	b.n	8006602 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	d115      	bne.n	8006600 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	32ae      	adds	r2, #174	@ 0xae
 80065de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	32ae      	adds	r2, #174	@ 0xae
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	4611      	mov	r1, r2
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	460b      	mov	r3, r1
 8006614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	32ae      	adds	r2, #174	@ 0xae
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	e01c      	b.n	8006666 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d115      	bne.n	8006664 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32ae      	adds	r2, #174	@ 0xae
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32ae      	adds	r2, #174	@ 0xae
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	4611      	mov	r1, r2
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00e      	beq.n	80066c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6852      	ldr	r2, [r2, #4]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	4611      	mov	r1, r2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b086      	sub	sp, #24
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	b29b      	uxth	r3, r3
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	7812      	ldrb	r2, [r2, #0]
 8006720:	4293      	cmp	r3, r2
 8006722:	d91f      	bls.n	8006764 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800672a:	e013      	b.n	8006754 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800672c:	f107 030a 	add.w	r3, r7, #10
 8006730:	4619      	mov	r1, r3
 8006732:	6978      	ldr	r0, [r7, #20]
 8006734:	f000 f81b 	bl	800676e <USBD_GetNextDesc>
 8006738:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b05      	cmp	r3, #5
 8006740:	d108      	bne.n	8006754 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	789b      	ldrb	r3, [r3, #2]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	429a      	cmp	r2, r3
 800674e:	d008      	beq.n	8006762 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	885b      	ldrh	r3, [r3, #2]
 8006758:	b29a      	uxth	r2, r3
 800675a:	897b      	ldrh	r3, [r7, #10]
 800675c:	429a      	cmp	r2, r3
 800675e:	d8e5      	bhi.n	800672c <USBD_GetEpDesc+0x2e>
 8006760:	e000      	b.n	8006764 <USBD_GetEpDesc+0x66>
          break;
 8006762:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006764:	693b      	ldr	r3, [r7, #16]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	4413      	add	r3, r2
 8006786:	b29a      	uxth	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b087      	sub	sp, #28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067c4:	8a3b      	ldrh	r3, [r7, #16]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	b21a      	sxth	r2, r3
 80067ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067d4:	89fb      	ldrh	r3, [r7, #14]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d005      	beq.n	800680a <USBD_StdDevReq+0x26>
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d857      	bhi.n	80068b2 <USBD_StdDevReq+0xce>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00f      	beq.n	8006826 <USBD_StdDevReq+0x42>
 8006806:	2b20      	cmp	r3, #32
 8006808:	d153      	bne.n	80068b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	32ae      	adds	r2, #174	@ 0xae
 8006814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e04a      	b.n	80068bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	2b09      	cmp	r3, #9
 800682c:	d83b      	bhi.n	80068a6 <USBD_StdDevReq+0xc2>
 800682e:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <USBD_StdDevReq+0x50>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006889 	.word	0x08006889
 8006838:	0800689d 	.word	0x0800689d
 800683c:	080068a7 	.word	0x080068a7
 8006840:	08006893 	.word	0x08006893
 8006844:	080068a7 	.word	0x080068a7
 8006848:	08006867 	.word	0x08006867
 800684c:	0800685d 	.word	0x0800685d
 8006850:	080068a7 	.word	0x080068a7
 8006854:	0800687f 	.word	0x0800687f
 8006858:	08006871 	.word	0x08006871
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa3c 	bl	8006cdc <USBD_GetDescriptor>
          break;
 8006864:	e024      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fbcb 	bl	8007004 <USBD_SetAddress>
          break;
 800686e:	e01f      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc0a 	bl	800708c <USBD_SetConfig>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
          break;
 800687c:	e018      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fcad 	bl	80071e0 <USBD_GetConfig>
          break;
 8006886:	e013      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fcde 	bl	800724c <USBD_GetStatus>
          break;
 8006890:	e00e      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fd0d 	bl	80072b4 <USBD_SetFeature>
          break;
 800689a:	e009      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fd31 	bl	8007306 <USBD_ClrFeature>
          break;
 80068a4:	e004      	b.n	80068b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fd88 	bl	80073be <USBD_CtlError>
          break;
 80068ae:	bf00      	nop
      }
      break;
 80068b0:	e004      	b.n	80068bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fd82 	bl	80073be <USBD_CtlError>
      break;
 80068ba:	bf00      	nop
  }

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068de:	2b40      	cmp	r3, #64	@ 0x40
 80068e0:	d005      	beq.n	80068ee <USBD_StdItfReq+0x26>
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d852      	bhi.n	800698c <USBD_StdItfReq+0xc4>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <USBD_StdItfReq+0x26>
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d14e      	bne.n	800698c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d840      	bhi.n	800697e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	889b      	ldrh	r3, [r3, #4]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d836      	bhi.n	8006974 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	889b      	ldrh	r3, [r3, #4]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fedb 	bl	80066ca <USBD_CoreFindIF>
 8006914:	4603      	mov	r3, r0
 8006916:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2bff      	cmp	r3, #255	@ 0xff
 800691c:	d01d      	beq.n	800695a <USBD_StdItfReq+0x92>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11a      	bne.n	800695a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006924:	7bba      	ldrb	r2, [r7, #14]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	@ 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006934:	7bba      	ldrb	r2, [r7, #14]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800693c:	7bba      	ldrb	r2, [r7, #14]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32ae      	adds	r2, #174	@ 0xae
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006952:	e004      	b.n	800695e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006954:	2303      	movs	r3, #3
 8006956:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006958:	e001      	b.n	800695e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800695a:	2303      	movs	r3, #3
 800695c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d110      	bne.n	8006988 <USBD_StdItfReq+0xc0>
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fdf1 	bl	8007554 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006972:	e009      	b.n	8006988 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fd21 	bl	80073be <USBD_CtlError>
          break;
 800697c:	e004      	b.n	8006988 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fd1c 	bl	80073be <USBD_CtlError>
          break;
 8006986:	e000      	b.n	800698a <USBD_StdItfReq+0xc2>
          break;
 8006988:	bf00      	nop
      }
      break;
 800698a:	e004      	b.n	8006996 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd15 	bl	80073be <USBD_CtlError>
      break;
 8006994:	bf00      	nop
  }

  return ret;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	889b      	ldrh	r3, [r3, #4]
 80069b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	d007      	beq.n	80069d0 <USBD_StdEPReq+0x30>
 80069c0:	2b40      	cmp	r3, #64	@ 0x40
 80069c2:	f200 817f 	bhi.w	8006cc4 <USBD_StdEPReq+0x324>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d02a      	beq.n	8006a20 <USBD_StdEPReq+0x80>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	f040 817a 	bne.w	8006cc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff fe85 	bl	80066e4 <USBD_CoreFindEP>
 80069da:	4603      	mov	r3, r0
 80069dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069de:	7b7b      	ldrb	r3, [r7, #13]
 80069e0:	2bff      	cmp	r3, #255	@ 0xff
 80069e2:	f000 8174 	beq.w	8006cce <USBD_StdEPReq+0x32e>
 80069e6:	7b7b      	ldrb	r3, [r7, #13]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 8170 	bne.w	8006cce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069ee:	7b7a      	ldrb	r2, [r7, #13]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069f6:	7b7a      	ldrb	r2, [r7, #13]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	32ae      	adds	r2, #174	@ 0xae
 80069fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8163 	beq.w	8006cce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a08:	7b7a      	ldrb	r2, [r7, #13]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32ae      	adds	r2, #174	@ 0xae
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a1e:	e156      	b.n	8006cce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d008      	beq.n	8006a3a <USBD_StdEPReq+0x9a>
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	f300 8145 	bgt.w	8006cb8 <USBD_StdEPReq+0x318>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 809b 	beq.w	8006b6a <USBD_StdEPReq+0x1ca>
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d03c      	beq.n	8006ab2 <USBD_StdEPReq+0x112>
 8006a38:	e13e      	b.n	8006cb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d002      	beq.n	8006a4c <USBD_StdEPReq+0xac>
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d016      	beq.n	8006a78 <USBD_StdEPReq+0xd8>
 8006a4a:	e02c      	b.n	8006aa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <USBD_StdEPReq+0xce>
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b80      	cmp	r3, #128	@ 0x80
 8006a56:	d00a      	beq.n	8006a6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f933 	bl	8007cc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a62:	2180      	movs	r1, #128	@ 0x80
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f92f 	bl	8007cc8 <USBD_LL_StallEP>
 8006a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a6c:	e020      	b.n	8006ab0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fca4 	bl	80073be <USBD_CtlError>
              break;
 8006a76:	e01b      	b.n	8006ab0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	885b      	ldrh	r3, [r3, #2]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10e      	bne.n	8006a9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <USBD_StdEPReq+0xfe>
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	2b80      	cmp	r3, #128	@ 0x80
 8006a8a:	d008      	beq.n	8006a9e <USBD_StdEPReq+0xfe>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f915 	bl	8007cc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd58 	bl	8007554 <USBD_CtlSendStatus>

              break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fc88 	bl	80073be <USBD_CtlError>
              break;
 8006aae:	bf00      	nop
          }
          break;
 8006ab0:	e107      	b.n	8006cc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d002      	beq.n	8006ac4 <USBD_StdEPReq+0x124>
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d016      	beq.n	8006af0 <USBD_StdEPReq+0x150>
 8006ac2:	e04b      	b.n	8006b5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ac4:	7bbb      	ldrb	r3, [r7, #14]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <USBD_StdEPReq+0x146>
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b80      	cmp	r3, #128	@ 0x80
 8006ace:	d00a      	beq.n	8006ae6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f8f7 	bl	8007cc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ada:	2180      	movs	r1, #128	@ 0x80
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f8f3 	bl	8007cc8 <USBD_LL_StallEP>
 8006ae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ae4:	e040      	b.n	8006b68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc68 	bl	80073be <USBD_CtlError>
              break;
 8006aee:	e03b      	b.n	8006b68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	885b      	ldrh	r3, [r3, #2]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d136      	bne.n	8006b66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006af8:	7bbb      	ldrb	r3, [r7, #14]
 8006afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f8fd 	bl	8007d06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fd21 	bl	8007554 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fde4 	bl	80066e4 <USBD_CoreFindEP>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b20:	7b7b      	ldrb	r3, [r7, #13]
 8006b22:	2bff      	cmp	r3, #255	@ 0xff
 8006b24:	d01f      	beq.n	8006b66 <USBD_StdEPReq+0x1c6>
 8006b26:	7b7b      	ldrb	r3, [r7, #13]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11c      	bne.n	8006b66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006b2c:	7b7a      	ldrb	r2, [r7, #13]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006b34:	7b7a      	ldrb	r2, [r7, #13]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	32ae      	adds	r2, #174	@ 0xae
 8006b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d010      	beq.n	8006b66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b44:	7b7a      	ldrb	r2, [r7, #13]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	32ae      	adds	r2, #174	@ 0xae
 8006b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b5a:	e004      	b.n	8006b66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fc2d 	bl	80073be <USBD_CtlError>
              break;
 8006b64:	e000      	b.n	8006b68 <USBD_StdEPReq+0x1c8>
              break;
 8006b66:	bf00      	nop
          }
          break;
 8006b68:	e0ab      	b.n	8006cc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d002      	beq.n	8006b7c <USBD_StdEPReq+0x1dc>
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d032      	beq.n	8006be0 <USBD_StdEPReq+0x240>
 8006b7a:	e097      	b.n	8006cac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <USBD_StdEPReq+0x1f2>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	@ 0x80
 8006b86:	d004      	beq.n	8006b92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc17 	bl	80073be <USBD_CtlError>
                break;
 8006b90:	e091      	b.n	8006cb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	da0b      	bge.n	8006bb2 <USBD_StdEPReq+0x212>
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	3310      	adds	r3, #16
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4413      	add	r3, r2
 8006bae:	3304      	adds	r3, #4
 8006bb0:	e00b      	b.n	8006bca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3304      	adds	r3, #4
 8006bca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fc61 	bl	80074a0 <USBD_CtlSendData>
              break;
 8006bde:	e06a      	b.n	8006cb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	da11      	bge.n	8006c0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3324      	adds	r3, #36	@ 0x24
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d117      	bne.n	8006c32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fbda 	bl	80073be <USBD_CtlError>
                  break;
 8006c0a:	e054      	b.n	8006cb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fbc7 	bl	80073be <USBD_CtlError>
                  break;
 8006c30:	e041      	b.n	8006cb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	da0b      	bge.n	8006c52 <USBD_StdEPReq+0x2b2>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c40:	4613      	mov	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	3310      	adds	r3, #16
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3304      	adds	r3, #4
 8006c50:	e00b      	b.n	8006c6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	3304      	adds	r3, #4
 8006c6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <USBD_StdEPReq+0x2d8>
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b80      	cmp	r3, #128	@ 0x80
 8006c76:	d103      	bne.n	8006c80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e00e      	b.n	8006c9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f85d 	bl	8007d44 <USBD_LL_IsStallEP>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e002      	b.n	8006c9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fbfb 	bl	80074a0 <USBD_CtlSendData>
              break;
 8006caa:	e004      	b.n	8006cb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb85 	bl	80073be <USBD_CtlError>
              break;
 8006cb4:	bf00      	nop
          }
          break;
 8006cb6:	e004      	b.n	8006cc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fb7f 	bl	80073be <USBD_CtlError>
          break;
 8006cc0:	bf00      	nop
      }
      break;
 8006cc2:	e005      	b.n	8006cd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fb79 	bl	80073be <USBD_CtlError>
      break;
 8006ccc:	e000      	b.n	8006cd0 <USBD_StdEPReq+0x330>
      break;
 8006cce:	bf00      	nop
  }

  return ret;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	885b      	ldrh	r3, [r3, #2]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	2b0e      	cmp	r3, #14
 8006cfe:	f200 8152 	bhi.w	8006fa6 <USBD_GetDescriptor+0x2ca>
 8006d02:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <USBD_GetDescriptor+0x2c>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d79 	.word	0x08006d79
 8006d0c:	08006d91 	.word	0x08006d91
 8006d10:	08006dd1 	.word	0x08006dd1
 8006d14:	08006fa7 	.word	0x08006fa7
 8006d18:	08006fa7 	.word	0x08006fa7
 8006d1c:	08006f47 	.word	0x08006f47
 8006d20:	08006f73 	.word	0x08006f73
 8006d24:	08006fa7 	.word	0x08006fa7
 8006d28:	08006fa7 	.word	0x08006fa7
 8006d2c:	08006fa7 	.word	0x08006fa7
 8006d30:	08006fa7 	.word	0x08006fa7
 8006d34:	08006fa7 	.word	0x08006fa7
 8006d38:	08006fa7 	.word	0x08006fa7
 8006d3c:	08006fa7 	.word	0x08006fa7
 8006d40:	08006d45 	.word	0x08006d45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	7c12      	ldrb	r2, [r2, #16]
 8006d5c:	f107 0108 	add.w	r1, r7, #8
 8006d60:	4610      	mov	r0, r2
 8006d62:	4798      	blx	r3
 8006d64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d66:	e126      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fb27 	bl	80073be <USBD_CtlError>
        err++;
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	3301      	adds	r3, #1
 8006d74:	72fb      	strb	r3, [r7, #11]
      break;
 8006d76:	e11e      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	7c12      	ldrb	r2, [r2, #16]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
      break;
 8006d8e:	e112      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	f107 0208 	add.w	r2, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3301      	adds	r3, #1
 8006dae:	2202      	movs	r2, #2
 8006db0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006db2:	e100      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f107 0208 	add.w	r2, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	2202      	movs	r2, #2
 8006dcc:	701a      	strb	r2, [r3, #0]
      break;
 8006dce:	e0f2      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	885b      	ldrh	r3, [r3, #2]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	f200 80ac 	bhi.w	8006f34 <USBD_GetDescriptor+0x258>
 8006ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8006de4 <USBD_GetDescriptor+0x108>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006e31 	.word	0x08006e31
 8006dec:	08006e65 	.word	0x08006e65
 8006df0:	08006e99 	.word	0x08006e99
 8006df4:	08006ecd 	.word	0x08006ecd
 8006df8:	08006f01 	.word	0x08006f01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1e:	e091      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 facb 	bl	80073be <USBD_CtlError>
            err++;
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2e:	e089      	b.n	8006f44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7c12      	ldrb	r2, [r2, #16]
 8006e48:	f107 0108 	add.w	r1, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e52:	e077      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fab1 	bl	80073be <USBD_CtlError>
            err++;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	72fb      	strb	r3, [r7, #11]
          break;
 8006e62:	e06f      	b.n	8006f44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	f107 0108 	add.w	r1, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e86:	e05d      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa97 	bl	80073be <USBD_CtlError>
            err++;
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	3301      	adds	r3, #1
 8006e94:	72fb      	strb	r3, [r7, #11]
          break;
 8006e96:	e055      	b.n	8006f44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eba:	e043      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa7d 	bl	80073be <USBD_CtlError>
            err++;
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eca:	e03b      	b.n	8006f44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	7c12      	ldrb	r2, [r2, #16]
 8006ee4:	f107 0108 	add.w	r1, r7, #8
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
 8006eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eee:	e029      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa63 	bl	80073be <USBD_CtlError>
            err++;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	3301      	adds	r3, #1
 8006efc:	72fb      	strb	r3, [r7, #11]
          break;
 8006efe:	e021      	b.n	8006f44 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7c12      	ldrb	r2, [r2, #16]
 8006f18:	f107 0108 	add.w	r1, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f22:	e00f      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa49 	bl	80073be <USBD_CtlError>
            err++;
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	72fb      	strb	r3, [r7, #11]
          break;
 8006f32:	e007      	b.n	8006f44 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa41 	bl	80073be <USBD_CtlError>
          err++;
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f42:	bf00      	nop
      }
      break;
 8006f44:	e037      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7c1b      	ldrb	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f56:	f107 0208 	add.w	r2, r7, #8
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4798      	blx	r3
 8006f5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f60:	e029      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa2a 	bl	80073be <USBD_CtlError>
        err++;
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006f70:	e021      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7c1b      	ldrb	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f82:	f107 0208 	add.w	r2, r7, #8
 8006f86:	4610      	mov	r0, r2
 8006f88:	4798      	blx	r3
 8006f8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	2207      	movs	r2, #7
 8006f92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f94:	e00f      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fa10 	bl	80073be <USBD_CtlError>
        err++;
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa4:	e007      	b.n	8006fb6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa08 	bl	80073be <USBD_CtlError>
      err++;
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb4:	bf00      	nop
  }

  if (err != 0U)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d11e      	bne.n	8006ffa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006fc4:	893b      	ldrh	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00e      	beq.n	8006fe8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	88da      	ldrh	r2, [r3, #6]
 8006fce:	893b      	ldrh	r3, [r7, #8]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bf28      	it	cs
 8006fd4:	4613      	movcs	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fda:	893b      	ldrh	r3, [r7, #8]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa5d 	bl	80074a0 <USBD_CtlSendData>
 8006fe6:	e009      	b.n	8006ffc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9e7 	bl	80073be <USBD_CtlError>
 8006ff0:	e004      	b.n	8006ffc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 faae 	bl	8007554 <USBD_CtlSendStatus>
 8006ff8:	e000      	b.n	8006ffc <USBD_GetDescriptor+0x320>
    return;
 8006ffa:	bf00      	nop
  }
}
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop

08007004 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	889b      	ldrh	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d131      	bne.n	800707a <USBD_SetAddress+0x76>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d12d      	bne.n	800707a <USBD_SetAddress+0x76>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	885b      	ldrh	r3, [r3, #2]
 8007022:	2b7f      	cmp	r3, #127	@ 0x7f
 8007024:	d829      	bhi.n	800707a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007030:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d104      	bne.n	8007048 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f9bc 	bl	80073be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	e01d      	b.n	8007084 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7bfa      	ldrb	r2, [r7, #15]
 800704c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fea1 	bl	8007d9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa7a 	bl	8007554 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706e:	e009      	b.n	8007084 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007078:	e004      	b.n	8007084 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f99e 	bl	80073be <USBD_CtlError>
  }
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	885b      	ldrh	r3, [r3, #2]
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	4b4e      	ldr	r3, [pc, #312]	@ (80071dc <USBD_SetConfig+0x150>)
 80070a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070a4:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <USBD_SetConfig+0x150>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d905      	bls.n	80070b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f985 	bl	80073be <USBD_CtlError>
    return USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e08c      	b.n	80071d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d002      	beq.n	80070ca <USBD_SetConfig+0x3e>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d029      	beq.n	800711c <USBD_SetConfig+0x90>
 80070c8:	e075      	b.n	80071b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070ca:	4b44      	ldr	r3, [pc, #272]	@ (80071dc <USBD_SetConfig+0x150>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d020      	beq.n	8007114 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80070d2:	4b42      	ldr	r3, [pc, #264]	@ (80071dc <USBD_SetConfig+0x150>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070dc:	4b3f      	ldr	r3, [pc, #252]	@ (80071dc <USBD_SetConfig+0x150>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fe ffb9 	bl	800605a <USBD_SetClassConfig>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f962 	bl	80073be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007102:	e065      	b.n	80071d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa25 	bl	8007554 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007112:	e05d      	b.n	80071d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa1d 	bl	8007554 <USBD_CtlSendStatus>
      break;
 800711a:	e059      	b.n	80071d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800711c:	4b2f      	ldr	r3, [pc, #188]	@ (80071dc <USBD_SetConfig+0x150>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d112      	bne.n	800714a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800712c:	4b2b      	ldr	r3, [pc, #172]	@ (80071dc <USBD_SetConfig+0x150>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007136:	4b29      	ldr	r3, [pc, #164]	@ (80071dc <USBD_SetConfig+0x150>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fe ffa8 	bl	8006092 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa06 	bl	8007554 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007148:	e042      	b.n	80071d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <USBD_SetConfig+0x150>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d02a      	beq.n	80071ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7fe ff96 	bl	8006092 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007166:	4b1d      	ldr	r3, [pc, #116]	@ (80071dc <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007170:	4b1a      	ldr	r3, [pc, #104]	@ (80071dc <USBD_SetConfig+0x150>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe ff6f 	bl	800605a <USBD_SetClassConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f918 	bl	80073be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fe ff7b 	bl	8006092 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071a4:	e014      	b.n	80071d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9d4 	bl	8007554 <USBD_CtlSendStatus>
      break;
 80071ac:	e010      	b.n	80071d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9d0 	bl	8007554 <USBD_CtlSendStatus>
      break;
 80071b4:	e00c      	b.n	80071d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f900 	bl	80073be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071be:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <USBD_SetConfig+0x150>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fe ff64 	bl	8006092 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	73fb      	strb	r3, [r7, #15]
      break;
 80071ce:	bf00      	nop
  }

  return ret;
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	200001f8 	.word	0x200001f8

080071e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	88db      	ldrh	r3, [r3, #6]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d004      	beq.n	80071fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f8e2 	bl	80073be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071fa:	e023      	b.n	8007244 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	dc02      	bgt.n	800720e <USBD_GetConfig+0x2e>
 8007208:	2b00      	cmp	r3, #0
 800720a:	dc03      	bgt.n	8007214 <USBD_GetConfig+0x34>
 800720c:	e015      	b.n	800723a <USBD_GetConfig+0x5a>
 800720e:	2b03      	cmp	r3, #3
 8007210:	d00b      	beq.n	800722a <USBD_GetConfig+0x4a>
 8007212:	e012      	b.n	800723a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3308      	adds	r3, #8
 800721e:	2201      	movs	r2, #1
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f93c 	bl	80074a0 <USBD_CtlSendData>
        break;
 8007228:	e00c      	b.n	8007244 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3304      	adds	r3, #4
 800722e:	2201      	movs	r2, #1
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f934 	bl	80074a0 <USBD_CtlSendData>
        break;
 8007238:	e004      	b.n	8007244 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f8be 	bl	80073be <USBD_CtlError>
        break;
 8007242:	bf00      	nop
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	2b02      	cmp	r3, #2
 8007262:	d81e      	bhi.n	80072a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	88db      	ldrh	r3, [r3, #6]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d004      	beq.n	8007276 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8a5 	bl	80073be <USBD_CtlError>
        break;
 8007274:	e01a      	b.n	80072ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007282:	2b00      	cmp	r3, #0
 8007284:	d005      	beq.n	8007292 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f043 0202 	orr.w	r2, r3, #2
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	330c      	adds	r3, #12
 8007296:	2202      	movs	r2, #2
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f900 	bl	80074a0 <USBD_CtlSendData>
      break;
 80072a0:	e004      	b.n	80072ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f88a 	bl	80073be <USBD_CtlError>
      break;
 80072aa:	bf00      	nop
  }
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d107      	bne.n	80072d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f940 	bl	8007554 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80072d4:	e013      	b.n	80072fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d10b      	bne.n	80072f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	889b      	ldrh	r3, [r3, #4]
 80072e2:	0a1b      	lsrs	r3, r3, #8
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f930 	bl	8007554 <USBD_CtlSendStatus>
}
 80072f4:	e003      	b.n	80072fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f860 	bl	80073be <USBD_CtlError>
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	2b02      	cmp	r3, #2
 800731c:	d80b      	bhi.n	8007336 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d10c      	bne.n	8007340 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f910 	bl	8007554 <USBD_CtlSendStatus>
      }
      break;
 8007334:	e004      	b.n	8007340 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f840 	bl	80073be <USBD_CtlError>
      break;
 800733e:	e000      	b.n	8007342 <USBD_ClrFeature+0x3c>
      break;
 8007340:	bf00      	nop
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fa16 	bl	80067a6 <SWAPBYTE>
 800737a:	4603      	mov	r3, r0
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3301      	adds	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fa09 	bl	80067a6 <SWAPBYTE>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3301      	adds	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff f9fc 	bl	80067a6 <SWAPBYTE>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	80da      	strh	r2, [r3, #6]
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c8:	2180      	movs	r1, #128	@ 0x80
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fc7c 	bl	8007cc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073d0:	2100      	movs	r1, #0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fc78 	bl	8007cc8 <USBD_LL_StallEP>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d036      	beq.n	8007464 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073fa:	6938      	ldr	r0, [r7, #16]
 80073fc:	f000 f836 	bl	800746c <USBD_GetLen>
 8007400:	4603      	mov	r3, r0
 8007402:	3301      	adds	r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	701a      	strb	r2, [r3, #0]
  idx++;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	3301      	adds	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4413      	add	r3, r2
 8007426:	2203      	movs	r2, #3
 8007428:	701a      	strb	r2, [r3, #0]
  idx++;
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	3301      	adds	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007430:	e013      	b.n	800745a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007432:	7dfb      	ldrb	r3, [r7, #23]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	4413      	add	r3, r2
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	3301      	adds	r3, #1
 8007442:	613b      	str	r3, [r7, #16]
    idx++;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	3301      	adds	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	4413      	add	r3, r2
 8007450:	2200      	movs	r2, #0
 8007452:	701a      	strb	r2, [r3, #0]
    idx++;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	3301      	adds	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e7      	bne.n	8007432 <USBD_GetString+0x52>
 8007462:	e000      	b.n	8007466 <USBD_GetString+0x86>
    return;
 8007464:	bf00      	nop
  }
}
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800747c:	e005      	b.n	800748a <USBD_GetLen+0x1e>
  {
    len++;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	3301      	adds	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	3301      	adds	r3, #1
 8007488:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f5      	bne.n	800747e <USBD_GetLen+0x12>
  }

  return len;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	2100      	movs	r1, #0
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fc87 	bl	8007dda <USBD_LL_Transmit>

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	2100      	movs	r1, #0
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fc76 	bl	8007dda <USBD_LL_Transmit>

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2203      	movs	r2, #3
 8007508:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	2100      	movs	r1, #0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fc7a 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	2100      	movs	r1, #0
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc69 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2204      	movs	r2, #4
 8007560:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007564:	2300      	movs	r3, #0
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc35 	bl	8007dda <USBD_LL_Transmit>

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2205      	movs	r2, #5
 8007586:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fc43 	bl	8007e1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <send_viewport_report>:
	r.report_ID = REPORTID_MOUSE;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&r, sizeof (MouseReport));
}

void send_viewport_report(ViewportReport r)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	r.report_ID = REPORTID_VIEWPORT;
 80075a8:	2302      	movs	r3, #2
 80075aa:	713b      	strb	r3, [r7, #4]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&r, sizeof (MouseReport));
 80075ac:	1d3b      	adds	r3, r7, #4
 80075ae:	2204      	movs	r2, #4
 80075b0:	4619      	mov	r1, r3
 80075b2:	4803      	ldr	r0, [pc, #12]	@ (80075c0 <send_viewport_report+0x20>)
 80075b4:	f7fe fb4c 	bl	8005c50 <USBD_CUSTOM_HID_SendReport>
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	200001fc 	.word	0x200001fc

080075c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075c8:	2200      	movs	r2, #0
 80075ca:	4912      	ldr	r1, [pc, #72]	@ (8007614 <MX_USB_DEVICE_Init+0x50>)
 80075cc:	4812      	ldr	r0, [pc, #72]	@ (8007618 <MX_USB_DEVICE_Init+0x54>)
 80075ce:	f7fe fcc7 	bl	8005f60 <USBD_Init>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075d8:	f7f9 f930 	bl	800083c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80075dc:	490f      	ldr	r1, [pc, #60]	@ (800761c <MX_USB_DEVICE_Init+0x58>)
 80075de:	480e      	ldr	r0, [pc, #56]	@ (8007618 <MX_USB_DEVICE_Init+0x54>)
 80075e0:	f7fe fcee 	bl	8005fc0 <USBD_RegisterClass>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075ea:	f7f9 f927 	bl	800083c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80075ee:	490c      	ldr	r1, [pc, #48]	@ (8007620 <MX_USB_DEVICE_Init+0x5c>)
 80075f0:	4809      	ldr	r0, [pc, #36]	@ (8007618 <MX_USB_DEVICE_Init+0x54>)
 80075f2:	f7fe fc9b 	bl	8005f2c <USBD_CUSTOM_HID_RegisterInterface>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075fc:	f7f9 f91e 	bl	800083c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007600:	4805      	ldr	r0, [pc, #20]	@ (8007618 <MX_USB_DEVICE_Init+0x54>)
 8007602:	f7fe fd13 	bl	800602c <USBD_Start>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800760c:	f7f9 f916 	bl	800083c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007610:	bf00      	nop
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200000e4 	.word	0x200000e4
 8007618:	200001fc 	.word	0x200001fc
 800761c:	2000000c 	.word	0x2000000c
 8007620:	200000d4 	.word	0x200000d4

08007624 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007638:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800763a:	4618      	mov	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	460a      	mov	r2, r1
 800764e:	71fb      	strb	r3, [r7, #7]
 8007650:	4613      	mov	r3, r2
 8007652:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007654:	4806      	ldr	r0, [pc, #24]	@ (8007670 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007656:	f7fe fc07 	bl	8005e68 <USBD_CUSTOM_HID_ReceivePacket>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8007660:	f04f 33ff 	mov.w	r3, #4294967295
 8007664:	e000      	b.n	8007668 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8007666:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200001fc 	.word	0x200001fc

08007674 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2212      	movs	r2, #18
 8007684:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007686:	4b03      	ldr	r3, [pc, #12]	@ (8007694 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000104 	.word	0x20000104

08007698 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2204      	movs	r2, #4
 80076a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076aa:	4b03      	ldr	r3, [pc, #12]	@ (80076b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	20000124 	.word	0x20000124

080076bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4907      	ldr	r1, [pc, #28]	@ (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076d2:	4808      	ldr	r0, [pc, #32]	@ (80076f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076d4:	f7ff fe84 	bl	80073e0 <USBD_GetString>
 80076d8:	e004      	b.n	80076e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4904      	ldr	r1, [pc, #16]	@ (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076de:	4805      	ldr	r0, [pc, #20]	@ (80076f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076e0:	f7ff fe7e 	bl	80073e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e4:	4b02      	ldr	r3, [pc, #8]	@ (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200004d8 	.word	0x200004d8
 80076f4:	08007ff4 	.word	0x08007ff4

080076f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	4904      	ldr	r1, [pc, #16]	@ (8007718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007708:	4804      	ldr	r0, [pc, #16]	@ (800771c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800770a:	f7ff fe69 	bl	80073e0 <USBD_GetString>
  return USBD_StrDesc;
 800770e:	4b02      	ldr	r3, [pc, #8]	@ (8007718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	200004d8 	.word	0x200004d8
 800771c:	08008000 	.word	0x08008000

08007720 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	221a      	movs	r2, #26
 8007730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007732:	f000 f855 	bl	80077e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007736:	4b02      	ldr	r3, [pc, #8]	@ (8007740 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000128 	.word	0x20000128

08007744 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007750:	79fb      	ldrb	r3, [r7, #7]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4907      	ldr	r1, [pc, #28]	@ (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
 800775a:	4808      	ldr	r0, [pc, #32]	@ (800777c <USBD_FS_ConfigStrDescriptor+0x38>)
 800775c:	f7ff fe40 	bl	80073e0 <USBD_GetString>
 8007760:	e004      	b.n	800776c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	4904      	ldr	r1, [pc, #16]	@ (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007766:	4805      	ldr	r0, [pc, #20]	@ (800777c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007768:	f7ff fe3a 	bl	80073e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800776c:	4b02      	ldr	r3, [pc, #8]	@ (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	200004d8 	.word	0x200004d8
 800777c:	08008010 	.word	0x08008010

08007780 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d105      	bne.n	800779e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4907      	ldr	r1, [pc, #28]	@ (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007796:	4808      	ldr	r0, [pc, #32]	@ (80077b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007798:	f7ff fe22 	bl	80073e0 <USBD_GetString>
 800779c:	e004      	b.n	80077a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4904      	ldr	r1, [pc, #16]	@ (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077a2:	4805      	ldr	r0, [pc, #20]	@ (80077b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077a4:	f7ff fe1c 	bl	80073e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077a8:	4b02      	ldr	r3, [pc, #8]	@ (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	200004d8 	.word	0x200004d8
 80077b8:	08008024 	.word	0x08008024

080077bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	220c      	movs	r2, #12
 80077cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80077ce:	4b03      	ldr	r3, [pc, #12]	@ (80077dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	20000118 	.word	0x20000118

080077e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <Get_SerialNum+0x44>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <Get_SerialNum+0x48>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077f2:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <Get_SerialNum+0x4c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007806:	2208      	movs	r2, #8
 8007808:	4909      	ldr	r1, [pc, #36]	@ (8007830 <Get_SerialNum+0x50>)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f814 	bl	8007838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007810:	2204      	movs	r2, #4
 8007812:	4908      	ldr	r1, [pc, #32]	@ (8007834 <Get_SerialNum+0x54>)
 8007814:	68b8      	ldr	r0, [r7, #8]
 8007816:	f000 f80f 	bl	8007838 <IntToUnicode>
  }
}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	1fff7a10 	.word	0x1fff7a10
 8007828:	1fff7a14 	.word	0x1fff7a14
 800782c:	1fff7a18 	.word	0x1fff7a18
 8007830:	2000012a 	.word	0x2000012a
 8007834:	2000013a 	.word	0x2000013a

08007838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4613      	mov	r3, r2
 8007844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
 800784e:	e027      	b.n	80078a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	0f1b      	lsrs	r3, r3, #28
 8007854:	2b09      	cmp	r3, #9
 8007856:	d80b      	bhi.n	8007870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0f1b      	lsrs	r3, r3, #28
 800785c:	b2da      	uxtb	r2, r3
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4619      	mov	r1, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	440b      	add	r3, r1
 8007868:	3230      	adds	r2, #48	@ 0x30
 800786a:	b2d2      	uxtb	r2, r2
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e00a      	b.n	8007886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	0f1b      	lsrs	r3, r3, #28
 8007874:	b2da      	uxtb	r2, r3
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	4619      	mov	r1, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	440b      	add	r3, r1
 8007880:	3237      	adds	r2, #55	@ 0x37
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	005b      	lsls	r3, r3, #1
 8007890:	3301      	adds	r3, #1
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	4413      	add	r3, r2
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	3301      	adds	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]
 80078a0:	7dfa      	ldrb	r2, [r7, #23]
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d3d3      	bcc.n	8007850 <IntToUnicode+0x18>
  }
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b0a0      	sub	sp, #128	@ 0x80
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80078d0:	f107 0310 	add.w	r3, r7, #16
 80078d4:	225c      	movs	r2, #92	@ 0x5c
 80078d6:	2100      	movs	r1, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fb53 	bl	8007f84 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078e6:	d149      	bne.n	800797c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80078e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80078ee:	2300      	movs	r3, #0
 80078f0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fb fa10 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007902:	f7f8 ff9b 	bl	800083c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	4b1e      	ldr	r3, [pc, #120]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	4a1d      	ldr	r2, [pc, #116]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 8007910:	f043 0301 	orr.w	r3, r3, #1
 8007914:	6313      	str	r3, [r2, #48]	@ 0x30
 8007916:	4b1b      	ldr	r3, [pc, #108]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007922:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007926:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007928:	2302      	movs	r3, #2
 800792a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007930:	2303      	movs	r3, #3
 8007932:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007934:	230a      	movs	r3, #10
 8007936:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007938:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800793c:	4619      	mov	r1, r3
 800793e:	4812      	ldr	r0, [pc, #72]	@ (8007988 <HAL_PCD_MspInit+0xd0>)
 8007940:	f7f9 fcb0 	bl	80012a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007944:	4b0f      	ldr	r3, [pc, #60]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 8007946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007948:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 800794a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007950:	2300      	movs	r3, #0
 8007952:	60bb      	str	r3, [r7, #8]
 8007954:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 8007956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007958:	4a0a      	ldr	r2, [pc, #40]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 800795a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800795e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007960:	4b08      	ldr	r3, [pc, #32]	@ (8007984 <HAL_PCD_MspInit+0xcc>)
 8007962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	2043      	movs	r0, #67	@ 0x43
 8007972:	f7f9 fc60 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007976:	2043      	movs	r0, #67	@ 0x43
 8007978:	f7f9 fc79 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800797c:	bf00      	nop
 800797e:	3780      	adds	r7, #128	@ 0x80
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40023800 	.word	0x40023800
 8007988:	40020000 	.word	0x40020000

0800798c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fb8f 	bl	80060c6 <USBD_LL_SetupStage>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	4619      	mov	r1, r3
 80079da:	f7fe fbc9 	bl	8006170 <USBD_LL_DataOutStage>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4613      	mov	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	3320      	adds	r3, #32
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7fe fc62 	bl	80062d6 <USBD_LL_DataInStage>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fd9c 	bl	8006566 <USBD_LL_SOF>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	79db      	ldrb	r3, [r3, #7]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
 8007a4e:	e008      	b.n	8007a62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	79db      	ldrb	r3, [r3, #7]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d102      	bne.n	8007a5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e001      	b.n	8007a62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a5e:	f7f8 feed 	bl	800083c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fd36 	bl	80064de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fcde 	bl	800643a <USBD_LL_Reset>
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fd31 	bl	80064fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7adb      	ldrb	r3, [r3, #11]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007abc:	4b04      	ldr	r3, [pc, #16]	@ (8007ad0 <HAL_PCD_SuspendCallback+0x48>)
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	4a03      	ldr	r2, [pc, #12]	@ (8007ad0 <HAL_PCD_SuspendCallback+0x48>)
 8007ac2:	f043 0306 	orr.w	r3, r3, #6
 8007ac6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fd27 	bl	8006536 <USBD_LL_Resume>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	4611      	mov	r1, r2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fd7f 	bl	800660a <USBD_LL_IsoOUTIncomplete>
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fd3b 	bl	80065a6 <USBD_LL_IsoINIncomplete>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fd91 	bl	800666e <USBD_LL_DevConnected>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fd8e 	bl	8006684 <USBD_LL_DevDisconnected>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d13c      	bne.n	8007bfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b80:	4a20      	ldr	r2, [pc, #128]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007b8c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b90:	4b1c      	ldr	r3, [pc, #112]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007b92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007b96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007b98:	4b1a      	ldr	r3, [pc, #104]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007b9a:	2206      	movs	r2, #6
 8007b9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b9e:	4b19      	ldr	r3, [pc, #100]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ba4:	4b17      	ldr	r3, [pc, #92]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007baa:	4b16      	ldr	r3, [pc, #88]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bac:	2202      	movs	r2, #2
 8007bae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bb0:	4b14      	ldr	r3, [pc, #80]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bb6:	4b13      	ldr	r3, [pc, #76]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bbc:	4b11      	ldr	r3, [pc, #68]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bc2:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bce:	480d      	ldr	r0, [pc, #52]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bd0:	f7f9 fd2d 	bl	800162e <HAL_PCD_Init>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bda:	f7f8 fe2f 	bl	800083c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bde:	2180      	movs	r1, #128	@ 0x80
 8007be0:	4808      	ldr	r0, [pc, #32]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007be2:	f7fa ff74 	bl	8002ace <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007be6:	2240      	movs	r2, #64	@ 0x40
 8007be8:	2100      	movs	r1, #0
 8007bea:	4806      	ldr	r0, [pc, #24]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bec:	f7fa ff28 	bl	8002a40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bf0:	2280      	movs	r2, #128	@ 0x80
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	4803      	ldr	r0, [pc, #12]	@ (8007c04 <USBD_LL_Init+0x94>)
 8007bf6:	f7fa ff23 	bl	8002a40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	200006d8 	.word	0x200006d8

08007c08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f9 fe1b 	bl	800185a <HAL_PCD_Start>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f97e 	bl	8007f2c <USBD_Get_USB_Status>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	4608      	mov	r0, r1
 8007c48:	4611      	mov	r1, r2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	70fb      	strb	r3, [r7, #3]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70bb      	strb	r3, [r7, #2]
 8007c54:	4613      	mov	r3, r2
 8007c56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c66:	78bb      	ldrb	r3, [r7, #2]
 8007c68:	883a      	ldrh	r2, [r7, #0]
 8007c6a:	78f9      	ldrb	r1, [r7, #3]
 8007c6c:	f7fa fb1c 	bl	80022a8 <HAL_PCD_EP_Open>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f958 	bl	8007f2c <USBD_Get_USB_Status>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fa fb65 	bl	8002378 <HAL_PCD_EP_Close>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f939 	bl	8007f2c <USBD_Get_USB_Status>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa fc05 	bl	80024f6 <HAL_PCD_EP_SetStall>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f91a 	bl	8007f2c <USBD_Get_USB_Status>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fa fc49 	bl	80025bc <HAL_PCD_EP_ClrStall>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f8fb 	bl	8007f2c <USBD_Get_USB_Status>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da0b      	bge.n	8007d78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d66:	68f9      	ldr	r1, [r7, #12]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3316      	adds	r3, #22
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	e00b      	b.n	8007d90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007d8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fa fa50 	bl	8002260 <HAL_PCD_SetAddress>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f8b0 	bl	8007f2c <USBD_Get_USB_Status>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	460b      	mov	r3, r1
 8007de8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007df8:	7af9      	ldrb	r1, [r7, #11]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	f7fa fb40 	bl	8002482 <HAL_PCD_EP_Transmit>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 f88f 	bl	8007f2c <USBD_Get_USB_Status>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e3a:	7af9      	ldrb	r1, [r7, #11]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	f7fa fae4 	bl	800240c <HAL_PCD_EP_Receive>
 8007e44:	4603      	mov	r3, r0
 8007e46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f86e 	bl	8007f2c <USBD_Get_USB_Status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e54:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_PCDEx_LPM_Callback+0x18>
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d01f      	beq.n	8007eb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e76:	e03b      	b.n	8007ef0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7adb      	ldrb	r3, [r3, #11]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007e80:	f7f8 fb74 	bl	800056c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e84:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e8a:	f023 0306 	bic.w	r3, r3, #6
 8007e8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fb41 	bl	8006536 <USBD_LL_Resume>
    break;
 8007eb4:	e01c      	b.n	8007ef0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fb12 	bl	80064fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	7adb      	ldrb	r3, [r3, #11]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ee2:	4b05      	ldr	r3, [pc, #20]	@ (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	4a04      	ldr	r2, [pc, #16]	@ (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ee8:	f043 0306 	orr.w	r3, r3, #6
 8007eec:	6113      	str	r3, [r2, #16]
    break;
 8007eee:	bf00      	nop
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed00 	.word	0xe000ed00

08007efc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <USBD_static_malloc+0x18>)
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000bbc 	.word	0x20000bbc

08007f18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d817      	bhi.n	8007f70 <USBD_Get_USB_Status+0x44>
 8007f40:	a201      	add	r2, pc, #4	@ (adr r2, 8007f48 <USBD_Get_USB_Status+0x1c>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f5f 	.word	0x08007f5f
 8007f50:	08007f65 	.word	0x08007f65
 8007f54:	08007f6b 	.word	0x08007f6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f5c:	e00b      	b.n	8007f76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	73fb      	strb	r3, [r7, #15]
    break;
 8007f62:	e008      	b.n	8007f76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f64:	2301      	movs	r3, #1
 8007f66:	73fb      	strb	r3, [r7, #15]
    break;
 8007f68:	e005      	b.n	8007f76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6e:	e002      	b.n	8007f76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	73fb      	strb	r3, [r7, #15]
    break;
 8007f74:	bf00      	nop
  }
  return usb_status;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <memset>:
 8007f84:	4402      	add	r2, r0
 8007f86:	4603      	mov	r3, r0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <__libc_init_array>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	4d0d      	ldr	r5, [pc, #52]	@ (8007fcc <__libc_init_array+0x38>)
 8007f98:	4c0d      	ldr	r4, [pc, #52]	@ (8007fd0 <__libc_init_array+0x3c>)
 8007f9a:	1b64      	subs	r4, r4, r5
 8007f9c:	10a4      	asrs	r4, r4, #2
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	42a6      	cmp	r6, r4
 8007fa2:	d109      	bne.n	8007fb8 <__libc_init_array+0x24>
 8007fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8007fd4 <__libc_init_array+0x40>)
 8007fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8007fd8 <__libc_init_array+0x44>)
 8007fa8:	f000 f818 	bl	8007fdc <_init>
 8007fac:	1b64      	subs	r4, r4, r5
 8007fae:	10a4      	asrs	r4, r4, #2
 8007fb0:	2600      	movs	r6, #0
 8007fb2:	42a6      	cmp	r6, r4
 8007fb4:	d105      	bne.n	8007fc2 <__libc_init_array+0x2e>
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbc:	4798      	blx	r3
 8007fbe:	3601      	adds	r6, #1
 8007fc0:	e7ee      	b.n	8007fa0 <__libc_init_array+0xc>
 8007fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc6:	4798      	blx	r3
 8007fc8:	3601      	adds	r6, #1
 8007fca:	e7f2      	b.n	8007fb2 <__libc_init_array+0x1e>
 8007fcc:	08008054 	.word	0x08008054
 8007fd0:	08008054 	.word	0x08008054
 8007fd4:	08008054 	.word	0x08008054
 8007fd8:	08008058 	.word	0x08008058

08007fdc <_init>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr

08007fe8 <_fini>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr
