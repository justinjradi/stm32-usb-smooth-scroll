
evc-mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a88  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cac  08008cac  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000008  08008cac  08008cac  00009cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb4  08008cb4  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb4  08008cb4  00009cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cb8  08008cb8  00009cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008cbc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  2000017c  08008e38  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  08008e38  0000ac80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153bd  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003843  00000000  00000000  0001f569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00022db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e71  00000000  00000000  000240a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cf0  00000000  00000000  00024f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c29  00000000  00000000  0004ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df304  00000000  00000000  0006382a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f00  00000000  00000000  00142b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00147a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000017c 	.word	0x2000017c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008c34 	.word	0x08008c34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000180 	.word	0x20000180
 8000200:	08008c34 	.word	0x08008c34

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb73 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f85b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f977 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f955 	bl	80007b4 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800050a:	f007 fe57 	bl	80081bc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050e:	f000 f8bf 	bl	8000690 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000512:	f000 f92b 	bl	800076c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc1_buffer, 3);
 8000516:	2203      	movs	r2, #3
 8000518:	4923      	ldr	r1, [pc, #140]	@ (80005a8 <main+0xb4>)
 800051a:	4824      	ldr	r0, [pc, #144]	@ (80005ac <main+0xb8>)
 800051c:	f000 fc3c 	bl	8000d98 <HAL_ADC_Start_DMA>
  int user_button_switch = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  MouseReport mouseReport = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	809a      	strh	r2, [r3, #4]
  uint8_t scroll_resolution = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	72fb      	strb	r3, [r7, #11]
  uint8_t pan_resolution = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	72bb      	strb	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0xbc>)
 800053a:	f001 fe21 	bl	8002180 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d00c      	beq.n	800055e <main+0x6a>
		{
			user_button_switch ^= 1;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
			while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin));
 800054c:	bf00      	nop
 800054e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000552:	4817      	ldr	r0, [pc, #92]	@ (80005b0 <main+0xbc>)
 8000554:	f001 fe14 	bl	8002180 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f7      	bne.n	800054e <main+0x5a>
		}

		if (user_button_switch)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d01a      	beq.n	800059a <main+0xa6>
		{
			scroll_resolution = getScrollRes();
 8000564:	f007 fe96 	bl	8008294 <getScrollRes>
 8000568:	4603      	mov	r3, r0
 800056a:	72fb      	strb	r3, [r7, #11]
			pan_resolution = getPanRes();
 800056c:	f007 fea0 	bl	80082b0 <getPanRes>
 8000570:	4603      	mov	r3, r0
 8000572:	72bb      	strb	r3, [r7, #10]
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	480e      	ldr	r0, [pc, #56]	@ (80005b4 <main+0xc0>)
 800057a:	f001 fe19 	bl	80021b0 <HAL_GPIO_WritePin>
			mouseReport.pan = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	727b      	strb	r3, [r7, #9]
			mouseReport.scroll = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	723b      	strb	r3, [r7, #8]
//			mouseReport.pan = filter_vector(calculate_vector(adc1_buffer[0]), 10, 127);
//			mouseReport.scroll = filter_vector(calculate_vector(adc1_buffer[1]), 10, 127);
			send_mouse_report(mouseReport);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	e893 0003 	ldmia.w	r3, {r0, r1}
 800058c:	f007 fe02 	bl	8008194 <send_mouse_report>
			HAL_Delay(500);
 8000590:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000594:	f000 fb98 	bl	8000cc8 <HAL_Delay>
 8000598:	e7cc      	b.n	8000534 <main+0x40>
		}
		else
		{
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <main+0xc0>)
 80005a0:	f001 fe06 	bl	80021b0 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80005a4:	e7c6      	b.n	8000534 <main+0x40>
 80005a6:	bf00      	nop
 80005a8:	2000028c 	.word	0x2000028c
 80005ac:	20000198 	.word	0x20000198
 80005b0:	40020800 	.word	0x40020800
 80005b4:	40020400 	.word	0x40020400

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	@ 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 fb08 	bl	8008bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <SystemClock_Config+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a28      	ldr	r2, [pc, #160]	@ (8000688 <SystemClock_Config+0xd0>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <SystemClock_Config+0xd0>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	@ (800068c <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <SystemClock_Config+0xd4>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800062c:	23a8      	movs	r3, #168	@ 0xa8
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fe9f 	bl	8004384 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 f956 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f83c 	bl	80036ec <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067a:	f000 f93f 	bl	80008fc <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000764 <MX_ADC1_Init+0xd4>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b27      	ldr	r3, [pc, #156]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006d2:	4a25      	ldr	r2, [pc, #148]	@ (8000768 <MX_ADC1_Init+0xd8>)
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006de:	2203      	movs	r2, #3
 80006e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f0:	481b      	ldr	r0, [pc, #108]	@ (8000760 <MX_ADC1_Init+0xd0>)
 80006f2:	f000 fb0d 	bl	8000d10 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f8fe 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000700:	2303      	movs	r3, #3
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <MX_ADC1_Init+0xd0>)
 8000712:	f000 fc6f 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800071c:	f000 f8ee 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000720:	230a      	movs	r3, #10
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_ADC1_Init+0xd0>)
 800072e:	f000 fc61 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000738:	f000 f8e0 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073c:	230d      	movs	r3, #13
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_ADC1_Init+0xd0>)
 800074a:	f000 fc53 	bl	8000ff4 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000754:	f000 f8d2 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000198 	.word	0x20000198
 8000764:	40012000 	.word	0x40012000
 8000768:	0f000001 	.word	0x0f000001

0800076c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_TIM10_Init+0x40>)
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <MX_TIM10_Init+0x44>)
 8000774:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16700;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_TIM10_Init+0x40>)
 8000778:	f244 123c 	movw	r2, #16700	@ 0x413c
 800077c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_TIM10_Init+0x40>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_TIM10_Init+0x40>)
 8000786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800078a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_TIM10_Init+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_TIM10_Init+0x40>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_TIM10_Init+0x40>)
 800079a:	f004 f891 	bl	80048c0 <HAL_TIM_Base_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80007a4:	f000 f8aa 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000240 	.word	0x20000240
 80007b0:	40014400 	.word	0x40014400

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a0b      	ldr	r2, [pc, #44]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_DMA_Init+0x3c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2038      	movs	r0, #56	@ 0x38
 80007dc:	f000 ff95 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007e0:	2038      	movs	r0, #56	@ 0x38
 80007e2:	f000 ffae 	bl	8001742 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	f001 fc96 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_GPIO_Init+0xd8>)
 800089c:	f001 fadc 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 80008b8:	f001 face 	bl	8001e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim10)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a06      	ldr	r2, [pc, #24]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d102      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tim10_overflow = 1;
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
	}
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000240 	.word	0x20000240
 80008f8:	20000288 	.word	0x20000288

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091c:	6453      	str	r3, [r2, #68]	@ 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	@ 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a3c      	ldr	r2, [pc, #240]	@ (8000a68 <HAL_ADC_MspInit+0x110>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d171      	bne.n	8000a5e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a3a      	ldr	r2, [pc, #232]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a33      	ldr	r2, [pc, #204]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2c      	ldr	r2, [pc, #176]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <HAL_ADC_MspInit+0x114>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009ce:	2309      	movs	r3, #9
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4823      	ldr	r0, [pc, #140]	@ (8000a70 <HAL_ADC_MspInit+0x118>)
 80009e2:	f001 fa39 	bl	8001e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e6:	2308      	movs	r3, #8
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	481e      	ldr	r0, [pc, #120]	@ (8000a74 <HAL_ADC_MspInit+0x11c>)
 80009fa:	f001 fa2d 	bl	8001e58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a00:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <HAL_ADC_MspInit+0x124>)
 8000a02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a44:	f000 fe98 	bl	8001778 <HAL_DMA_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000a4e:	f7ff ff55 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a56:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a58:	4a07      	ldr	r2, [pc, #28]	@ (8000a78 <HAL_ADC_MspInit+0x120>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40012000 	.word	0x40012000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	200001e0 	.word	0x200001e0
 8000a7c:	40026410 	.word	0x40026410

08000a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x48>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d115      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <HAL_TIM_Base_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000acc <HAL_TIM_Base_MspInit+0x4c>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_TIM_Base_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 fe29 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab8:	2019      	movs	r0, #25
 8000aba:	f000 fe42 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40014400 	.word	0x40014400
 8000acc:	40023800 	.word	0x40023800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f8af 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b36:	f003 ff12 	bl	800495e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000240 	.word	0x20000240

08000b44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <DMA2_Stream0_IRQHandler+0x10>)
 8000b4a:	f000 ff1b 	bl	8001984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001e0 	.word	0x200001e0

08000b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <OTG_FS_IRQHandler+0x10>)
 8000b5e:	f001 fc8b 	bl	8002478 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000780 	.word	0x20000780

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f008 f815 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fc97 	bl	80004f4 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000bd4:	08008cbc 	.word	0x08008cbc
  ldr r2, =_sbss
 8000bd8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000bdc:	20000c80 	.word	0x20000c80

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fd71 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe76 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fd89 	bl	800175e <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f000 fd51 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	@ (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000298 	.word	0x20000298

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000298 	.word	0x20000298

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e033      	b.n	8000d8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe12 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d118      	bne.n	8000d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d56:	f023 0302 	bic.w	r3, r3, #2
 8000d5a:	f043 0202 	orr.w	r2, r3, #2
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fa78 	bl	8001258 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d7e:	e001      	b.n	8000d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Start_DMA+0x1e>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e0e9      	b.n	8000f8a <HAL_ADC_Start_DMA+0x1f2>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d018      	beq.n	8000dfe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	@ (8000f94 <HAL_ADC_Start_DMA+0x1fc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6d      	ldr	r2, [pc, #436]	@ (8000f98 <HAL_ADC_Start_DMA+0x200>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9a      	lsrs	r2, r3, #18
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000df0:	e002      	b.n	8000df8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e0c:	d107      	bne.n	8000e1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e1c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f040 80a1 	bne.w	8000f70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e6c:	d106      	bne.n	8000e7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f023 0206 	bic.w	r2, r3, #6
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e7a:	e002      	b.n	8000e82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e8a:	4b44      	ldr	r3, [pc, #272]	@ (8000f9c <HAL_ADC_Start_DMA+0x204>)
 8000e8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e92:	4a43      	ldr	r2, [pc, #268]	@ (8000fa0 <HAL_ADC_Start_DMA+0x208>)
 8000e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e9a:	4a42      	ldr	r2, [pc, #264]	@ (8000fa4 <HAL_ADC_Start_DMA+0x20c>)
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea2:	4a41      	ldr	r2, [pc, #260]	@ (8000fa8 <HAL_ADC_Start_DMA+0x210>)
 8000ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000eae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000ebe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ece:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	334c      	adds	r3, #76	@ 0x4c
 8000eda:	4619      	mov	r1, r3
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f000 fcf8 	bl	80018d4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d12a      	bne.n	8000f46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <HAL_ADC_Start_DMA+0x214>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d015      	beq.n	8000f26 <HAL_ADC_Start_DMA+0x18e>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb0 <HAL_ADC_Start_DMA+0x218>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d105      	bne.n	8000f10 <HAL_ADC_Start_DMA+0x178>
 8000f04:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <HAL_ADC_Start_DMA+0x204>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00a      	beq.n	8000f26 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_ADC_Start_DMA+0x21c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d136      	bne.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_ADC_Start_DMA+0x204>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d130      	bne.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d129      	bne.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e020      	b.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <HAL_ADC_Start_DMA+0x214>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d11b      	bne.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d114      	bne.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	e00b      	b.n	8000f88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f043 0210 	orr.w	r2, r3, #16
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f80:	f043 0201 	orr.w	r2, r3, #1
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000000 	.word	0x20000000
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	40012300 	.word	0x40012300
 8000fa0:	08001451 	.word	0x08001451
 8000fa4:	0800150b 	.word	0x0800150b
 8000fa8:	08001527 	.word	0x08001527
 8000fac:	40012000 	.word	0x40012000
 8000fb0:	40012100 	.word	0x40012100
 8000fb4:	40012200 	.word	0x40012200

08000fb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1c>
 800100c:	2302      	movs	r3, #2
 800100e:	e113      	b.n	8001238 <HAL_ADC_ConfigChannel+0x244>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b09      	cmp	r3, #9
 800101e:	d925      	bls.n	800106c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68d9      	ldr	r1, [r3, #12]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	3b1e      	subs	r3, #30
 8001036:	2207      	movs	r2, #7
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43da      	mvns	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	400a      	ands	r2, r1
 8001044:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68d9      	ldr	r1, [r3, #12]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	4603      	mov	r3, r0
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4403      	add	r3, r0
 800105e:	3b1e      	subs	r3, #30
 8001060:	409a      	lsls	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	e022      	b.n	80010b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6919      	ldr	r1, [r3, #16]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	2207      	movs	r2, #7
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6919      	ldr	r1, [r3, #16]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4403      	add	r3, r0
 80010a8:	409a      	lsls	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d824      	bhi.n	8001104 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b05      	subs	r3, #5
 80010cc:	221f      	movs	r2, #31
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	400a      	ands	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b05      	subs	r3, #5
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	@ 0x34
 8001102:	e04c      	b.n	800119e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b0c      	cmp	r3, #12
 800110a:	d824      	bhi.n	8001156 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b23      	subs	r3, #35	@ 0x23
 800111e:	221f      	movs	r2, #31
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43da      	mvns	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	400a      	ands	r2, r1
 800112c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b23      	subs	r3, #35	@ 0x23
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
 8001154:	e023      	b.n	800119e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b41      	subs	r3, #65	@ 0x41
 8001168:	221f      	movs	r2, #31
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	400a      	ands	r2, r1
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3b41      	subs	r3, #65	@ 0x41
 8001192:	fa00 f203 	lsl.w	r2, r0, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <HAL_ADC_ConfigChannel+0x250>)
 80011a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <HAL_ADC_ConfigChannel+0x254>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10f      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d8>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d10b      	bne.n	80011cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_ADC_ConfigChannel+0x254>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_ADC_ConfigChannel+0x23a>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <HAL_ADC_ConfigChannel+0x258>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d003      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0x1f4>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d122      	bne.n	800122e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a11      	ldr	r2, [pc, #68]	@ (800124c <HAL_ADC_ConfigChannel+0x258>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d111      	bne.n	800122e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_ADC_ConfigChannel+0x25c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_ADC_ConfigChannel+0x260>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9a      	lsrs	r2, r3, #18
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001220:	e002      	b.n	8001228 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3b01      	subs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40012300 	.word	0x40012300
 8001248:	40012000 	.word	0x40012000
 800124c:	10000012 	.word	0x10000012
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001260:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <ADC_Init+0x1f0>)
 8001262:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	431a      	orrs	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800128c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	021a      	lsls	r2, r3, #8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	4a58      	ldr	r2, [pc, #352]	@ (800144c <ADC_Init+0x1f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d022      	beq.n	8001336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6899      	ldr	r1, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6899      	ldr	r1, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e00f      	b.n	8001356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001354:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0202 	bic.w	r2, r2, #2
 8001364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e1b      	ldrb	r3, [r3, #24]
 8001370:	005a      	lsls	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01b      	beq.n	80013bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001392:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	3b01      	subs	r3, #1
 80013b0:	035a      	lsls	r2, r3, #13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e007      	b.n	80013cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	051a      	lsls	r2, r3, #20
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800140e:	025a      	lsls	r2, r3, #9
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6899      	ldr	r1, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	029a      	lsls	r2, r3, #10
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40012300 	.word	0x40012300
 800144c:	0f000001 	.word	0x0f000001

08001450 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001466:	2b00      	cmp	r3, #0
 8001468:	d13c      	bne.n	80014e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d12b      	bne.n	80014dc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001488:	2b00      	cmp	r3, #0
 800148a:	d127      	bne.n	80014dc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001492:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d119      	bne.n	80014dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0220 	bic.w	r2, r2, #32
 80014b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fd6b 	bl	8000fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014e2:	e00e      	b.n	8001502 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fd75 	bl	8000fe0 <HAL_ADC_ErrorCallback>
}
 80014f6:	e004      	b.n	8001502 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	4798      	blx	r3
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001516:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fd57 	bl	8000fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001532:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2240      	movs	r2, #64	@ 0x40
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f043 0204 	orr.w	r2, r3, #4
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f7ff fd4a 	bl	8000fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	@ (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	@ (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff3e 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff31 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fa94 	bl	8000cb0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e099      	b.n	80018c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b4:	e00f      	b.n	80017d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b6:	f7ff fa7b 	bl	8000cb0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d908      	bls.n	80017d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e078      	b.n	80018c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e8      	bne.n	80017b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_DMA_Init+0x158>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001838:	4313      	orrs	r3, r2
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f023 0307 	bic.w	r3, r3, #7
 8001856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001866:	2b04      	cmp	r3, #4
 8001868:	d117      	bne.n	800189a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00e      	beq.n	800189a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fa6f 	bl	8001d60 <DMA_CheckFifoParam>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001896:	2301      	movs	r3, #1
 8001898:	e016      	b.n	80018c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fa26 	bl	8001cf4 <DMA_CalcBaseAndBitshift>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	223f      	movs	r2, #63	@ 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	f010803f 	.word	0xf010803f

080018d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Start_IT+0x26>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e040      	b.n	800197c <HAL_DMA_Start_IT+0xa8>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d12f      	bne.n	800196e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2202      	movs	r2, #2
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f9b8 	bl	8001c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192c:	223f      	movs	r2, #63	@ 0x3f
 800192e:	409a      	lsls	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0216 	orr.w	r2, r2, #22
 8001942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e005      	b.n	800197a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001976:	2302      	movs	r3, #2
 8001978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800197a:	7dfb      	ldrb	r3, [r7, #23]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001990:	4b8e      	ldr	r3, [pc, #568]	@ (8001bcc <HAL_DMA_IRQHandler+0x248>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a8e      	ldr	r2, [pc, #568]	@ (8001bd0 <HAL_DMA_IRQHandler+0x24c>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ae:	2208      	movs	r2, #8
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0204 	bic.w	r2, r2, #4
 80019d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	2208      	movs	r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	2201      	movs	r2, #1
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1e:	f043 0202 	orr.w	r2, r3, #2
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	2204      	movs	r2, #4
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a60:	2210      	movs	r2, #16
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d043      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d03c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7e:	2210      	movs	r2, #16
 8001a80:	409a      	lsls	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d018      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d108      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
 8001ab2:	e01f      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0208 	bic.w	r2, r2, #8
 8001ae2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af8:	2220      	movs	r2, #32
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 808f 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8087 	beq.w	8001c24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d136      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0216 	bic.w	r2, r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x1da>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0208 	bic.w	r2, r2, #8
 8001b6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b72:	223f      	movs	r2, #63	@ 0x3f
 8001b74:	409a      	lsls	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07e      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
        }
        return;
 8001b9a:	e079      	b.n	8001c90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01d      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10d      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d031      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
 8001bc8:	e02c      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d023      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e01e      	b.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10f      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0210 	bic.w	r2, r2, #16
 8001c02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d032      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d022      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	3301      	adds	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d307      	bcc.n	8001c6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x2cc>
 8001c6a:	e000      	b.n	8001c6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e000      	b.n	8001c92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c90:	bf00      	nop
    }
  }
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b40      	cmp	r3, #64	@ 0x40
 8001cc4:	d108      	bne.n	8001cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cd6:	e007      	b.n	8001ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3b10      	subs	r3, #16
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <DMA_CalcBaseAndBitshift+0x64>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <DMA_CalcBaseAndBitshift+0x68>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d909      	bls.n	8001d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	1d1a      	adds	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d34:	e007      	b.n	8001d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	aaaaaaab 	.word	0xaaaaaaab
 8001d5c:	08008ca4 	.word	0x08008ca4

08001d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11f      	bne.n	8001dba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d856      	bhi.n	8001e2e <DMA_CheckFifoParam+0xce>
 8001d80:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <DMA_CheckFifoParam+0x28>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001dab 	.word	0x08001dab
 8001d90:	08001d99 	.word	0x08001d99
 8001d94:	08001e2f 	.word	0x08001e2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d046      	beq.n	8001e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e043      	b.n	8001e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001db2:	d140      	bne.n	8001e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db8:	e03d      	b.n	8001e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc2:	d121      	bne.n	8001e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d837      	bhi.n	8001e3a <DMA_CheckFifoParam+0xda>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <DMA_CheckFifoParam+0x70>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de7 	.word	0x08001de7
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001df9 	.word	0x08001df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
      break;
 8001de4:	e030      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d025      	beq.n	8001e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df6:	e022      	b.n	8001e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e00:	d11f      	bne.n	8001e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e06:	e01c      	b.n	8001e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d903      	bls.n	8001e16 <DMA_CheckFifoParam+0xb6>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d003      	beq.n	8001e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e14:	e018      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1a:	e015      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2c:	e00b      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e00a      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
 8001e34:	e008      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e36:	bf00      	nop
 8001e38:	e006      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3a:	bf00      	nop
 8001e3c:	e004      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e3e:	bf00      	nop
 8001e40:	e002      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <DMA_CheckFifoParam+0xe8>
      break;
 8001e46:	bf00      	nop
    }
  } 
  
  return status; 
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e165      	b.n	8002140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8154 	bne.w	800213a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ae 	beq.w	800213a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <HAL_GPIO_Init+0x300>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8002158 <HAL_GPIO_Init+0x300>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <HAL_GPIO_Init+0x300>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a58      	ldr	r2, [pc, #352]	@ (800215c <HAL_GPIO_Init+0x304>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	@ (8002160 <HAL_GPIO_Init+0x308>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d025      	beq.n	8002072 <HAL_GPIO_Init+0x21a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_GPIO_Init+0x30c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <HAL_GPIO_Init+0x216>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4d      	ldr	r2, [pc, #308]	@ (8002168 <HAL_GPIO_Init+0x310>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x212>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_GPIO_Init+0x314>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4b      	ldr	r2, [pc, #300]	@ (8002170 <HAL_GPIO_Init+0x318>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x20a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_GPIO_Init+0x31c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x206>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a49      	ldr	r2, [pc, #292]	@ (8002178 <HAL_GPIO_Init+0x320>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x202>
 8002056:	2306      	movs	r3, #6
 8002058:	e00c      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 800205a:	2307      	movs	r3, #7
 800205c:	e00a      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 800205e:	2305      	movs	r3, #5
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 8002062:	2304      	movs	r3, #4
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x21c>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	@ (800215c <HAL_GPIO_Init+0x304>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002092:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <HAL_GPIO_Init+0x324>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b6:	4a31      	ldr	r2, [pc, #196]	@ (800217c <HAL_GPIO_Init+0x324>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <HAL_GPIO_Init+0x324>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e0:	4a26      	ldr	r2, [pc, #152]	@ (800217c <HAL_GPIO_Init+0x324>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e6:	4b25      	ldr	r3, [pc, #148]	@ (800217c <HAL_GPIO_Init+0x324>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_GPIO_Init+0x324>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b1a      	ldr	r3, [pc, #104]	@ (800217c <HAL_GPIO_Init+0x324>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_GPIO_Init+0x324>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f ae96 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40021400 	.word	0x40021400
 8002178:	40021800 	.word	0x40021800
 800217c:	40013c00 	.word	0x40013c00

08002180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e001      	b.n	80021a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e108      	b.n	8002406 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f006 f97e 	bl	8008510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2203      	movs	r2, #3
 8002218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002222:	d102      	bne.n	800222a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f002 fe85 	bl	8004f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7c1a      	ldrb	r2, [r3, #16]
 800223c:	f88d 2000 	strb.w	r2, [sp]
 8002240:	3304      	adds	r3, #4
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	f002 fd64 	bl	8004d10 <USB_CoreInit>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0d5      	b.n	8002406 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fe7d 	bl	8004f60 <USB_SetCurrentMode>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0c6      	b.n	8002406 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e04a      	b.n	8002314 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	3315      	adds	r3, #21
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	3314      	adds	r3, #20
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	b298      	uxth	r0, r3
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	332e      	adds	r3, #46	@ 0x2e
 80022ba:	4602      	mov	r2, r0
 80022bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3318      	adds	r3, #24
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	331c      	adds	r3, #28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3320      	adds	r3, #32
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3324      	adds	r3, #36	@ 0x24
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	3301      	adds	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	429a      	cmp	r2, r3
 800231c:	d3af      	bcc.n	800227e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	e044      	b.n	80023ae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	791b      	ldrb	r3, [r3, #4]
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3b5      	bcc.n	8002324 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7c1a      	ldrb	r2, [r3, #16]
 80023c0:	f88d 2000 	strb.w	r2, [sp]
 80023c4:	3304      	adds	r3, #4
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	f002 fe16 	bl	8004ff8 <USB_DevInit>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e013      	b.n	8002406 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7b1b      	ldrb	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f001 f955 	bl	80036a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fe4d 	bl	800609e <USB_DevDisconnect>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_PCD_Start+0x1c>
 8002426:	2302      	movs	r3, #2
 8002428:	e022      	b.n	8002470 <HAL_PCD_Start+0x62>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 fd60 	bl	8004f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fdfb 	bl	800605c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b08d      	sub	sp, #52	@ 0x34
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 feb9 	bl	8006206 <USB_GetMode>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 84b9 	bne.w	8002e0e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fe1d 	bl	80060e0 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 84af 	beq.w	8002e0c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fe0a 	bl	80060e0 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f002 0202 	and.w	r2, r2, #2
 80024e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fdf8 	bl	80060e0 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d161      	bne.n	80025be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0210 	bic.w	r2, r2, #16
 8002508:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	0c5b      	lsrs	r3, r3, #17
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	2b02      	cmp	r3, #2
 8002534:	d124      	bne.n	8002580 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d035      	beq.n	80025ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800254c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	6a38      	ldr	r0, [r7, #32]
 8002556:	f003 fc2f 	bl	8005db8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002566:	441a      	add	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	441a      	add	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	615a      	str	r2, [r3, #20]
 800257e:	e016      	b.n	80025ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2b06      	cmp	r3, #6
 800258a:	d110      	bne.n	80025ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002592:	2208      	movs	r2, #8
 8002594:	4619      	mov	r1, r3
 8002596:	6a38      	ldr	r0, [r7, #32]
 8002598:	f003 fc0e 	bl	8005db8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a8:	441a      	add	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0210 	orr.w	r2, r2, #16
 80025bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd8c 	bl	80060e0 <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025d2:	f040 80a7 	bne.w	8002724 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fd91 	bl	8006106 <USB_ReadDevAllOutEpInterrupt>
 80025e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80025e6:	e099      	b.n	800271c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 808e 	beq.w	8002710 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f003 fdb5 	bl	800616e <USB_ReadDevOutEPInterrupt>
 8002604:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261c:	461a      	mov	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 feb7 	bl	8003398 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00c      	beq.n	800264e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002640:	461a      	mov	r2, r3
 8002642:	2308      	movs	r3, #8
 8002644:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 ff8d 	bl	8003568 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002664:	461a      	mov	r2, r3
 8002666:	2310      	movs	r3, #16
 8002668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d030      	beq.n	80026d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267c:	2b80      	cmp	r3, #128	@ 0x80
 800267e:	d109      	bne.n	8002694 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002692:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	78db      	ldrb	r3, [r3, #3]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2200      	movs	r2, #0
 80026b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f006 f842 	bl	8008748 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	2302      	movs	r3, #2
 80026d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	2320      	movs	r3, #32
 80026f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800270e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	3301      	adds	r3, #1
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f af62 	bne.w	80025e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fcd9 	bl	80060e0 <USB_ReadInterrupts>
 800272e:	4603      	mov	r3, r0
 8002730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002738:	f040 80db 	bne.w	80028f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fcfa 	bl	800613a <USB_ReadDevAllInEpInterrupt>
 8002746:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800274c:	e0cd      	b.n	80028ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80c2 	beq.w	80028de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fd20 	bl	80061aa <USB_ReadDevInEPInterrupt>
 800276a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d057      	beq.n	8002826 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	2201      	movs	r2, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	69f9      	ldr	r1, [r7, #28]
 8002792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002796:	4013      	ands	r3, r2
 8002798:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	2301      	movs	r3, #1
 80027aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	799b      	ldrb	r3, [r3, #6]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d132      	bne.n	800281a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	3320      	adds	r3, #32
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	331c      	adds	r3, #28
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4419      	add	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4403      	add	r3, r0
 80027e8:	3320      	adds	r3, #32
 80027ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <HAL_PCD_IRQHandler+0x3a2>
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3324      	adds	r3, #36	@ 0x24
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002812:	461a      	mov	r2, r3
 8002814:	2101      	movs	r1, #1
 8002816:	f003 fd27 	bl	8006268 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f005 ff0c 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800283c:	461a      	mov	r2, r3
 800283e:	2308      	movs	r3, #8
 8002840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002858:	461a      	mov	r2, r3
 800285a:	2310      	movs	r3, #16
 800285c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002874:	461a      	mov	r2, r3
 8002876:	2340      	movs	r3, #64	@ 0x40
 8002878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002886:	6a38      	ldr	r0, [r7, #32]
 8002888:	f002 fd14 	bl	80052b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800288c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	3310      	adds	r3, #16
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f005 ff59 	bl	800876c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c6:	461a      	mov	r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fcd0 	bl	800327e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	3301      	adds	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f47f af2e 	bne.w	800274e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fbf2 	bl	80060e0 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002906:	d122      	bne.n	800294e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800292e:	2100      	movs	r1, #0
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f006 f8c1 	bl	8008ab8 <HAL_PCDEx_LPM_Callback>
 8002936:	e002      	b.n	800293e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f005 fef7 	bl	800872c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 fbc4 	bl	80060e0 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800295e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002962:	d112      	bne.n	800298a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f005 feb3 	bl	80086e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002988:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fba6 	bl	80060e0 <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299e:	d121      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80029ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d111      	bne.n	80029de <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029d4:	2101      	movs	r1, #1
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f006 f86e 	bl	8008ab8 <HAL_PCDEx_LPM_Callback>
 80029dc:	e002      	b.n	80029e4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f005 fe7e 	bl	80086e0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fb79 	bl	80060e0 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f8:	f040 80b7 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2110      	movs	r1, #16
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fc4c 	bl	80052b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a20:	e046      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a46:	0151      	lsls	r1, r2, #5
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	440a      	add	r2, r1
 8002a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002aa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002aa8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aac:	3301      	adds	r3, #1
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d3b2      	bcc.n	8002a22 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ace:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7bdb      	ldrb	r3, [r3, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae8:	f043 030b 	orr.w	r3, r3, #11
 8002aec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afe:	f043 030b 	orr.w	r3, r3, #11
 8002b02:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b04:	e015      	b.n	8002b32 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b18:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2c:	f043 030b 	orr.w	r3, r3, #11
 8002b30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b40:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b54:	461a      	mov	r2, r3
 8002b56:	f003 fb87 	bl	8006268 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fab6 	bl	80060e0 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7e:	d123      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fb4c 	bl	8006222 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fc09 	bl	80053a6 <USB_GetDevSpeed>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681c      	ldr	r4, [r3, #0]
 8002ba0:	f000 fe8a 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002baa:	461a      	mov	r2, r3
 8002bac:	4620      	mov	r0, r4
 8002bae:	f002 f913 	bl	8004dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fd6b 	bl	800868e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 fa87 	bl	80060e0 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10a      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f005 fd48 	bl	8008672 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 0208 	and.w	r2, r2, #8
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fa72 	bl	80060e0 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c02:	2b80      	cmp	r3, #128	@ 0x80
 8002c04:	d123      	bne.n	8002c4e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	2301      	movs	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e014      	b.n	8002c42 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 faf0 	bl	800321c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	791b      	ldrb	r3, [r3, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d3e4      	bcc.n	8002c18 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fa44 	bl	80060e0 <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c62:	d13c      	bne.n	8002cde <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c64:	2301      	movs	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c68:	e02b      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3318      	adds	r3, #24
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d115      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da12      	bge.n	8002cbc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3317      	adds	r3, #23
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fab0 	bl	800321c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	791b      	ldrb	r3, [r3, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d3cd      	bcc.n	8002c6a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f9fc 	bl	80060e0 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cf2:	d156      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e045      	b.n	8002d86 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d12e      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da2b      	bge.n	8002d80 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d34:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d121      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7c:	6053      	str	r3, [r2, #4]
            break;
 8002d7e:	e008      	b.n	8002d92 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d3b3      	bcc.n	8002cfa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f99a 	bl	80060e0 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db6:	d10a      	bne.n	8002dce <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f005 fce9 	bl	8008790 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 f984 	bl	80060e0 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d115      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f005 fcd9 	bl	80087ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e000      	b.n	8002e0e <HAL_PCD_IRQHandler+0x996>
      return;
 8002e0c:	bf00      	nop
    }
  }
}
 8002e0e:	3734      	adds	r7, #52	@ 0x34
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}

08002e14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_SetAddress+0x1a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e012      	b.n	8002e54 <HAL_PCD_SetAddress+0x40>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f8e3 	bl	8006010 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	70fb      	strb	r3, [r7, #3]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	803b      	strh	r3, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da0f      	bge.n	8002ea2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	3310      	adds	r3, #16
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	705a      	strb	r2, [r3, #1]
 8002ea0:	e00f      	b.n	8002ec2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ece:	883a      	ldrh	r2, [r7, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	78ba      	ldrb	r2, [r7, #2]
 8002ed8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eec:	78bb      	ldrb	r3, [r7, #2]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d102      	bne.n	8002ef8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_PCD_EP_Open+0xaa>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e00e      	b.n	8002f24 <HAL_PCD_EP_Open+0xc8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fa6b 	bl	80053f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f22:	7afb      	ldrb	r3, [r7, #11]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da0f      	bge.n	8002f60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	3310      	adds	r3, #16
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	3304      	adds	r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	705a      	strb	r2, [r3, #1]
 8002f5e:	e00f      	b.n	8002f80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3304      	adds	r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_PCD_EP_Close+0x6e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00e      	b.n	8002fb8 <HAL_PCD_EP_Close+0x8c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 faa9 	bl	8005500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	7afb      	ldrb	r3, [r7, #11]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	799b      	ldrb	r3, [r3, #6]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	799b      	ldrb	r3, [r3, #6]
 8003024:	461a      	mov	r2, r3
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	f002 fb46 	bl	80056b8 <USB_EPStartXfer>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	460b      	mov	r3, r1
 8003044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	3310      	adds	r3, #16
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2201      	movs	r2, #1
 8003074:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003076:	7afb      	ldrb	r3, [r7, #11]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	b2da      	uxtb	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	799b      	ldrb	r3, [r3, #6]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	799b      	ldrb	r3, [r3, #6]
 8003098:	461a      	mov	r2, r3
 800309a:	6979      	ldr	r1, [r7, #20]
 800309c:	f002 fb0c 	bl	80056b8 <USB_EPStartXfer>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	7912      	ldrb	r2, [r2, #4]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04f      	b.n	8003168 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da0f      	bge.n	80030f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	3310      	adds	r3, #16
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	705a      	strb	r2, [r3, #1]
 80030ee:	e00d      	b.n	800310c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_PCD_EP_SetStall+0x82>
 8003128:	2302      	movs	r3, #2
 800312a:	e01d      	b.n	8003168 <HAL_PCD_EP_SetStall+0xbe>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	4618      	mov	r0, r3
 800313c:	f002 fe94 	bl	8005e68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7999      	ldrb	r1, [r3, #6]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003158:	461a      	mov	r2, r3
 800315a:	f003 f885 	bl	8006268 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	7912      	ldrb	r2, [r2, #4]
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e042      	b.n	8003214 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800318e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	da0f      	bge.n	80031b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	3310      	adds	r3, #16
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
 80031b4:	e00f      	b.n	80031d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_PCD_EP_ClrStall+0x86>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e00e      	b.n	8003214 <HAL_PCD_EP_ClrStall+0xa4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fe9d 	bl	8005f44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	da0c      	bge.n	800324a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	3310      	adds	r3, #16
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	3304      	adds	r3, #4
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e00c      	b.n	8003264 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fcbc 	bl	8005be8 <USB_EPStopXfer>
 8003270:	4603      	mov	r3, r0
 8003272:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003274:	7afb      	ldrb	r3, [r7, #11]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08a      	sub	sp, #40	@ 0x28
 8003282:	af02      	add	r7, sp, #8
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	3310      	adds	r3, #16
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d901      	bls.n	80032b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d902      	bls.n	80032d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3303      	adds	r3, #3
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032da:	e02a      	b.n	8003332 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d902      	bls.n	80032f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3303      	adds	r3, #3
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4603      	mov	r3, r0
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f002 fd11 	bl	8005d3c <USB_WritePacket>

    ep->xfer_buff  += len;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	429a      	cmp	r2, r3
 8003346:	d809      	bhi.n	800335c <PCD_WriteEmptyTxFifo+0xde>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003350:	429a      	cmp	r2, r3
 8003352:	d203      	bcs.n	800335c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1bf      	bne.n	80032dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	429a      	cmp	r2, r3
 8003366:	d811      	bhi.n	800338c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	2201      	movs	r2, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	43db      	mvns	r3, r3
 8003382:	6939      	ldr	r1, [r7, #16]
 8003384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003388:	4013      	ands	r3, r2
 800338a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	333c      	adds	r3, #60	@ 0x3c
 80033b0:	3304      	adds	r3, #4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	799b      	ldrb	r3, [r3, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d17b      	bne.n	80034c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4a61      	ldr	r2, [pc, #388]	@ (8003560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f240 80b9 	bls.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80b3 	beq.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003400:	6093      	str	r3, [r2, #8]
 8003402:	e0a7      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800341a:	461a      	mov	r2, r3
 800341c:	2320      	movs	r3, #32
 800341e:	6093      	str	r3, [r2, #8]
 8003420:	e098      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 8093 	bne.w	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4a4b      	ldr	r2, [pc, #300]	@ (8003560 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d90f      	bls.n	8003456 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003452:	6093      	str	r3, [r2, #8]
 8003454:	e07e      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	440b      	add	r3, r1
 8003478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	1ad2      	subs	r2, r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d114      	bne.n	80034b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034a0:	461a      	mov	r2, r3
 80034a2:	2101      	movs	r1, #1
 80034a4:	f002 fee0 	bl	8006268 <USB_EP0_OutStart>
 80034a8:	e006      	b.n	80034b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f005 f8a2 	bl	8008608 <HAL_PCD_DataOutStageCallback>
 80034c4:	e046      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d124      	bne.n	8003518 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ea:	6093      	str	r3, [r2, #8]
 80034ec:	e032      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003504:	461a      	mov	r2, r3
 8003506:	2320      	movs	r3, #32
 8003508:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f005 f879 	bl	8008608 <HAL_PCD_DataOutStageCallback>
 8003516:	e01d      	b.n	8003554 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d114      	bne.n	8003548 <PCD_EP_OutXfrComplete_int+0x1b0>
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003540:	461a      	mov	r2, r3
 8003542:	2100      	movs	r1, #0
 8003544:	f002 fe90 	bl	8006268 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f005 f85a 	bl	8008608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	4f54300a 	.word	0x4f54300a
 8003564:	4f54310a 	.word	0x4f54310a

08003568 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	333c      	adds	r3, #60	@ 0x3c
 8003580:	3304      	adds	r3, #4
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d90e      	bls.n	80035bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f005 f811 	bl	80085e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d90c      	bls.n	80035e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035dc:	461a      	mov	r2, r3
 80035de:	2101      	movs	r1, #1
 80035e0:	f002 fe42 	bl	8006268 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	4f54300a 	.word	0x4f54300a

080035f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
 8003600:	4613      	mov	r3, r2
 8003602:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003612:	883b      	ldrh	r3, [r7, #0]
 8003614:	0419      	lsls	r1, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	430a      	orrs	r2, r1
 800361e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003620:	e028      	b.n	8003674 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e00d      	b.n	8003652 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3340      	adds	r3, #64	@ 0x40
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	3301      	adds	r3, #1
 8003650:	73fb      	strb	r3, [r7, #15]
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	3b01      	subs	r3, #1
 8003658:	429a      	cmp	r2, r3
 800365a:	d3ec      	bcc.n	8003636 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800365c:	883b      	ldrh	r3, [r7, #0]
 800365e:	0418      	lsls	r0, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	3b01      	subs	r3, #1
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4302      	orrs	r2, r0
 800366c:	3340      	adds	r3, #64	@ 0x40
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	f043 0303 	orr.w	r3, r3, #3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fd fa68 	bl	8000cb0 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fd fa64 	bl	8000cb0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003872:	f000 fb57 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd f9c8 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08008c94 	.word	0x08008c94
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000000 	.word	0x20000000

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	@ 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003908:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800390a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	496c      	ldr	r1, [pc, #432]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003936:	4b64      	ldr	r3, [pc, #400]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	4960      	ldr	r1, [pc, #384]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003954:	2301      	movs	r3, #1
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d017      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4b58      	ldr	r3, [pc, #352]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	4955      	ldr	r1, [pc, #340]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003982:	d101      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003984:	2301      	movs	r3, #1
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003990:	2301      	movs	r3, #1
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039a0:	4b49      	ldr	r3, [pc, #292]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	4946      	ldr	r1, [pc, #280]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039be:	d101      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80039cc:	2301      	movs	r3, #1
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808a 	beq.w	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	4a38      	ldr	r2, [pc, #224]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ee:	4b36      	ldr	r3, [pc, #216]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039fa:	4b34      	ldr	r3, [pc, #208]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a33      	ldr	r2, [pc, #204]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a06:	f7fd f953 	bl	8000cb0 <HAL_GetTick>
 8003a0a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7fd f94f 	bl	8000cb0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e278      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a34:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02f      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d028      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a52:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a60:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a66:	4b18      	ldr	r3, [pc, #96]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d114      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fd f91d 	bl	8000cb0 <HAL_GetTick>
 8003a76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd f919 	bl	8000cb0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e240      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ee      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa8:	d114      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003aaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	4902      	ldr	r1, [pc, #8]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]
 8003ac4:	e00c      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	42470e40 	.word	0x42470e40
 8003ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a49      	ldr	r2, [pc, #292]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ada:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ade:	6093      	str	r3, [r2, #8]
 8003ae0:	4b47      	ldr	r3, [pc, #284]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aec:	4944      	ldr	r1, [pc, #272]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b04:	4b3f      	ldr	r3, [pc, #252]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b06:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003b14:	4b3a      	ldr	r3, [pc, #232]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b22:	4937      	ldr	r1, [pc, #220]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b36:	4b32      	ldr	r3, [pc, #200]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b44:	492e      	ldr	r1, [pc, #184]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d011      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b58:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	4926      	ldr	r1, [pc, #152]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b76:	d101      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003b88:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	491a      	ldr	r1, [pc, #104]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d011      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003baa:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb8:	4911      	ldr	r1, [pc, #68]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bdc:	f040 80ff 	bne.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003be0:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003be6:	f7fd f863 	bl	8000cb0 <HAL_GetTick>
 8003bea:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bec:	e00e      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bee:	f7fd f85f 	bl	8000cb0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d907      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e188      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c00:	40023800 	.word	0x40023800
 8003c04:	424711e0 	.word	0x424711e0
 8003c08:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ea      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d028      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d124      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c40:	4b71      	ldr	r3, [pc, #452]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c52:	4b6d      	ldr	r3, [pc, #436]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c58:	0e1b      	lsrs	r3, r3, #24
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	019b      	lsls	r3, r3, #6
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	3b01      	subs	r3, #1
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	431a      	orrs	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	071b      	lsls	r3, r3, #28
 8003c82:	4961      	ldr	r1, [pc, #388]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d035      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb4:	d130      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cb6:	4b54      	ldr	r3, [pc, #336]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	0f1b      	lsrs	r3, r3, #28
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	019b      	lsls	r3, r3, #6
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	071b      	lsls	r3, r3, #28
 8003cf8:	4943      	ldr	r1, [pc, #268]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d00:	4b41      	ldr	r3, [pc, #260]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d06:	f023 021f 	bic.w	r2, r3, #31
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	493d      	ldr	r1, [pc, #244]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d029      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d2c:	d124      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d2e:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d40:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d46:	0f1b      	lsrs	r3, r3, #28
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	019b      	lsls	r3, r3, #6
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	3b01      	subs	r3, #1
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	071b      	lsls	r3, r3, #28
 8003d70:	4925      	ldr	r1, [pc, #148]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d016      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	4917      	ldr	r1, [pc, #92]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003db2:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db8:	f7fc ff7a 	bl	8000cb0 <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dc0:	f7fc ff76 	bl	8000cb0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e09f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8095 	bne.w	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fc ff60 	bl	8000cb0 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003df2:	e00f      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003df4:	f7fc ff5c 	bl	8000cb0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d908      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e085      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470068 	.word	0x42470068
 8003e10:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e14:	4b41      	ldr	r3, [pc, #260]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e20:	d0e8      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d02b      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d127      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e4a:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	3301      	adds	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	431a      	orrs	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	4928      	ldr	r1, [pc, #160]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e80:	4b26      	ldr	r3, [pc, #152]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e86:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	4922      	ldr	r1, [pc, #136]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eae:	d118      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	0e1b      	lsrs	r3, r3, #24
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	019b      	lsls	r3, r3, #6
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	4910      	ldr	r1, [pc, #64]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fc fee2 	bl	8000cb0 <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ef0:	f7fc fede 	bl	8000cb0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e007      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f0e:	d1ef      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	@ 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470070 	.word	0x42470070

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b0ae      	sub	sp, #184	@ 0xb8
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f4a:	4bcb      	ldr	r3, [pc, #812]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b0c      	cmp	r3, #12
 8003f54:	f200 8206 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x440>
 8003f58:	a201      	add	r2, pc, #4	@ (adr r2, 8003f60 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f95 	.word	0x08003f95
 8003f64:	08004365 	.word	0x08004365
 8003f68:	08004365 	.word	0x08004365
 8003f6c:	08004365 	.word	0x08004365
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08004365 	.word	0x08004365
 8003f78:	08004365 	.word	0x08004365
 8003f7c:	08004365 	.word	0x08004365
 8003f80:	08003fa5 	.word	0x08003fa5
 8003f84:	08004365 	.word	0x08004365
 8003f88:	08004365 	.word	0x08004365
 8003f8c:	08004365 	.word	0x08004365
 8003f90:	08004195 	.word	0x08004195
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4bb9      	ldr	r3, [pc, #740]	@ (800427c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003f9a:	e1e7      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fa2:	e1e3      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa4:	4bb4      	ldr	r3, [pc, #720]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb0:	4bb1      	ldr	r3, [pc, #708]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d071      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbc:	4bae      	ldr	r3, [pc, #696]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	099b      	lsrs	r3, r3, #6
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fc8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	0159      	lsls	r1, r3, #5
 8003ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff4:	0150      	lsls	r0, r2, #5
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	1a51      	subs	r1, r2, r1
 8003ffe:	6439      	str	r1, [r7, #64]	@ 0x40
 8004000:	4629      	mov	r1, r5
 8004002:	eb63 0301 	sbc.w	r3, r3, r1
 8004006:	647b      	str	r3, [r7, #68]	@ 0x44
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004014:	4649      	mov	r1, r9
 8004016:	018b      	lsls	r3, r1, #6
 8004018:	4641      	mov	r1, r8
 800401a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800401e:	4641      	mov	r1, r8
 8004020:	018a      	lsls	r2, r1, #6
 8004022:	4641      	mov	r1, r8
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004028:	4649      	mov	r1, r9
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800403c:	4649      	mov	r1, r9
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4641      	mov	r1, r8
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4622      	mov	r2, r4
 8004052:	189b      	adds	r3, r3, r2
 8004054:	633b      	str	r3, [r7, #48]	@ 0x30
 8004056:	462b      	mov	r3, r5
 8004058:	460a      	mov	r2, r1
 800405a:	eb42 0303 	adc.w	r3, r2, r3
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800406c:	4629      	mov	r1, r5
 800406e:	024b      	lsls	r3, r1, #9
 8004070:	4621      	mov	r1, r4
 8004072:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004076:	4621      	mov	r1, r4
 8004078:	024a      	lsls	r2, r1, #9
 800407a:	4610      	mov	r0, r2
 800407c:	4619      	mov	r1, r3
 800407e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800408c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004090:	f7fc f8b8 	bl	8000204 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409e:	e067      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a0:	4b75      	ldr	r3, [pc, #468]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ba:	2300      	movs	r3, #0
 80040bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	0159      	lsls	r1, r3, #5
 80040d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d4:	0150      	lsls	r0, r2, #5
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4621      	mov	r1, r4
 80040dc:	1a51      	subs	r1, r2, r1
 80040de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040e0:	4629      	mov	r1, r5
 80040e2:	eb63 0301 	sbc.w	r3, r3, r1
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80040f4:	4649      	mov	r1, r9
 80040f6:	018b      	lsls	r3, r1, #6
 80040f8:	4641      	mov	r1, r8
 80040fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fe:	4641      	mov	r1, r8
 8004100:	018a      	lsls	r2, r1, #6
 8004102:	4641      	mov	r1, r8
 8004104:	ebb2 0a01 	subs.w	sl, r2, r1
 8004108:	4649      	mov	r1, r9
 800410a:	eb63 0b01 	sbc.w	fp, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800411a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800411e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004122:	4692      	mov	sl, r2
 8004124:	469b      	mov	fp, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb1a 0303 	adds.w	r3, sl, r3
 800412c:	623b      	str	r3, [r7, #32]
 800412e:	462b      	mov	r3, r5
 8004130:	eb4b 0303 	adc.w	r3, fp, r3
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004142:	4629      	mov	r1, r5
 8004144:	028b      	lsls	r3, r1, #10
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414c:	4621      	mov	r1, r4
 800414e:	028a      	lsls	r2, r1, #10
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004158:	2200      	movs	r2, #0
 800415a:	673b      	str	r3, [r7, #112]	@ 0x70
 800415c:	677a      	str	r2, [r7, #116]	@ 0x74
 800415e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004162:	f7fc f84f 	bl	8000204 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4613      	mov	r3, r2
 800416c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004170:	4b41      	ldr	r3, [pc, #260]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004192:	e0eb      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b38      	ldr	r3, [pc, #224]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800419c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a0:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d06b      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ac:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	099b      	lsrs	r3, r3, #6
 80041b2:	2200      	movs	r2, #0
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c0:	2300      	movs	r3, #0
 80041c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041c8:	4622      	mov	r2, r4
 80041ca:	462b      	mov	r3, r5
 80041cc:	f04f 0000 	mov.w	r0, #0
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	0159      	lsls	r1, r3, #5
 80041d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041da:	0150      	lsls	r0, r2, #5
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4621      	mov	r1, r4
 80041e2:	1a51      	subs	r1, r2, r1
 80041e4:	61b9      	str	r1, [r7, #24]
 80041e6:	4629      	mov	r1, r5
 80041e8:	eb63 0301 	sbc.w	r3, r3, r1
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041fa:	4659      	mov	r1, fp
 80041fc:	018b      	lsls	r3, r1, #6
 80041fe:	4651      	mov	r1, sl
 8004200:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004204:	4651      	mov	r1, sl
 8004206:	018a      	lsls	r2, r1, #6
 8004208:	4651      	mov	r1, sl
 800420a:	ebb2 0801 	subs.w	r8, r2, r1
 800420e:	4659      	mov	r1, fp
 8004210:	eb63 0901 	sbc.w	r9, r3, r1
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004220:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004224:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004228:	4690      	mov	r8, r2
 800422a:	4699      	mov	r9, r3
 800422c:	4623      	mov	r3, r4
 800422e:	eb18 0303 	adds.w	r3, r8, r3
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	462b      	mov	r3, r5
 8004236:	eb49 0303 	adc.w	r3, r9, r3
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004248:	4629      	mov	r1, r5
 800424a:	024b      	lsls	r3, r1, #9
 800424c:	4621      	mov	r1, r4
 800424e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004252:	4621      	mov	r1, r4
 8004254:	024a      	lsls	r2, r1, #9
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800425e:	2200      	movs	r2, #0
 8004260:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004262:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004264:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004268:	f7fb ffcc 	bl	8000204 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4613      	mov	r3, r2
 8004272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004276:	e065      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x420>
 8004278:	40023800 	.word	0x40023800
 800427c:	00f42400 	.word	0x00f42400
 8004280:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4b3d      	ldr	r3, [pc, #244]	@ (800437c <HAL_RCC_GetSysClockFreq+0x458>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	2200      	movs	r2, #0
 800428c:	4618      	mov	r0, r3
 800428e:	4611      	mov	r1, r2
 8004290:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004294:	653b      	str	r3, [r7, #80]	@ 0x50
 8004296:	2300      	movs	r3, #0
 8004298:	657b      	str	r3, [r7, #84]	@ 0x54
 800429a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800429e:	4642      	mov	r2, r8
 80042a0:	464b      	mov	r3, r9
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	0159      	lsls	r1, r3, #5
 80042ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b0:	0150      	lsls	r0, r2, #5
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4641      	mov	r1, r8
 80042b8:	1a51      	subs	r1, r2, r1
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	4649      	mov	r1, r9
 80042be:	eb63 0301 	sbc.w	r3, r3, r1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042d0:	4659      	mov	r1, fp
 80042d2:	018b      	lsls	r3, r1, #6
 80042d4:	4651      	mov	r1, sl
 80042d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042da:	4651      	mov	r1, sl
 80042dc:	018a      	lsls	r2, r1, #6
 80042de:	4651      	mov	r1, sl
 80042e0:	1a54      	subs	r4, r2, r1
 80042e2:	4659      	mov	r1, fp
 80042e4:	eb63 0501 	sbc.w	r5, r3, r1
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800432c:	2200      	movs	r2, #0
 800432e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004330:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004332:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004336:	f7fb ff65 	bl	8000204 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4613      	mov	r3, r2
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004344:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <HAL_RCC_GetSysClockFreq+0x458>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	0f1b      	lsrs	r3, r3, #28
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004362:	e003      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800436a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004370:	4618      	mov	r0, r3
 8004372:	37b8      	adds	r7, #184	@ 0xb8
 8004374:	46bd      	mov	sp, r7
 8004376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	00f42400 	.word	0x00f42400

08004384 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e28d      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8083 	beq.w	80044aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043a4:	4b94      	ldr	r3, [pc, #592]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d019      	beq.n	80043e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043b0:	4b91      	ldr	r3, [pc, #580]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043bc:	4b8e      	ldr	r3, [pc, #568]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c8:	d00c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b8b      	ldr	r3, [pc, #556]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d112      	bne.n	80043fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d6:	4b88      	ldr	r3, [pc, #544]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043e2:	d10b      	bne.n	80043fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	4b84      	ldr	r3, [pc, #528]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05b      	beq.n	80044a8 <HAL_RCC_OscConfig+0x124>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d157      	bne.n	80044a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e25a      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004404:	d106      	bne.n	8004414 <HAL_RCC_OscConfig+0x90>
 8004406:	4b7c      	ldr	r3, [pc, #496]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7b      	ldr	r2, [pc, #492]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xcc>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0xb4>
 800441e:	4b76      	ldr	r3, [pc, #472]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a75      	ldr	r2, [pc, #468]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b73      	ldr	r3, [pc, #460]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a72      	ldr	r2, [pc, #456]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xcc>
 8004438:	4b6f      	ldr	r3, [pc, #444]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6e      	ldr	r2, [pc, #440]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b6c      	ldr	r3, [pc, #432]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a6b      	ldr	r2, [pc, #428]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800444a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800444e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fc fc2a 	bl	8000cb0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004460:	f7fc fc26 	bl	8000cb0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	@ 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e21f      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b61      	ldr	r3, [pc, #388]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xdc>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc fc16 	bl	8000cb0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004488:	f7fc fc12 	bl	8000cb0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e20b      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b57      	ldr	r3, [pc, #348]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x104>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06f      	beq.n	8004596 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044b6:	4b50      	ldr	r3, [pc, #320]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d017      	beq.n	80044f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044c2:	4b4d      	ldr	r3, [pc, #308]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d105      	bne.n	80044da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ce:	4b4a      	ldr	r3, [pc, #296]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b47      	ldr	r3, [pc, #284]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d11c      	bne.n	8004520 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044e6:	4b44      	ldr	r3, [pc, #272]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x186>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1d3      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450a:	4b3b      	ldr	r3, [pc, #236]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4937      	ldr	r1, [pc, #220]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	e03a      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004528:	4b34      	ldr	r3, [pc, #208]	@ (80045fc <HAL_RCC_OscConfig+0x278>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fc fbbf 	bl	8000cb0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004536:	f7fc fbbb 	bl	8000cb0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e1b4      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	4b2b      	ldr	r3, [pc, #172]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b28      	ldr	r3, [pc, #160]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4925      	ldr	r1, [pc, #148]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]
 8004568:	e015      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456a:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <HAL_RCC_OscConfig+0x278>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fc fb9e 	bl	8000cb0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004578:	f7fc fb9a 	bl	8000cb0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e193      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d036      	beq.n	8004610 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d016      	beq.n	80045d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fc fb7e 	bl	8000cb0 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fc fb7a 	bl	8000cb0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e173      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <HAL_RCC_OscConfig+0x274>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x234>
 80045d6:	e01b      	b.n	8004610 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d8:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <HAL_RCC_OscConfig+0x27c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fc fb67 	bl	8000cb0 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e4:	e00e      	b.n	8004604 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fc fb63 	bl	8000cb0 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d907      	bls.n	8004604 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e15c      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	42470000 	.word	0x42470000
 8004600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004604:	4b8a      	ldr	r3, [pc, #552]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ea      	bne.n	80045e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8097 	beq.w	800474c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b83      	ldr	r3, [pc, #524]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10f      	bne.n	800464e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	4b7f      	ldr	r3, [pc, #508]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	4a7e      	ldr	r2, [pc, #504]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463c:	6413      	str	r3, [r2, #64]	@ 0x40
 800463e:	4b7c      	ldr	r3, [pc, #496]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464e:	4b79      	ldr	r3, [pc, #484]	@ (8004834 <HAL_RCC_OscConfig+0x4b0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800465a:	4b76      	ldr	r3, [pc, #472]	@ (8004834 <HAL_RCC_OscConfig+0x4b0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a75      	ldr	r2, [pc, #468]	@ (8004834 <HAL_RCC_OscConfig+0x4b0>)
 8004660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004666:	f7fc fb23 	bl	8000cb0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fc fb1f 	bl	8000cb0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e118      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b6c      	ldr	r3, [pc, #432]	@ (8004834 <HAL_RCC_OscConfig+0x4b0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x31e>
 8004694:	4b66      	ldr	r3, [pc, #408]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	4a65      	ldr	r2, [pc, #404]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a0:	e01c      	b.n	80046dc <HAL_RCC_OscConfig+0x358>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x340>
 80046aa:	4b61      	ldr	r3, [pc, #388]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	4a60      	ldr	r2, [pc, #384]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046b0:	f043 0304 	orr.w	r3, r3, #4
 80046b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0x358>
 80046c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c8:	4a59      	ldr	r2, [pc, #356]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80046d0:	4b57      	ldr	r3, [pc, #348]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d4:	4a56      	ldr	r2, [pc, #344]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	f023 0304 	bic.w	r3, r3, #4
 80046da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fc fae4 	bl	8000cb0 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	e00a      	b.n	8004702 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fc fae0 	bl	8000cb0 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0d7      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ee      	beq.n	80046ec <HAL_RCC_OscConfig+0x368>
 800470e:	e014      	b.n	800473a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004710:	f7fc face 	bl	8000cb0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fc faca 	bl	8000cb0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0c1      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472e:	4b40      	ldr	r3, [pc, #256]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ee      	bne.n	8004718 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473a:	7dfb      	ldrb	r3, [r7, #23]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d105      	bne.n	800474c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004740:	4b3b      	ldr	r3, [pc, #236]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	4a3a      	ldr	r2, [pc, #232]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80ad 	beq.w	80048b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004756:	4b36      	ldr	r3, [pc, #216]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d060      	beq.n	8004824 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d145      	bne.n	80047f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b33      	ldr	r3, [pc, #204]	@ (8004838 <HAL_RCC_OscConfig+0x4b4>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fc fa9e 	bl	8000cb0 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fc fa9a 	bl	8000cb0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e093      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	491b      	ldr	r1, [pc, #108]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <HAL_RCC_OscConfig+0x4b4>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fc fa6f 	bl	8000cb0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fc fa6b 	bl	8000cb0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e064      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e8:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x452>
 80047f4:	e05c      	b.n	80048b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <HAL_RCC_OscConfig+0x4b4>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc fa58 	bl	8000cb0 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004804:	f7fc fa54 	bl	8000cb0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e04d      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x480>
 8004822:	e045      	b.n	80048b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e040      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
 8004830:	40023800 	.word	0x40023800
 8004834:	40007000 	.word	0x40007000
 8004838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800483c:	4b1f      	ldr	r3, [pc, #124]	@ (80048bc <HAL_RCC_OscConfig+0x538>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d030      	beq.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d129      	bne.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d122      	bne.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004874:	4293      	cmp	r3, r2
 8004876:	d119      	bne.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	3b01      	subs	r3, #1
 8004886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d10f      	bne.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc f8ca 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 f946 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f06f 0202 	mvn.w	r2, #2
 8004992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8d2 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 80049ae:	e005      	b.n	80049bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f8c4 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8d5 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f06f 0204 	mvn.w	r2, #4
 80049de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f8ac 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 80049fa:	e005      	b.n	8004a08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f89e 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8af 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d020      	beq.n	8004a5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01b      	beq.n	8004a5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f06f 0208 	mvn.w	r2, #8
 8004a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f886 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 8004a46:	e005      	b.n	8004a54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f878 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f889 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01b      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0210 	mvn.w	r2, #16
 8004a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f860 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 8004a92:	e005      	b.n	8004aa0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f852 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f863 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0201 	mvn.w	r2, #1
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fb ff03 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f907 	bl	8004cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f834 	bl	8004b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f06f 0220 	mvn.w	r2, #32
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8d9 	bl	8004ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a46      	ldr	r2, [pc, #280]	@ (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a43      	ldr	r2, [pc, #268]	@ (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a42      	ldr	r2, [pc, #264]	@ (8004cc4 <TIM_Base_SetConfig+0x134>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a41      	ldr	r2, [pc, #260]	@ (8004cc8 <TIM_Base_SetConfig+0x138>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a40      	ldr	r2, [pc, #256]	@ (8004ccc <TIM_Base_SetConfig+0x13c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a35      	ldr	r2, [pc, #212]	@ (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d02b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf0:	d027      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a32      	ldr	r2, [pc, #200]	@ (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d023      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a31      	ldr	r2, [pc, #196]	@ (8004cc4 <TIM_Base_SetConfig+0x134>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a30      	ldr	r2, [pc, #192]	@ (8004cc8 <TIM_Base_SetConfig+0x138>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ccc <TIM_Base_SetConfig+0x13c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d017      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <TIM_Base_SetConfig+0x140>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cd4 <TIM_Base_SetConfig+0x144>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd8 <TIM_Base_SetConfig+0x148>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004cdc <TIM_Base_SetConfig+0x14c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce0 <TIM_Base_SetConfig+0x150>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	@ (8004ce4 <TIM_Base_SetConfig+0x154>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a10      	ldr	r2, [pc, #64]	@ (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0xf8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a12      	ldr	r2, [pc, #72]	@ (8004ccc <TIM_Base_SetConfig+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	611a      	str	r2, [r3, #16]
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40001800 	.word	0x40001800
 8004ce0:	40001c00 	.word	0x40001c00
 8004ce4:	40002000 	.word	0x40002000

08004ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d10:	b084      	sub	sp, #16
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	f107 001c 	add.w	r0, r7, #28
 8004d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d123      	bne.n	8004d72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d105      	bne.n	8004d66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 fadc 	bl	8006324 <USB_CoreReset>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e01b      	b.n	8004daa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fad0 	bl	8006324 <USB_CoreReset>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d9c:	e005      	b.n	8004daa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004daa:	7fbb      	ldrb	r3, [r7, #30]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10b      	bne.n	8004dc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f043 0206 	orr.w	r2, r3, #6
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr

08004dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d165      	bne.n	8004eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a41      	ldr	r2, [pc, #260]	@ (8004ef4 <USB_SetTurnaroundTime+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d906      	bls.n	8004e02 <USB_SetTurnaroundTime+0x2a>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a40      	ldr	r2, [pc, #256]	@ (8004ef8 <USB_SetTurnaroundTime+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d202      	bcs.n	8004e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dfc:	230f      	movs	r3, #15
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e062      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef8 <USB_SetTurnaroundTime+0x120>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d306      	bcc.n	8004e18 <USB_SetTurnaroundTime+0x40>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004efc <USB_SetTurnaroundTime+0x124>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d202      	bcs.n	8004e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e12:	230e      	movs	r3, #14
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e057      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a38      	ldr	r2, [pc, #224]	@ (8004efc <USB_SetTurnaroundTime+0x124>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d306      	bcc.n	8004e2e <USB_SetTurnaroundTime+0x56>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a37      	ldr	r2, [pc, #220]	@ (8004f00 <USB_SetTurnaroundTime+0x128>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d202      	bcs.n	8004e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e28:	230d      	movs	r3, #13
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e04c      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a33      	ldr	r2, [pc, #204]	@ (8004f00 <USB_SetTurnaroundTime+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d306      	bcc.n	8004e44 <USB_SetTurnaroundTime+0x6c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a32      	ldr	r2, [pc, #200]	@ (8004f04 <USB_SetTurnaroundTime+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d802      	bhi.n	8004e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e3e:	230c      	movs	r3, #12
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e041      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a2f      	ldr	r2, [pc, #188]	@ (8004f04 <USB_SetTurnaroundTime+0x12c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d906      	bls.n	8004e5a <USB_SetTurnaroundTime+0x82>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f08 <USB_SetTurnaroundTime+0x130>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d802      	bhi.n	8004e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e54:	230b      	movs	r3, #11
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e036      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f08 <USB_SetTurnaroundTime+0x130>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d906      	bls.n	8004e70 <USB_SetTurnaroundTime+0x98>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a29      	ldr	r2, [pc, #164]	@ (8004f0c <USB_SetTurnaroundTime+0x134>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e6a:	230a      	movs	r3, #10
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e02b      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a26      	ldr	r2, [pc, #152]	@ (8004f0c <USB_SetTurnaroundTime+0x134>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d906      	bls.n	8004e86 <USB_SetTurnaroundTime+0xae>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a25      	ldr	r2, [pc, #148]	@ (8004f10 <USB_SetTurnaroundTime+0x138>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d202      	bcs.n	8004e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e80:	2309      	movs	r3, #9
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e020      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <USB_SetTurnaroundTime+0x138>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d306      	bcc.n	8004e9c <USB_SetTurnaroundTime+0xc4>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <USB_SetTurnaroundTime+0x13c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d802      	bhi.n	8004e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e96:	2308      	movs	r3, #8
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e015      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <USB_SetTurnaroundTime+0x13c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d906      	bls.n	8004eb2 <USB_SetTurnaroundTime+0xda>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <USB_SetTurnaroundTime+0x140>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d202      	bcs.n	8004eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004eac:	2307      	movs	r3, #7
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e00a      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004eb2:	2306      	movs	r3, #6
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e007      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ebe:	2309      	movs	r3, #9
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e001      	b.n	8004ec8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ec4:	2309      	movs	r3, #9
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	029b      	lsls	r3, r3, #10
 8004edc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	00d8acbf 	.word	0x00d8acbf
 8004ef8:	00e4e1c0 	.word	0x00e4e1c0
 8004efc:	00f42400 	.word	0x00f42400
 8004f00:	01067380 	.word	0x01067380
 8004f04:	011a499f 	.word	0x011a499f
 8004f08:	01312cff 	.word	0x01312cff
 8004f0c:	014ca43f 	.word	0x014ca43f
 8004f10:	016e3600 	.word	0x016e3600
 8004f14:	01a6ab1f 	.word	0x01a6ab1f
 8004f18:	01e84800 	.word	0x01e84800

08004f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d115      	bne.n	8004fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f8e:	200a      	movs	r0, #10
 8004f90:	f7fb fe9a 	bl	8000cc8 <HAL_Delay>
      ms += 10U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	330a      	adds	r3, #10
 8004f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 f933 	bl	8006206 <USB_GetMode>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d01e      	beq.n	8004fe4 <USB_SetCurrentMode+0x84>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004faa:	d9f0      	bls.n	8004f8e <USB_SetCurrentMode+0x2e>
 8004fac:	e01a      	b.n	8004fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d115      	bne.n	8004fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fc0:	200a      	movs	r0, #10
 8004fc2:	f7fb fe81 	bl	8000cc8 <HAL_Delay>
      ms += 10U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	330a      	adds	r3, #10
 8004fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 f91a 	bl	8006206 <USB_GetMode>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USB_SetCurrentMode+0x84>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fdc:	d9f0      	bls.n	8004fc0 <USB_SetCurrentMode+0x60>
 8004fde:	e001      	b.n	8004fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e005      	b.n	8004ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fe8:	d101      	bne.n	8004fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b086      	sub	sp, #24
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e009      	b.n	800502c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3340      	adds	r3, #64	@ 0x40
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	2200      	movs	r2, #0
 8005024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3301      	adds	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b0e      	cmp	r3, #14
 8005030:	d9f2      	bls.n	8005018 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005032:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11c      	bne.n	8005074 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e005      	b.n	8005080 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800508c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10d      	bne.n	80050b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800509c:	2100      	movs	r1, #0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f968 	bl	8005374 <USB_SetDevSpeed>
 80050a4:	e008      	b.n	80050b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050a6:	2101      	movs	r1, #1
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f963 	bl	8005374 <USB_SetDevSpeed>
 80050ae:	e003      	b.n	80050b8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b0:	2103      	movs	r1, #3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f95e 	bl	8005374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050b8:	2110      	movs	r1, #16
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8fa 	bl	80052b4 <USB_FlushTxFifo>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f924 	bl	8005318 <USB_FlushRxFifo>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e0:	461a      	mov	r2, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ec:	461a      	mov	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	461a      	mov	r2, r3
 80050fa:	2300      	movs	r3, #0
 80050fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e043      	b.n	800518c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800511a:	d118      	bne.n	800514e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e013      	b.n	8005160 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e008      	b.n	8005160 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515a:	461a      	mov	r2, r3
 800515c:	2300      	movs	r3, #0
 800515e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3301      	adds	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005190:	461a      	mov	r2, r3
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4293      	cmp	r3, r2
 8005196:	d3b5      	bcc.n	8005104 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	e043      	b.n	8005226 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051b4:	d118      	bne.n	80051e8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e013      	b.n	80051fa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e008      	b.n	80051fa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800521e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3301      	adds	r3, #1
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800522a:	461a      	mov	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4293      	cmp	r3, r2
 8005230:	d3b5      	bcc.n	800519e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005244:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005252:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005254:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005258:	2b00      	cmp	r3, #0
 800525a:	d105      	bne.n	8005268 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <USB_DevInit+0x2b8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005274:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f043 0208 	orr.w	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005288:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	f043 0304 	orr.w	r3, r3, #4
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ac:	b004      	add	sp, #16
 80052ae:	4770      	bx	lr
 80052b0:	803c3800 	.word	0x803c3800

080052b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ce:	d901      	bls.n	80052d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e01b      	b.n	800530c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	daf2      	bge.n	80052c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	019b      	lsls	r3, r3, #6
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f8:	d901      	bls.n	80052fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e006      	b.n	800530c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d0f0      	beq.n	80052ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005330:	d901      	bls.n	8005336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e018      	b.n	8005368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	daf2      	bge.n	8005324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2210      	movs	r2, #16
 8005346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005354:	d901      	bls.n	800535a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e006      	b.n	8005368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b10      	cmp	r3, #16
 8005364:	d0f0      	beq.n	8005348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0306 	and.w	r3, r3, #6
 80053be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
 80053ca:	e00a      	b.n	80053e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d002      	beq.n	80053d8 <USB_GetDevSpeed+0x32>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d102      	bne.n	80053de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053d8:	2302      	movs	r3, #2
 80053da:	75fb      	strb	r3, [r7, #23]
 80053dc:	e001      	b.n	80053e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053de:	230f      	movs	r3, #15
 80053e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d13a      	bne.n	8005482 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	2101      	movs	r1, #1
 800541e:	fa01 f303 	lsl.w	r3, r1, r3
 8005422:	b29b      	uxth	r3, r3
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800542a:	4313      	orrs	r3, r2
 800542c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d155      	bne.n	80054f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	791b      	ldrb	r3, [r3, #4]
 800545e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005460:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	059b      	lsls	r3, r3, #22
 8005466:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005468:	4313      	orrs	r3, r2
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e036      	b.n	80054f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	2101      	movs	r1, #1
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	68f9      	ldr	r1, [r7, #12]
 800549c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d11a      	bne.n	80054f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	791b      	ldrb	r3, [r3, #4]
 80054d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054d6:	430b      	orrs	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d161      	bne.n	80055e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005532:	d11f      	bne.n	8005574 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005552:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	b29b      	uxth	r3, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005594:	4013      	ands	r3, r2
 8005596:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b8:	4013      	ands	r3, r2
 80055ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	0159      	lsls	r1, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	440b      	add	r3, r1
 80055d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d6:	4619      	mov	r1, r3
 80055d8:	4b35      	ldr	r3, [pc, #212]	@ (80056b0 <USB_DeactivateEndpoint+0x1b0>)
 80055da:	4013      	ands	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
 80055de:	e060      	b.n	80056a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f6:	d11f      	bne.n	8005638 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005612:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005616:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005632:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800563e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	2101      	movs	r1, #1
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	43db      	mvns	r3, r3
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005658:	4013      	ands	r3, r2
 800565a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	43db      	mvns	r3, r3
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800567c:	4013      	ands	r3, r2
 800567e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	440b      	add	r3, r1
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	4619      	mov	r1, r3
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <USB_DeactivateEndpoint+0x1b4>)
 800569e:	4013      	ands	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	ec337800 	.word	0xec337800
 80056b4:	eff37800 	.word	0xeff37800

080056b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	785b      	ldrb	r3, [r3, #1]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	f040 817a 	bne.w	80059ce <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d132      	bne.n	8005748 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005700:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005740:	0cdb      	lsrs	r3, r3, #19
 8005742:	04db      	lsls	r3, r3, #19
 8005744:	6113      	str	r3, [r2, #16]
 8005746:	e092      	b.n	800586e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005762:	0cdb      	lsrs	r3, r3, #19
 8005764:	04db      	lsls	r3, r3, #19
 8005766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005782:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005786:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800578a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11a      	bne.n	80057c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	d903      	bls.n	80057a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e01b      	b.n	8005800 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6919      	ldr	r1, [r3, #16]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	440b      	add	r3, r1
 80057e0:	1e59      	subs	r1, r3, #1
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057ec:	4ba2      	ldr	r3, [pc, #648]	@ (8005a78 <USB_EPStartXfer+0x3c0>)
 80057ee:	400b      	ands	r3, r1
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	0148      	lsls	r0, r1, #5
 80057f4:	69f9      	ldr	r1, [r7, #28]
 80057f6:	4401      	add	r1, r0
 80057f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057fc:	4313      	orrs	r3, r2
 80057fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005816:	69b9      	ldr	r1, [r7, #24]
 8005818:	0148      	lsls	r0, r1, #5
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	4401      	add	r1, r0
 800581e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005822:	4313      	orrs	r3, r2
 8005824:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d11f      	bne.n	800586e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005848:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800584c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800586c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d14b      	bne.n	800590c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	791b      	ldrb	r3, [r3, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d128      	bne.n	80058ea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d110      	bne.n	80058ca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e00f      	b.n	80058ea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005904:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e165      	b.n	8005bd8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005926:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800592a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	791b      	ldrb	r3, [r3, #4]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d015      	beq.n	8005960 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 814d 	beq.w	8005bd8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	69f9      	ldr	r1, [r7, #28]
 8005956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800595a:	4313      	orrs	r3, r2
 800595c:	634b      	str	r3, [r1, #52]	@ 0x34
 800595e:	e13b      	b.n	8005bd8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d110      	bne.n	8005992 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800598a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e00f      	b.n	80059b2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	b298      	uxth	r0, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f9b8 	bl	8005d3c <USB_WritePacket>
 80059cc:	e104      	b.n	8005bd8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e8:	0cdb      	lsrs	r3, r3, #19
 80059ea:	04db      	lsls	r3, r3, #19
 80059ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a08:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a0c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a10:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d131      	bne.n	8005a7c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	0148      	lsls	r0, r1, #5
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	4401      	add	r1, r0
 8005a4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a74:	6113      	str	r3, [r2, #16]
 8005a76:	e061      	b.n	8005b3c <USB_EPStartXfer+0x484>
 8005a78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d123      	bne.n	8005acc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9a:	69b9      	ldr	r1, [r7, #24]
 8005a9c:	0148      	lsls	r0, r1, #5
 8005a9e:	69f9      	ldr	r1, [r7, #28]
 8005aa0:	4401      	add	r1, r0
 8005aa2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ac8:	6113      	str	r3, [r2, #16]
 8005aca:	e037      	b.n	8005b3c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	8afa      	ldrh	r2, [r7, #22]
 8005ae8:	fb03 f202 	mul.w	r2, r3, r2
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	8afb      	ldrh	r3, [r7, #22]
 8005b00:	04d9      	lsls	r1, r3, #19
 8005b02:	4b38      	ldr	r3, [pc, #224]	@ (8005be4 <USB_EPStartXfer+0x52c>)
 8005b04:	400b      	ands	r3, r1
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	0148      	lsls	r0, r1, #5
 8005b0a:	69f9      	ldr	r1, [r7, #28]
 8005b0c:	4401      	add	r1, r0
 8005b0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b12:	4313      	orrs	r3, r2
 8005b14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	69b9      	ldr	r1, [r7, #24]
 8005b2e:	0148      	lsls	r0, r1, #5
 8005b30:	69f9      	ldr	r1, [r7, #28]
 8005b32:	4401      	add	r1, r0
 8005b34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10d      	bne.n	8005b5e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	68d9      	ldr	r1, [r3, #12]
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	791b      	ldrb	r3, [r3, #4]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d128      	bne.n	8005bb8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d110      	bne.n	8005b98 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e00f      	b.n	8005bb8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	1ff80000 	.word	0x1ff80000

08005be8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d14a      	bne.n	8005c9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c1e:	f040 8086 	bne.w	8005d2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d902      	bls.n	8005c80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7e:	e056      	b.n	8005d2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c98:	d0e7      	beq.n	8005c6a <USB_EPStopXfer+0x82>
 8005c9a:	e048      	b.n	8005d2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb4:	d13b      	bne.n	8005d2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d902      	bls.n	8005d14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
          break;
 8005d12:	e00c      	b.n	8005d2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d2c:	d0e7      	beq.n	8005cfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b089      	sub	sp, #36	@ 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	71fb      	strb	r3, [r7, #7]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d123      	bne.n	8005daa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d62:	88bb      	ldrh	r3, [r7, #4]
 8005d64:	3303      	adds	r3, #3
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e018      	b.n	8005da2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	031a      	lsls	r2, r3, #12
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3e2      	bcc.n	8005d70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3724      	adds	r7, #36	@ 0x24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b08b      	sub	sp, #44	@ 0x2c
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	e014      	b.n	8005e0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	3301      	adds	r3, #1
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	3301      	adds	r3, #1
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	3301      	adds	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	3301      	adds	r3, #1
 8005e06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	6a3a      	ldr	r2, [r7, #32]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d3e6      	bcc.n	8005de4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e16:	8bfb      	ldrh	r3, [r7, #30]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01e      	beq.n	8005e5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e26:	461a      	mov	r2, r3
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	701a      	strb	r2, [r3, #0]
      i++;
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	3301      	adds	r3, #1
 8005e46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e4e:	8bfb      	ldrh	r3, [r7, #30]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e54:	8bfb      	ldrh	r3, [r7, #30]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ea      	bne.n	8005e30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	372c      	adds	r7, #44	@ 0x2c
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d12c      	bne.n	8005ede <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	db12      	blt.n	8005ebc <USB_EPSetStall+0x54>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00f      	beq.n	8005ebc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005eba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	e02b      	b.n	8005f36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	db12      	blt.n	8005f16 <USB_EPSetStall+0xae>
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d128      	bne.n	8005fb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	791b      	ldrb	r3, [r3, #4]
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d003      	beq.n	8005f90 <USB_EPClearStall+0x4c>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	791b      	ldrb	r3, [r3, #4]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d138      	bne.n	8006002 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e027      	b.n	8006002 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fcc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d003      	beq.n	8005fe2 <USB_EPClearStall+0x9e>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	791b      	ldrb	r3, [r3, #4]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d10f      	bne.n	8006002 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006000:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800602e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006032:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800604a:	4313      	orrs	r3, r2
 800604c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800608a:	f023 0302 	bic.w	r3, r3, #2
 800608e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4013      	ands	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	0c1b      	lsrs	r3, r3, #16
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4013      	ands	r3, r2
 800615c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	b29b      	uxth	r3, r3
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	4013      	ands	r3, r2
 800619a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800619c:	68bb      	ldr	r3, [r7, #8]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fa22 f303 	lsr.w	r3, r2, r3
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4013      	ands	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061f8:	68bb      	ldr	r3, [r7, #8]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0301 	and.w	r3, r3, #1
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800623c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006258:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	460b      	mov	r3, r1
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	333c      	adds	r3, #60	@ 0x3c
 800627e:	3304      	adds	r3, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4a26      	ldr	r2, [pc, #152]	@ (8006320 <USB_EP0_OutStart+0xb8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d90a      	bls.n	80062a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800629c:	d101      	bne.n	80062a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e037      	b.n	8006312 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d0:	f043 0318 	orr.w	r3, r3, #24
 80062d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80062e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10f      	bne.n	8006310 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800630a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800630e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	4f54300a 	.word	0x4f54300a

08006324 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800633c:	d901      	bls.n	8006342 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e01b      	b.n	800637a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	daf2      	bge.n	8006330 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f043 0201 	orr.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006366:	d901      	bls.n	800636c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e006      	b.n	800637a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d0f0      	beq.n	800635a <USB_CoreReset+0x36>

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006394:	2018      	movs	r0, #24
 8006396:	f002 fbdd 	bl	8008b54 <USBD_static_malloc>
 800639a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	32b0      	adds	r2, #176	@ 0xb0
 80063ac:	2100      	movs	r1, #0
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063b2:	2302      	movs	r3, #2
 80063b4:	e08a      	b.n	80064cc <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	32b0      	adds	r2, #176	@ 0xb0
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	@ 0xb0
 80063d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	7c1b      	ldrb	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d11b      	bne.n	800641a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063e2:	4b3c      	ldr	r3, [pc, #240]	@ (80064d4 <USBD_CUSTOM_HID_Init+0x14c>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 020f 	and.w	r2, r3, #15
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	3326      	adds	r3, #38	@ 0x26
 80063f8:	2205      	movs	r2, #5
 80063fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80063fc:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <USBD_CUSTOM_HID_Init+0x150>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 020f 	and.w	r2, r3, #15
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006414:	2205      	movs	r2, #5
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	e01a      	b.n	8006450 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800641a:	4b2e      	ldr	r3, [pc, #184]	@ (80064d4 <USBD_CUSTOM_HID_Init+0x14c>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 020f 	and.w	r2, r3, #15
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3326      	adds	r3, #38	@ 0x26
 8006430:	2201      	movs	r2, #1
 8006432:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006434:	4b28      	ldr	r3, [pc, #160]	@ (80064d8 <USBD_CUSTOM_HID_Init+0x150>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800644c:	2201      	movs	r2, #1
 800644e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006450:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006452:	7819      	ldrb	r1, [r3, #0]
 8006454:	2310      	movs	r3, #16
 8006456:	2203      	movs	r2, #3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f002 fa1c 	bl	8008896 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800645e:	4b1d      	ldr	r3, [pc, #116]	@ (80064d4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	3324      	adds	r3, #36	@ 0x24
 8006474:	2201      	movs	r2, #1
 8006476:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006478:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <USBD_CUSTOM_HID_Init+0x150>)
 800647a:	7819      	ldrb	r1, [r3, #0]
 800647c:	2310      	movs	r3, #16
 800647e:	2203      	movs	r2, #3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 fa08 	bl	8008896 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006486:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <USBD_CUSTOM_HID_Init+0x150>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800649e:	2201      	movs	r2, #1
 80064a0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	33b0      	adds	r3, #176	@ 0xb0
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <USBD_CUSTOM_HID_Init+0x150>)
 80064be:	7819      	ldrb	r1, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	2302      	movs	r3, #2
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f002 fad5 	bl	8008a74 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20000086 	.word	0x20000086
 80064d8:	20000087 	.word	0x20000087

080064dc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80064e8:	4b37      	ldr	r3, [pc, #220]	@ (80065c8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f002 f9f7 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80064f4:	4b34      	ldr	r3, [pc, #208]	@ (80065c8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 020f 	and.w	r2, r3, #15
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	3324      	adds	r3, #36	@ 0x24
 800650a:	2200      	movs	r2, #0
 800650c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800650e:	4b2e      	ldr	r3, [pc, #184]	@ (80065c8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3326      	adds	r3, #38	@ 0x26
 8006524:	2200      	movs	r2, #0
 8006526:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006528:	4b28      	ldr	r3, [pc, #160]	@ (80065cc <USBD_CUSTOM_HID_DeInit+0xf0>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f002 f9d7 	bl	80088e2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006534:	4b25      	ldr	r3, [pc, #148]	@ (80065cc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 020f 	and.w	r2, r3, #15
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800654c:	2200      	movs	r2, #0
 800654e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006550:	4b1e      	ldr	r3, [pc, #120]	@ (80065cc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006568:	2200      	movs	r2, #0
 800656a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	32b0      	adds	r2, #176	@ 0xb0
 8006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01f      	beq.n	80065be <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	33b0      	adds	r3, #176	@ 0xb0
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	32b0      	adds	r2, #176	@ 0xb0
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 fae5 	bl	8008b70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	32b0      	adds	r2, #176	@ 0xb0
 80065b0:	2100      	movs	r1, #0
 80065b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000086 	.word	0x20000086
 80065cc:	20000087 	.word	0x20000087

080065d0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	32b0      	adds	r2, #176	@ 0xb0
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	83fb      	strh	r3, [r7, #30]
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006600:	2303      	movs	r3, #3
 8006602:	e118      	b.n	8006836 <USBD_CUSTOM_HID_Setup+0x266>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800660c:	2b00      	cmp	r3, #0
 800660e:	d077      	beq.n	8006700 <USBD_CUSTOM_HID_Setup+0x130>
 8006610:	2b20      	cmp	r3, #32
 8006612:	f040 8108 	bne.w	8006826 <USBD_CUSTOM_HID_Setup+0x256>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	3b01      	subs	r3, #1
 800661c:	2b0a      	cmp	r3, #10
 800661e:	d866      	bhi.n	80066ee <USBD_CUSTOM_HID_Setup+0x11e>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <USBD_CUSTOM_HID_Setup+0x58>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	080066b3 	.word	0x080066b3
 800662c:	08006685 	.word	0x08006685
 8006630:	08006663 	.word	0x08006663
 8006634:	080066ef 	.word	0x080066ef
 8006638:	080066ef 	.word	0x080066ef
 800663c:	080066ef 	.word	0x080066ef
 8006640:	080066ef 	.word	0x080066ef
 8006644:	080066ef 	.word	0x080066ef
 8006648:	08006695 	.word	0x08006695
 800664c:	08006673 	.word	0x08006673
 8006650:	08006655 	.word	0x08006655
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	885b      	ldrh	r3, [r3, #2]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	605a      	str	r2, [r3, #4]
          break;
 8006660:	e04d      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3304      	adds	r3, #4
 8006666:	2201      	movs	r2, #1
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fd12 	bl	8008094 <USBD_CtlSendData>
          break;
 8006670:	e045      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	885b      	ldrh	r3, [r3, #2]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	b29b      	uxth	r3, r3
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	609a      	str	r2, [r3, #8]
          break;
 8006682:	e03c      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	3308      	adds	r3, #8
 8006688:	2201      	movs	r2, #1
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fd01 	bl	8008094 <USBD_CtlSendData>
          break;
 8006692:	e034      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2201      	movs	r2, #1
 8006698:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800669a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	88db      	ldrh	r3, [r3, #6]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	bf28      	it	cs
 80066a4:	2302      	movcs	r3, #2
 80066a6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80066a8:	461a      	mov	r2, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fd1e 	bl	80080ec <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80066b0:	e025      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>
        /*
         * Implementation of Contact Count Maximum and Device Certification Status feature reports as required by Windows
         * For more information, see https://learn.microsoft.com/en-us/windows-hardware/design/component-guidelines/touchscreen-required-hid-top-level-collections
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        	int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 80066b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066b6:	60fb      	str	r3, [r7, #12]
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_RES_MULTIPLIER))
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	885b      	ldrh	r3, [r3, #2]
 80066bc:	461a      	mov	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3302      	adds	r3, #2
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d11a      	bne.n	80066fc <USBD_CUSTOM_HID_Setup+0x12c>
        	{
        		ResMultiplierReport r = {0};
 80066c6:	2300      	movs	r3, #0
 80066c8:	813b      	strh	r3, [r7, #8]
        		r.report_ID = REPORTID_RES_MULTIPLIER;
 80066ca:	2302      	movs	r3, #2
 80066cc:	723b      	strb	r3, [r7, #8]
        		r.pan_resolution = PR_REPORTED;
 80066ce:	7a7b      	ldrb	r3, [r7, #9]
 80066d0:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80066d4:	727b      	strb	r3, [r7, #9]
        		r.scroll_resolution = SR_REPORTED;
 80066d6:	7a7b      	ldrb	r3, [r7, #9]
 80066d8:	f043 030f 	orr.w	r3, r3, #15
 80066dc:	727b      	strb	r3, [r7, #9]
        		USBD_CtlSendData(pdev, (uint8_t*)&r, sizeof (r));
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	2202      	movs	r2, #2
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 fcd4 	bl	8008094 <USBD_CtlSendData>
        	}
        	break;
 80066ec:	e006      	b.n	80066fc <USBD_CUSTOM_HID_Setup+0x12c>
        default:
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fc5e 	bl	8007fb2 <USBD_CtlError>
          ret = USBD_FAIL;
 80066f6:	2303      	movs	r3, #3
 80066f8:	75fb      	strb	r3, [r7, #23]
          break;
 80066fa:	e000      	b.n	80066fe <USBD_CUSTOM_HID_Setup+0x12e>
        	break;
 80066fc:	bf00      	nop
      }
      break;
 80066fe:	e099      	b.n	8006834 <USBD_CUSTOM_HID_Setup+0x264>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b0b      	cmp	r3, #11
 8006706:	f200 8085 	bhi.w	8006814 <USBD_CUSTOM_HID_Setup+0x244>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <USBD_CUSTOM_HID_Setup+0x140>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006741 	.word	0x08006741
 8006714:	08006823 	.word	0x08006823
 8006718:	08006815 	.word	0x08006815
 800671c:	08006815 	.word	0x08006815
 8006720:	08006815 	.word	0x08006815
 8006724:	08006815 	.word	0x08006815
 8006728:	0800676b 	.word	0x0800676b
 800672c:	08006815 	.word	0x08006815
 8006730:	08006815 	.word	0x08006815
 8006734:	08006815 	.word	0x08006815
 8006738:	080067c3 	.word	0x080067c3
 800673c:	080067ed 	.word	0x080067ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d107      	bne.n	800675c <USBD_CUSTOM_HID_Setup+0x18c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800674c:	f107 030a 	add.w	r3, r7, #10
 8006750:	2202      	movs	r2, #2
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 fc9d 	bl	8008094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800675a:	e063      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fc27 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	75fb      	strb	r3, [r7, #23]
          break;
 8006768:	e05c      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b22      	cmp	r3, #34	@ 0x22
 8006774:	d110      	bne.n	8006798 <USBD_CUSTOM_HID_Setup+0x1c8>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	2b84      	cmp	r3, #132	@ 0x84
 800677c:	bf28      	it	cs
 800677e:	2384      	movcs	r3, #132	@ 0x84
 8006780:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	33b0      	adds	r3, #176	@ 0xb0
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	e00d      	b.n	80067b4 <USBD_CUSTOM_HID_Setup+0x1e4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	885b      	ldrh	r3, [r3, #2]
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b21      	cmp	r3, #33	@ 0x21
 80067a2:	d107      	bne.n	80067b4 <USBD_CUSTOM_HID_Setup+0x1e4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80067a4:	4b26      	ldr	r3, [pc, #152]	@ (8006840 <USBD_CUSTOM_HID_Setup+0x270>)
 80067a6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	88db      	ldrh	r3, [r3, #6]
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	bf28      	it	cs
 80067b0:	2309      	movcs	r3, #9
 80067b2:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80067b4:	8bfb      	ldrh	r3, [r7, #30]
 80067b6:	461a      	mov	r2, r3
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fc6a 	bl	8008094 <USBD_CtlSendData>
          break;
 80067c0:	e030      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d107      	bne.n	80067de <USBD_CUSTOM_HID_Setup+0x20e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	330c      	adds	r3, #12
 80067d2:	2201      	movs	r2, #1
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fc5c 	bl	8008094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067dc:	e022      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fbe6 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067e6:	2303      	movs	r3, #3
 80067e8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ea:	e01b      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d106      	bne.n	8006806 <USBD_CUSTOM_HID_Setup+0x236>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	885b      	ldrh	r3, [r3, #2]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006804:	e00e      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fbd2 	bl	8007fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800680e:	2303      	movs	r3, #3
 8006810:	75fb      	strb	r3, [r7, #23]
          break;
 8006812:	e007      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fbcb 	bl	8007fb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	75fb      	strb	r3, [r7, #23]
          break;
 8006820:	e000      	b.n	8006824 <USBD_CUSTOM_HID_Setup+0x254>
          break;
 8006822:	bf00      	nop
      }
      break;
 8006824:	e006      	b.n	8006834 <USBD_CUSTOM_HID_Setup+0x264>

    default:
      USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 fbc2 	bl	8007fb2 <USBD_CtlError>
      ret = USBD_FAIL;
 800682e:	2303      	movs	r3, #3
 8006830:	75fb      	strb	r3, [r7, #23]
      break;
 8006832:	bf00      	nop
  }
  return (uint8_t)ret;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000070 	.word	0x20000070

08006844 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	32b0      	adds	r2, #176	@ 0xb0
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e017      	b.n	800689c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b03      	cmp	r3, #3
 8006876:	d110      	bne.n	800689a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	7d1b      	ldrb	r3, [r3, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2201      	movs	r2, #1
 8006884:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006886:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006888:	7819      	ldrb	r1, [r3, #0]
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f002 f8cf 	bl	8008a32 <USBD_LL_Transmit>
 8006894:	e001      	b.n	800689a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000086 	.word	0x20000086

080068a8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80068b0:	2181      	movs	r1, #129	@ 0x81
 80068b2:	4815      	ldr	r0, [pc, #84]	@ (8006908 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80068b4:	f000 fd1d 	bl	80072f2 <USBD_GetEpDesc>
 80068b8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80068ba:	2101      	movs	r1, #1
 80068bc:	4812      	ldr	r0, [pc, #72]	@ (8006908 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80068be:	f000 fd18 	bl	80072f2 <USBD_GetEpDesc>
 80068c2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f042 0210 	orr.w	r2, r2, #16
 80068d2:	711a      	strb	r2, [r3, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d009      	beq.n	80068f8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f042 0210 	orr.w	r2, r2, #16
 80068ec:	711a      	strb	r2, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2201      	movs	r2, #1
 80068f6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2229      	movs	r2, #41	@ 0x29
 80068fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80068fe:	4b02      	ldr	r3, [pc, #8]	@ (8006908 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000044 	.word	0x20000044

0800690c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006914:	2181      	movs	r1, #129	@ 0x81
 8006916:	4815      	ldr	r0, [pc, #84]	@ (800696c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006918:	f000 fceb 	bl	80072f2 <USBD_GetEpDesc>
 800691c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800691e:	2101      	movs	r1, #1
 8006920:	4812      	ldr	r0, [pc, #72]	@ (800696c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006922:	f000 fce6 	bl	80072f2 <USBD_GetEpDesc>
 8006926:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f042 0210 	orr.w	r2, r2, #16
 8006936:	711a      	strb	r2, [r3, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2205      	movs	r2, #5
 8006940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	f042 0210 	orr.w	r2, r2, #16
 8006950:	711a      	strb	r2, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2205      	movs	r2, #5
 800695a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2229      	movs	r2, #41	@ 0x29
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006962:	4b02      	ldr	r3, [pc, #8]	@ (800696c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000044 	.word	0x20000044

08006970 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006978:	2181      	movs	r1, #129	@ 0x81
 800697a:	4815      	ldr	r0, [pc, #84]	@ (80069d0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800697c:	f000 fcb9 	bl	80072f2 <USBD_GetEpDesc>
 8006980:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006982:	2101      	movs	r1, #1
 8006984:	4812      	ldr	r0, [pc, #72]	@ (80069d0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006986:	f000 fcb4 	bl	80072f2 <USBD_GetEpDesc>
 800698a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f042 0210 	orr.w	r2, r2, #16
 800699a:	711a      	strb	r2, [r3, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f042 0210 	orr.w	r2, r2, #16
 80069b4:	711a      	strb	r2, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2201      	movs	r2, #1
 80069be:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2229      	movs	r2, #41	@ 0x29
 80069c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80069c6:	4b02      	ldr	r3, [pc, #8]	@ (80069d0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000044 	.word	0x20000044

080069d4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	32b0      	adds	r2, #176	@ 0xb0
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	2200      	movs	r2, #0
 80069f0:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	32b0      	adds	r2, #176	@ 0xb0
 8006a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e017      	b.n	8006a52 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	32b0      	adds	r2, #176	@ 0xb0
 8006a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a30:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	33b0      	adds	r3, #176	@ 0xb0
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	7810      	ldrb	r0, [r2, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	7852      	ldrb	r2, [r2, #1]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32b0      	adds	r2, #176	@ 0xb0
 8006a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	32b0      	adds	r2, #176	@ 0xb0
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006a8a:	4b06      	ldr	r3, [pc, #24]	@ (8006aa4 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006a8c:	7819      	ldrb	r1, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	2302      	movs	r3, #2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 ffee 	bl	8008a74 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000087 	.word	0x20000087

08006aa8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	32b0      	adds	r2, #176	@ 0xb0
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e016      	b.n	8006af8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d111      	bne.n	8006af6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	33b0      	adds	r3, #176	@ 0xb0
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	7810      	ldrb	r0, [r2, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	7852      	ldrb	r2, [r2, #1]
 8006aec:	4611      	mov	r1, r2
 8006aee:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	@ (8006b1c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	2000007c 	.word	0x2000007c

08006b20 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e009      	b.n	8006b48 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	33b0      	adds	r3, #176	@ 0xb0
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e01f      	b.n	8006bac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	79fa      	ldrb	r2, [r7, #7]
 8006b9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 fe11 	bl	80087c8 <USBD_LL_Init>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e025      	b.n	8006c18 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	32ae      	adds	r2, #174	@ 0xae
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	32ae      	adds	r2, #174	@ 0xae
 8006bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	f107 020e 	add.w	r2, r7, #14
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	4602      	mov	r2, r0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fe19 	bl	8008860 <USBD_LL_Start>
 8006c2e:	4603      	mov	r3, r0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d009      	beq.n	8006c7c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	4611      	mov	r1, r2
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f001 f936 	bl	8007f3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d01a      	beq.n	8006d2c <USBD_LL_SetupStage+0x72>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d822      	bhi.n	8006d40 <USBD_LL_SetupStage+0x86>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <USBD_LL_SetupStage+0x4a>
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d00a      	beq.n	8006d18 <USBD_LL_SetupStage+0x5e>
 8006d02:	e01d      	b.n	8006d40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb63 	bl	80073d8 <USBD_StdDevReq>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
      break;
 8006d16:	e020      	b.n	8006d5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fbcb 	bl	80074bc <USBD_StdItfReq>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2a:	e016      	b.n	8006d5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fc2d 	bl	8007594 <USBD_StdEPReq>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3e:	e00c      	b.n	8006d5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fde6 	bl	8008920 <USBD_LL_StallEP>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
      break;
 8006d58:	bf00      	nop
  }

  return ret;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d16e      	bne.n	8006e5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f040 8098 	bne.w	8006ec0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d913      	bls.n	8006dc4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bf28      	it	cs
 8006db6:	4613      	movcs	r3, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 f9b2 	bl	8008126 <USBD_CtlContinueRx>
 8006dc2:	e07d      	b.n	8006ec0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d014      	beq.n	8006dfc <USBD_LL_DataOutStage+0x98>
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d81d      	bhi.n	8006e12 <USBD_LL_DataOutStage+0xae>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <USBD_LL_DataOutStage+0x7c>
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d003      	beq.n	8006de6 <USBD_LL_DataOutStage+0x82>
 8006dde:	e018      	b.n	8006e12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	75bb      	strb	r3, [r7, #22]
            break;
 8006de4:	e018      	b.n	8006e18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	4619      	mov	r1, r3
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fa64 	bl	80072be <USBD_CoreFindIF>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75bb      	strb	r3, [r7, #22]
            break;
 8006dfa:	e00d      	b.n	8006e18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fa66 	bl	80072d8 <USBD_CoreFindEP>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e10:	e002      	b.n	8006e18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75bb      	strb	r3, [r7, #22]
            break;
 8006e16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e18:	7dbb      	ldrb	r3, [r7, #22]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d119      	bne.n	8006e52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d113      	bne.n	8006e52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e2a:	7dba      	ldrb	r2, [r7, #22]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	32ae      	adds	r2, #174	@ 0xae
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e3a:	7dba      	ldrb	r2, [r7, #22]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e42:	7dba      	ldrb	r2, [r7, #22]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	32ae      	adds	r2, #174	@ 0xae
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f001 f978 	bl	8008148 <USBD_CtlSendStatus>
 8006e58:	e032      	b.n	8006ec0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	4619      	mov	r1, r3
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fa37 	bl	80072d8 <USBD_CoreFindEP>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
 8006e70:	2bff      	cmp	r3, #255	@ 0xff
 8006e72:	d025      	beq.n	8006ec0 <USBD_LL_DataOutStage+0x15c>
 8006e74:	7dbb      	ldrb	r3, [r7, #22]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d122      	bne.n	8006ec0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d117      	bne.n	8006eb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e86:	7dba      	ldrb	r2, [r7, #22]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	32ae      	adds	r2, #174	@ 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00f      	beq.n	8006eb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e96:	7dba      	ldrb	r2, [r7, #22]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e9e:	7dba      	ldrb	r2, [r7, #22]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	32ae      	adds	r2, #174	@ 0xae
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	7afa      	ldrb	r2, [r7, #11]
 8006eac:	4611      	mov	r1, r2
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	e000      	b.n	8006ec2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d16f      	bne.n	8006fbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3314      	adds	r3, #20
 8006ee2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d15a      	bne.n	8006fa4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d914      	bls.n	8006f24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f001 f8da 	bl	80080ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f16:	2300      	movs	r3, #0
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f001 fda9 	bl	8008a74 <USBD_LL_PrepareReceive>
 8006f22:	e03f      	b.n	8006fa4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d11c      	bne.n	8006f6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d316      	bcc.n	8006f6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d20f      	bcs.n	8006f6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f001 f8bb 	bl	80080ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f001 fd86 	bl	8008a74 <USBD_LL_PrepareReceive>
 8006f68:	e01c      	b.n	8006fa4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d10f      	bne.n	8006f96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f96:	2180      	movs	r1, #128	@ 0x80
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f001 fcc1 	bl	8008920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f001 f8e5 	bl	800816e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d03a      	beq.n	8007024 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff fe42 	bl	8006c38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006fbc:	e032      	b.n	8007024 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f985 	bl	80072d8 <USBD_CoreFindEP>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2bff      	cmp	r3, #255	@ 0xff
 8006fd6:	d025      	beq.n	8007024 <USBD_LL_DataInStage+0x15a>
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d122      	bne.n	8007024 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d11c      	bne.n	8007024 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006fea:	7dfa      	ldrb	r2, [r7, #23]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	32ae      	adds	r2, #174	@ 0xae
 8006ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d014      	beq.n	8007024 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ffa:	7dfa      	ldrb	r2, [r7, #23]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007002:	7dfa      	ldrb	r2, [r7, #23]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	32ae      	adds	r2, #174	@ 0xae
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	7afa      	ldrb	r2, [r7, #11]
 8007010:	4611      	mov	r1, r2
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	4798      	blx	r3
 8007016:	4603      	mov	r3, r0
 8007018:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007020:	7dbb      	ldrb	r3, [r7, #22]
 8007022:	e000      	b.n	8007026 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d014      	beq.n	8007094 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00e      	beq.n	8007094 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6852      	ldr	r2, [r2, #4]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	4611      	mov	r1, r2
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007094:	2340      	movs	r3, #64	@ 0x40
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fbfb 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b0:	2340      	movs	r3, #64	@ 0x40
 80070b2:	2200      	movs	r2, #0
 80070b4:	2180      	movs	r1, #128	@ 0x80
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 fbed 	bl	8008896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2240      	movs	r2, #64	@ 0x40
 80070c6:	621a      	str	r2, [r3, #32]

  return ret;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	78fa      	ldrb	r2, [r7, #3]
 80070e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b04      	cmp	r3, #4
 8007104:	d006      	beq.n	8007114 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	b2da      	uxtb	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2204      	movs	r2, #4
 8007118:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b04      	cmp	r3, #4
 800713c:	d106      	bne.n	800714c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007144:	b2da      	uxtb	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b03      	cmp	r3, #3
 800716c:	d110      	bne.n	8007190 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32ae      	adds	r2, #174	@ 0xae
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01c      	b.n	80071f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d115      	bne.n	80071f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32ae      	adds	r2, #174	@ 0xae
 80071e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	4611      	mov	r1, r2
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	32ae      	adds	r2, #174	@ 0xae
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e01c      	b.n	800725a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d115      	bne.n	8007258 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32ae      	adds	r2, #174	@ 0xae
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32ae      	adds	r2, #174	@ 0xae
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	4611      	mov	r1, r2
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6852      	ldr	r2, [r2, #4]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	460b      	mov	r3, r1
 80072c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	b29b      	uxth	r3, r3
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	4293      	cmp	r3, r2
 8007316:	d91f      	bls.n	8007358 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800731e:	e013      	b.n	8007348 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007320:	f107 030a 	add.w	r3, r7, #10
 8007324:	4619      	mov	r1, r3
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f000 f81b 	bl	8007362 <USBD_GetNextDesc>
 800732c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b05      	cmp	r3, #5
 8007334:	d108      	bne.n	8007348 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	789b      	ldrb	r3, [r3, #2]
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	429a      	cmp	r2, r3
 8007342:	d008      	beq.n	8007356 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	885b      	ldrh	r3, [r3, #2]
 800734c:	b29a      	uxth	r2, r3
 800734e:	897b      	ldrh	r3, [r7, #10]
 8007350:	429a      	cmp	r2, r3
 8007352:	d8e5      	bhi.n	8007320 <USBD_GetEpDesc+0x2e>
 8007354:	e000      	b.n	8007358 <USBD_GetEpDesc+0x66>
          break;
 8007356:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007358:	693b      	ldr	r3, [r7, #16]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	7812      	ldrb	r2, [r2, #0]
 8007378:	4413      	add	r3, r2
 800737a:	b29a      	uxth	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4413      	add	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800739a:	b480      	push	{r7}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	3301      	adds	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073b8:	8a3b      	ldrh	r3, [r7, #16]
 80073ba:	021b      	lsls	r3, r3, #8
 80073bc:	b21a      	sxth	r2, r3
 80073be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	b21b      	sxth	r3, r3
 80073c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073c8:	89fb      	ldrh	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d005      	beq.n	80073fe <USBD_StdDevReq+0x26>
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d857      	bhi.n	80074a6 <USBD_StdDevReq+0xce>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <USBD_StdDevReq+0x42>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d153      	bne.n	80074a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	32ae      	adds	r2, #174	@ 0xae
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
      break;
 8007418:	e04a      	b.n	80074b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b09      	cmp	r3, #9
 8007420:	d83b      	bhi.n	800749a <USBD_StdDevReq+0xc2>
 8007422:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <USBD_StdDevReq+0x50>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	0800747d 	.word	0x0800747d
 800742c:	08007491 	.word	0x08007491
 8007430:	0800749b 	.word	0x0800749b
 8007434:	08007487 	.word	0x08007487
 8007438:	0800749b 	.word	0x0800749b
 800743c:	0800745b 	.word	0x0800745b
 8007440:	08007451 	.word	0x08007451
 8007444:	0800749b 	.word	0x0800749b
 8007448:	08007473 	.word	0x08007473
 800744c:	08007465 	.word	0x08007465
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa3c 	bl	80078d0 <USBD_GetDescriptor>
          break;
 8007458:	e024      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fbcb 	bl	8007bf8 <USBD_SetAddress>
          break;
 8007462:	e01f      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fc0a 	bl	8007c80 <USBD_SetConfig>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
          break;
 8007470:	e018      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fcad 	bl	8007dd4 <USBD_GetConfig>
          break;
 800747a:	e013      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fcde 	bl	8007e40 <USBD_GetStatus>
          break;
 8007484:	e00e      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fd0d 	bl	8007ea8 <USBD_SetFeature>
          break;
 800748e:	e009      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd31 	bl	8007efa <USBD_ClrFeature>
          break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fd88 	bl	8007fb2 <USBD_CtlError>
          break;
 80074a2:	bf00      	nop
      }
      break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fd82 	bl	8007fb2 <USBD_CtlError>
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop

080074bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074d2:	2b40      	cmp	r3, #64	@ 0x40
 80074d4:	d005      	beq.n	80074e2 <USBD_StdItfReq+0x26>
 80074d6:	2b40      	cmp	r3, #64	@ 0x40
 80074d8:	d852      	bhi.n	8007580 <USBD_StdItfReq+0xc4>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USBD_StdItfReq+0x26>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d14e      	bne.n	8007580 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d840      	bhi.n	8007572 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	889b      	ldrh	r3, [r3, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d836      	bhi.n	8007568 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	889b      	ldrh	r3, [r3, #4]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff fedb 	bl	80072be <USBD_CoreFindIF>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2bff      	cmp	r3, #255	@ 0xff
 8007510:	d01d      	beq.n	800754e <USBD_StdItfReq+0x92>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d11a      	bne.n	800754e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007518:	7bba      	ldrb	r2, [r7, #14]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	@ 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007528:	7bba      	ldrb	r2, [r7, #14]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007530:	7bba      	ldrb	r2, [r7, #14]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	32ae      	adds	r2, #174	@ 0xae
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007546:	e004      	b.n	8007552 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007548:	2303      	movs	r3, #3
 800754a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800754c:	e001      	b.n	8007552 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d110      	bne.n	800757c <USBD_StdItfReq+0xc0>
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10d      	bne.n	800757c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fdf1 	bl	8008148 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007566:	e009      	b.n	800757c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd21 	bl	8007fb2 <USBD_CtlError>
          break;
 8007570:	e004      	b.n	800757c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fd1c 	bl	8007fb2 <USBD_CtlError>
          break;
 800757a:	e000      	b.n	800757e <USBD_StdItfReq+0xc2>
          break;
 800757c:	bf00      	nop
      }
      break;
 800757e:	e004      	b.n	800758a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fd15 	bl	8007fb2 <USBD_CtlError>
      break;
 8007588:	bf00      	nop
  }

  return ret;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	d007      	beq.n	80075c4 <USBD_StdEPReq+0x30>
 80075b4:	2b40      	cmp	r3, #64	@ 0x40
 80075b6:	f200 817f 	bhi.w	80078b8 <USBD_StdEPReq+0x324>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d02a      	beq.n	8007614 <USBD_StdEPReq+0x80>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	f040 817a 	bne.w	80078b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fe85 	bl	80072d8 <USBD_CoreFindEP>
 80075ce:	4603      	mov	r3, r0
 80075d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d2:	7b7b      	ldrb	r3, [r7, #13]
 80075d4:	2bff      	cmp	r3, #255	@ 0xff
 80075d6:	f000 8174 	beq.w	80078c2 <USBD_StdEPReq+0x32e>
 80075da:	7b7b      	ldrb	r3, [r7, #13]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8170 	bne.w	80078c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075e2:	7b7a      	ldrb	r2, [r7, #13]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075ea:	7b7a      	ldrb	r2, [r7, #13]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8163 	beq.w	80078c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075fc:	7b7a      	ldrb	r2, [r7, #13]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	@ 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007612:	e156      	b.n	80078c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d008      	beq.n	800762e <USBD_StdEPReq+0x9a>
 800761c:	2b03      	cmp	r3, #3
 800761e:	f300 8145 	bgt.w	80078ac <USBD_StdEPReq+0x318>
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 809b 	beq.w	800775e <USBD_StdEPReq+0x1ca>
 8007628:	2b01      	cmp	r3, #1
 800762a:	d03c      	beq.n	80076a6 <USBD_StdEPReq+0x112>
 800762c:	e13e      	b.n	80078ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d002      	beq.n	8007640 <USBD_StdEPReq+0xac>
 800763a:	2b03      	cmp	r3, #3
 800763c:	d016      	beq.n	800766c <USBD_StdEPReq+0xd8>
 800763e:	e02c      	b.n	800769a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00d      	beq.n	8007662 <USBD_StdEPReq+0xce>
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b80      	cmp	r3, #128	@ 0x80
 800764a:	d00a      	beq.n	8007662 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f965 	bl	8008920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007656:	2180      	movs	r1, #128	@ 0x80
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f961 	bl	8008920 <USBD_LL_StallEP>
 800765e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007660:	e020      	b.n	80076a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fca4 	bl	8007fb2 <USBD_CtlError>
              break;
 800766a:	e01b      	b.n	80076a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	885b      	ldrh	r3, [r3, #2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10e      	bne.n	8007692 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <USBD_StdEPReq+0xfe>
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b80      	cmp	r3, #128	@ 0x80
 800767e:	d008      	beq.n	8007692 <USBD_StdEPReq+0xfe>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	88db      	ldrh	r3, [r3, #6]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f947 	bl	8008920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fd58 	bl	8008148 <USBD_CtlSendStatus>

              break;
 8007698:	e004      	b.n	80076a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc88 	bl	8007fb2 <USBD_CtlError>
              break;
 80076a2:	bf00      	nop
          }
          break;
 80076a4:	e107      	b.n	80078b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d002      	beq.n	80076b8 <USBD_StdEPReq+0x124>
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d016      	beq.n	80076e4 <USBD_StdEPReq+0x150>
 80076b6:	e04b      	b.n	8007750 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00d      	beq.n	80076da <USBD_StdEPReq+0x146>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b80      	cmp	r3, #128	@ 0x80
 80076c2:	d00a      	beq.n	80076da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f929 	bl	8008920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ce:	2180      	movs	r1, #128	@ 0x80
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f925 	bl	8008920 <USBD_LL_StallEP>
 80076d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076d8:	e040      	b.n	800775c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fc68 	bl	8007fb2 <USBD_CtlError>
              break;
 80076e2:	e03b      	b.n	800775c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	885b      	ldrh	r3, [r3, #2]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d136      	bne.n	800775a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f92f 	bl	800895e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fd21 	bl	8008148 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fde4 	bl	80072d8 <USBD_CoreFindEP>
 8007710:	4603      	mov	r3, r0
 8007712:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007714:	7b7b      	ldrb	r3, [r7, #13]
 8007716:	2bff      	cmp	r3, #255	@ 0xff
 8007718:	d01f      	beq.n	800775a <USBD_StdEPReq+0x1c6>
 800771a:	7b7b      	ldrb	r3, [r7, #13]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11c      	bne.n	800775a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007720:	7b7a      	ldrb	r2, [r7, #13]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007728:	7b7a      	ldrb	r2, [r7, #13]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32ae      	adds	r2, #174	@ 0xae
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007738:	7b7a      	ldrb	r2, [r7, #13]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	@ 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800774e:	e004      	b.n	800775a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc2d 	bl	8007fb2 <USBD_CtlError>
              break;
 8007758:	e000      	b.n	800775c <USBD_StdEPReq+0x1c8>
              break;
 800775a:	bf00      	nop
          }
          break;
 800775c:	e0ab      	b.n	80078b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d002      	beq.n	8007770 <USBD_StdEPReq+0x1dc>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d032      	beq.n	80077d4 <USBD_StdEPReq+0x240>
 800776e:	e097      	b.n	80078a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <USBD_StdEPReq+0x1f2>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b80      	cmp	r3, #128	@ 0x80
 800777a:	d004      	beq.n	8007786 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fc17 	bl	8007fb2 <USBD_CtlError>
                break;
 8007784:	e091      	b.n	80078aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800778a:	2b00      	cmp	r3, #0
 800778c:	da0b      	bge.n	80077a6 <USBD_StdEPReq+0x212>
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	3310      	adds	r3, #16
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	3304      	adds	r3, #4
 80077a4:	e00b      	b.n	80077be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2202      	movs	r2, #2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc61 	bl	8008094 <USBD_CtlSendData>
              break;
 80077d2:	e06a      	b.n	80078aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da11      	bge.n	8007800 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	f003 020f 	and.w	r2, r3, #15
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	3324      	adds	r3, #36	@ 0x24
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d117      	bne.n	8007826 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbda 	bl	8007fb2 <USBD_CtlError>
                  break;
 80077fe:	e054      	b.n	80078aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	f003 020f 	and.w	r2, r3, #15
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fbc7 	bl	8007fb2 <USBD_CtlError>
                  break;
 8007824:	e041      	b.n	80078aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da0b      	bge.n	8007846 <USBD_StdEPReq+0x2b2>
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	3310      	adds	r3, #16
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	e00b      	b.n	800785e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	3304      	adds	r3, #4
 800785e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <USBD_StdEPReq+0x2d8>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b80      	cmp	r3, #128	@ 0x80
 800786a:	d103      	bne.n	8007874 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e00e      	b.n	8007892 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f88f 	bl	800899c <USBD_LL_IsStallEP>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2201      	movs	r2, #1
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e002      	b.n	8007892 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2202      	movs	r2, #2
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fbfb 	bl	8008094 <USBD_CtlSendData>
              break;
 800789e:	e004      	b.n	80078aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb85 	bl	8007fb2 <USBD_CtlError>
              break;
 80078a8:	bf00      	nop
          }
          break;
 80078aa:	e004      	b.n	80078b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb7f 	bl	8007fb2 <USBD_CtlError>
          break;
 80078b4:	bf00      	nop
      }
      break;
 80078b6:	e005      	b.n	80078c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb79 	bl	8007fb2 <USBD_CtlError>
      break;
 80078c0:	e000      	b.n	80078c4 <USBD_StdEPReq+0x330>
      break;
 80078c2:	bf00      	nop
  }

  return ret;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2b0e      	cmp	r3, #14
 80078f2:	f200 8152 	bhi.w	8007b9a <USBD_GetDescriptor+0x2ca>
 80078f6:	a201      	add	r2, pc, #4	@ (adr r2, 80078fc <USBD_GetDescriptor+0x2c>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800796d 	.word	0x0800796d
 8007900:	08007985 	.word	0x08007985
 8007904:	080079c5 	.word	0x080079c5
 8007908:	08007b9b 	.word	0x08007b9b
 800790c:	08007b9b 	.word	0x08007b9b
 8007910:	08007b3b 	.word	0x08007b3b
 8007914:	08007b67 	.word	0x08007b67
 8007918:	08007b9b 	.word	0x08007b9b
 800791c:	08007b9b 	.word	0x08007b9b
 8007920:	08007b9b 	.word	0x08007b9b
 8007924:	08007b9b 	.word	0x08007b9b
 8007928:	08007b9b 	.word	0x08007b9b
 800792c:	08007b9b 	.word	0x08007b9b
 8007930:	08007b9b 	.word	0x08007b9b
 8007934:	08007939 	.word	0x08007939
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800795a:	e126      	b.n	8007baa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb27 	bl	8007fb2 <USBD_CtlError>
        err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
      break;
 800796a:	e11e      	b.n	8007baa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	7c12      	ldrb	r2, [r2, #16]
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	60f8      	str	r0, [r7, #12]
      break;
 8007982:	e112      	b.n	8007baa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7c1b      	ldrb	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f107 0208 	add.w	r2, r7, #8
 8007998:	4610      	mov	r0, r2
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	2202      	movs	r2, #2
 80079a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079a6:	e100      	b.n	8007baa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	f107 0208 	add.w	r2, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	2202      	movs	r2, #2
 80079c0:	701a      	strb	r2, [r3, #0]
      break;
 80079c2:	e0f2      	b.n	8007baa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	f200 80ac 	bhi.w	8007b28 <USBD_GetDescriptor+0x258>
 80079d0:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <USBD_GetDescriptor+0x108>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079f1 	.word	0x080079f1
 80079dc:	08007a25 	.word	0x08007a25
 80079e0:	08007a59 	.word	0x08007a59
 80079e4:	08007a8d 	.word	0x08007a8d
 80079e8:	08007ac1 	.word	0x08007ac1
 80079ec:	08007af5 	.word	0x08007af5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a12:	e091      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 facb 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	72fb      	strb	r3, [r7, #11]
          break;
 8007a22:	e089      	b.n	8007b38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	7c12      	ldrb	r2, [r2, #16]
 8007a3c:	f107 0108 	add.w	r1, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a46:	e077      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fab1 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
          break;
 8007a56:	e06f      	b.n	8007b38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	7c12      	ldrb	r2, [r2, #16]
 8007a70:	f107 0108 	add.w	r1, r7, #8
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a7a:	e05d      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa97 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	3301      	adds	r3, #1
 8007a88:	72fb      	strb	r3, [r7, #11]
          break;
 8007a8a:	e055      	b.n	8007b38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aae:	e043      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa7d 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
          break;
 8007abe:	e03b      	b.n	8007b38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ae2:	e029      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa63 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
          break;
 8007af2:	e021      	b.n	8007b38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b16:	e00f      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa49 	bl	8007fb2 <USBD_CtlError>
            err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
          break;
 8007b26:	e007      	b.n	8007b38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa41 	bl	8007fb2 <USBD_CtlError>
          err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b36:	bf00      	nop
      }
      break;
 8007b38:	e037      	b.n	8007baa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7c1b      	ldrb	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4a:	f107 0208 	add.w	r2, r7, #8
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4798      	blx	r3
 8007b52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b54:	e029      	b.n	8007baa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa2a 	bl	8007fb2 <USBD_CtlError>
        err++;
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	3301      	adds	r3, #1
 8007b62:	72fb      	strb	r3, [r7, #11]
      break;
 8007b64:	e021      	b.n	8007baa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7c1b      	ldrb	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	f107 0208 	add.w	r2, r7, #8
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
 8007b7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	2207      	movs	r2, #7
 8007b86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b88:	e00f      	b.n	8007baa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fa10 	bl	8007fb2 <USBD_CtlError>
        err++;
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	3301      	adds	r3, #1
 8007b96:	72fb      	strb	r3, [r7, #11]
      break;
 8007b98:	e007      	b.n	8007baa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa08 	bl	8007fb2 <USBD_CtlError>
      err++;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba8:	bf00      	nop
  }

  if (err != 0U)
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11e      	bne.n	8007bee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d016      	beq.n	8007be6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007bb8:	893b      	ldrh	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00e      	beq.n	8007bdc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	88da      	ldrh	r2, [r3, #6]
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf28      	it	cs
 8007bc8:	4613      	movcs	r3, r2
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bce:	893b      	ldrh	r3, [r7, #8]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fa5d 	bl	8008094 <USBD_CtlSendData>
 8007bda:	e009      	b.n	8007bf0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9e7 	bl	8007fb2 <USBD_CtlError>
 8007be4:	e004      	b.n	8007bf0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 faae 	bl	8008148 <USBD_CtlSendStatus>
 8007bec:	e000      	b.n	8007bf0 <USBD_GetDescriptor+0x320>
    return;
 8007bee:	bf00      	nop
  }
}
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop

08007bf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	889b      	ldrh	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d131      	bne.n	8007c6e <USBD_SetAddress+0x76>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	88db      	ldrh	r3, [r3, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d12d      	bne.n	8007c6e <USBD_SetAddress+0x76>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c18:	d829      	bhi.n	8007c6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d104      	bne.n	8007c3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9bc 	bl	8007fb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	e01d      	b.n	8007c78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7bfa      	ldrb	r2, [r7, #15]
 8007c40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fed3 	bl	80089f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa7a 	bl	8008148 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	e009      	b.n	8007c78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	e004      	b.n	8007c78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f99e 	bl	8007fb2 <USBD_CtlError>
  }
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	4b4e      	ldr	r3, [pc, #312]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007c96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c98:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d905      	bls.n	8007cac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f985 	bl	8007fb2 <USBD_CtlError>
    return USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e08c      	b.n	8007dc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d002      	beq.n	8007cbe <USBD_SetConfig+0x3e>
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d029      	beq.n	8007d10 <USBD_SetConfig+0x90>
 8007cbc:	e075      	b.n	8007daa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cbe:	4b44      	ldr	r3, [pc, #272]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d020      	beq.n	8007d08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cc6:	4b42      	ldr	r3, [pc, #264]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fe ffb9 	bl	8006c4e <USBD_SetClassConfig>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f962 	bl	8007fb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cf6:	e065      	b.n	8007dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa25 	bl	8008148 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2203      	movs	r2, #3
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d06:	e05d      	b.n	8007dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa1d 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007d0e:	e059      	b.n	8007dc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d10:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d112      	bne.n	8007d3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d20:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d2a:	4b29      	ldr	r3, [pc, #164]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fe ffa8 	bl	8006c86 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa06 	bl	8008148 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d3c:	e042      	b.n	8007dc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d3e:	4b24      	ldr	r3, [pc, #144]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d02a      	beq.n	8007da2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fe ff96 	bl	8006c86 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d64:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe ff6f 	bl	8006c4e <USBD_SetClassConfig>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f918 	bl	8007fb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe ff7b 	bl	8006c86 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d98:	e014      	b.n	8007dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9d4 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007da0:	e010      	b.n	8007dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9d0 	bl	8008148 <USBD_CtlSendStatus>
      break;
 8007da8:	e00c      	b.n	8007dc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f900 	bl	8007fb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <USBD_SetConfig+0x150>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fe ff64 	bl	8006c86 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dc2:	bf00      	nop
  }

  return ret;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000029c 	.word	0x2000029c

08007dd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d004      	beq.n	8007df0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8e2 	bl	8007fb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dee:	e023      	b.n	8007e38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	dc02      	bgt.n	8007e02 <USBD_GetConfig+0x2e>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dc03      	bgt.n	8007e08 <USBD_GetConfig+0x34>
 8007e00:	e015      	b.n	8007e2e <USBD_GetConfig+0x5a>
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d00b      	beq.n	8007e1e <USBD_GetConfig+0x4a>
 8007e06:	e012      	b.n	8007e2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3308      	adds	r3, #8
 8007e12:	2201      	movs	r2, #1
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f93c 	bl	8008094 <USBD_CtlSendData>
        break;
 8007e1c:	e00c      	b.n	8007e38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3304      	adds	r3, #4
 8007e22:	2201      	movs	r2, #1
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f934 	bl	8008094 <USBD_CtlSendData>
        break;
 8007e2c:	e004      	b.n	8007e38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f8be 	bl	8007fb2 <USBD_CtlError>
        break;
 8007e36:	bf00      	nop
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d81e      	bhi.n	8007e96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	88db      	ldrh	r3, [r3, #6]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d004      	beq.n	8007e6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8a5 	bl	8007fb2 <USBD_CtlError>
        break;
 8007e68:	e01a      	b.n	8007ea0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	330c      	adds	r3, #12
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f900 	bl	8008094 <USBD_CtlSendData>
      break;
 8007e94:	e004      	b.n	8007ea0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f88a 	bl	8007fb2 <USBD_CtlError>
      break;
 8007e9e:	bf00      	nop
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d107      	bne.n	8007eca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f940 	bl	8008148 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ec8:	e013      	b.n	8007ef2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	885b      	ldrh	r3, [r3, #2]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d10b      	bne.n	8007eea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f930 	bl	8008148 <USBD_CtlSendStatus>
}
 8007ee8:	e003      	b.n	8007ef2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f860 	bl	8007fb2 <USBD_CtlError>
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d80b      	bhi.n	8007f2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10c      	bne.n	8007f34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f910 	bl	8008148 <USBD_CtlSendStatus>
      }
      break;
 8007f28:	e004      	b.n	8007f34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f840 	bl	8007fb2 <USBD_CtlError>
      break;
 8007f32:	e000      	b.n	8007f36 <USBD_ClrFeature+0x3c>
      break;
 8007f34:	bf00      	nop
  }
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fa16 	bl	800739a <SWAPBYTE>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fa09 	bl	800739a <SWAPBYTE>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff f9fc 	bl	800739a <SWAPBYTE>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	80da      	strh	r2, [r3, #6]
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fbc:	2180      	movs	r1, #128	@ 0x80
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fcae 	bl	8008920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fcaa 	bl	8008920 <USBD_LL_StallEP>
}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d036      	beq.n	8008058 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fee:	6938      	ldr	r0, [r7, #16]
 8007ff0:	f000 f836 	bl	8008060 <USBD_GetLen>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4413      	add	r3, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	701a      	strb	r2, [r3, #0]
  idx++;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	3301      	adds	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	2203      	movs	r2, #3
 800801c:	701a      	strb	r2, [r3, #0]
  idx++;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	3301      	adds	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008024:	e013      	b.n	800804e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	3301      	adds	r3, #1
 8008036:	613b      	str	r3, [r7, #16]
    idx++;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	3301      	adds	r3, #1
 800803c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4413      	add	r3, r2
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
    idx++;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	3301      	adds	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e7      	bne.n	8008026 <USBD_GetString+0x52>
 8008056:	e000      	b.n	800805a <USBD_GetString+0x86>
    return;
 8008058:	bf00      	nop
  }
}
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008070:	e005      	b.n	800807e <USBD_GetLen+0x1e>
  {
    len++;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	3301      	adds	r3, #1
 8008076:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3301      	adds	r3, #1
 800807c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f5      	bne.n	8008072 <USBD_GetLen+0x12>
  }

  return len;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fcb9 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	2100      	movs	r1, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fca8 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2203      	movs	r2, #3
 80080fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	2100      	movs	r1, #0
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fcac 	bl	8008a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	2100      	movs	r1, #0
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fc9b 	bl	8008a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2204      	movs	r2, #4
 8008154:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fc67 	bl	8008a32 <USBD_LL_Transmit>

  return USBD_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2205      	movs	r2, #5
 800817a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800817e:	2300      	movs	r3, #0
 8008180:	2200      	movs	r2, #0
 8008182:	2100      	movs	r1, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc75 	bl	8008a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <send_mouse_report>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void send_mouse_report(MouseReport r)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	463b      	mov	r3, r7
 800819c:	e883 0003 	stmia.w	r3, {r0, r1}
	r.report_ID = REPORTID_MOUSE;
 80081a0:	2301      	movs	r3, #1
 80081a2:	703b      	strb	r3, [r7, #0]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&r, sizeof (MouseReport));
 80081a4:	463b      	mov	r3, r7
 80081a6:	2206      	movs	r2, #6
 80081a8:	4619      	mov	r1, r3
 80081aa:	4803      	ldr	r0, [pc, #12]	@ (80081b8 <send_mouse_report+0x24>)
 80081ac:	f7fe fb4a 	bl	8006844 <USBD_CUSTOM_HID_SendReport>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200002a0 	.word	0x200002a0

080081bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081c0:	2200      	movs	r2, #0
 80081c2:	4912      	ldr	r1, [pc, #72]	@ (800820c <MX_USB_DEVICE_Init+0x50>)
 80081c4:	4812      	ldr	r0, [pc, #72]	@ (8008210 <MX_USB_DEVICE_Init+0x54>)
 80081c6:	f7fe fcc5 	bl	8006b54 <USBD_Init>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081d0:	f7f8 fb94 	bl	80008fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80081d4:	490f      	ldr	r1, [pc, #60]	@ (8008214 <MX_USB_DEVICE_Init+0x58>)
 80081d6:	480e      	ldr	r0, [pc, #56]	@ (8008210 <MX_USB_DEVICE_Init+0x54>)
 80081d8:	f7fe fcec 	bl	8006bb4 <USBD_RegisterClass>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081e2:	f7f8 fb8b 	bl	80008fc <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80081e6:	490c      	ldr	r1, [pc, #48]	@ (8008218 <MX_USB_DEVICE_Init+0x5c>)
 80081e8:	4809      	ldr	r0, [pc, #36]	@ (8008210 <MX_USB_DEVICE_Init+0x54>)
 80081ea:	f7fe fc99 	bl	8006b20 <USBD_CUSTOM_HID_RegisterInterface>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081f4:	f7f8 fb82 	bl	80008fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081f8:	4805      	ldr	r0, [pc, #20]	@ (8008210 <MX_USB_DEVICE_Init+0x54>)
 80081fa:	f7fe fd11 	bl	8006c20 <USBD_Start>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008204:	f7f8 fb7a 	bl	80008fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008208:	bf00      	nop
 800820a:	bd80      	pop	{r7, pc}
 800820c:	2000011c 	.word	0x2000011c
 8008210:	200002a0 	.word	0x200002a0
 8008214:	2000000c 	.word	0x2000000c
 8008218:	2000010c 	.word	0x2000010c

0800821c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008220:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008222:	4618      	mov	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008230:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008232:	4618      	mov	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t report_ID, uint8_t data)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	460a      	mov	r2, r1
 8008246:	71fb      	strb	r3, [r7, #7]
 8008248:	4613      	mov	r3, r2
 800824a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */

	if (report_ID == REPORTID_RES_MULTIPLIER)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d10d      	bne.n	800826e <CUSTOM_HID_OutEvent_FS+0x32>
	{
		resMultiplierReport.scroll_resolution = data & 0x0F;
 8008252:	79bb      	ldrb	r3, [r7, #6]
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	b2d9      	uxtb	r1, r3
 800825a:	4a0c      	ldr	r2, [pc, #48]	@ (800828c <CUSTOM_HID_OutEvent_FS+0x50>)
 800825c:	7853      	ldrb	r3, [r2, #1]
 800825e:	f361 0303 	bfi	r3, r1, #0, #4
 8008262:	7053      	strb	r3, [r2, #1]
		resMultiplierReport.pan_resolution = data & 0xF0;
 8008264:	4a09      	ldr	r2, [pc, #36]	@ (800828c <CUSTOM_HID_OutEvent_FS+0x50>)
 8008266:	7853      	ldrb	r3, [r2, #1]
 8008268:	f36f 1307 	bfc	r3, #4, #4
 800826c:	7053      	strb	r3, [r2, #1]
	}

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800826e:	4808      	ldr	r0, [pc, #32]	@ (8008290 <CUSTOM_HID_OutEvent_FS+0x54>)
 8008270:	f7fe fbf4 	bl	8006a5c <USBD_CUSTOM_HID_ReceivePacket>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <CUSTOM_HID_OutEvent_FS+0x44>
  {
    return -1;
 800827a:	f04f 33ff 	mov.w	r3, #4294967295
 800827e:	e000      	b.n	8008282 <CUSTOM_HID_OutEvent_FS+0x46>
  }
  return (USBD_OK);
 8008280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	2000057c 	.word	0x2000057c
 8008290:	200002a0 	.word	0x200002a0

08008294 <getScrollRes>:
*/
/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t getScrollRes(void)
{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
	return resMultiplierReport.scroll_resolution;
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <getScrollRes+0x18>)
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80082a0:	b2db      	uxtb	r3, r3
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	2000057c 	.word	0x2000057c

080082b0 <getPanRes>:
uint8_t getPanRes(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
	return resMultiplierReport.pan_resolution;
 80082b4:	4b04      	ldr	r3, [pc, #16]	@ (80082c8 <getPanRes+0x18>)
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80082bc:	b2db      	uxtb	r3, r3
}
 80082be:	4618      	mov	r0, r3
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	2000057c 	.word	0x2000057c

080082cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2212      	movs	r2, #18
 80082dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082de:	4b03      	ldr	r3, [pc, #12]	@ (80082ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	2000013c 	.word	0x2000013c

080082f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2204      	movs	r2, #4
 8008300:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008302:	4b03      	ldr	r3, [pc, #12]	@ (8008310 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	2000015c 	.word	0x2000015c

08008314 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	6039      	str	r1, [r7, #0]
 800831e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d105      	bne.n	8008332 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4907      	ldr	r1, [pc, #28]	@ (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
 800832a:	4808      	ldr	r0, [pc, #32]	@ (800834c <USBD_FS_ProductStrDescriptor+0x38>)
 800832c:	f7ff fe52 	bl	8007fd4 <USBD_GetString>
 8008330:	e004      	b.n	800833c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4904      	ldr	r1, [pc, #16]	@ (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
 8008336:	4805      	ldr	r0, [pc, #20]	@ (800834c <USBD_FS_ProductStrDescriptor+0x38>)
 8008338:	f7ff fe4c 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800833c:	4b02      	ldr	r3, [pc, #8]	@ (8008348 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000580 	.word	0x20000580
 800834c:	08008c4c 	.word	0x08008c4c

08008350 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	6039      	str	r1, [r7, #0]
 800835a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	4904      	ldr	r1, [pc, #16]	@ (8008370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008360:	4804      	ldr	r0, [pc, #16]	@ (8008374 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008362:	f7ff fe37 	bl	8007fd4 <USBD_GetString>
  return USBD_StrDesc;
 8008366:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000580 	.word	0x20000580
 8008374:	08008c58 	.word	0x08008c58

08008378 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	221a      	movs	r2, #26
 8008388:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800838a:	f000 f855 	bl	8008438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800838e:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000160 	.word	0x20000160

0800839c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d105      	bne.n	80083ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4907      	ldr	r1, [pc, #28]	@ (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083b2:	4808      	ldr	r0, [pc, #32]	@ (80083d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083b4:	f7ff fe0e 	bl	8007fd4 <USBD_GetString>
 80083b8:	e004      	b.n	80083c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4904      	ldr	r1, [pc, #16]	@ (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083be:	4805      	ldr	r0, [pc, #20]	@ (80083d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083c0:	f7ff fe08 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083c4:	4b02      	ldr	r3, [pc, #8]	@ (80083d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20000580 	.word	0x20000580
 80083d4:	08008c68 	.word	0x08008c68

080083d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4907      	ldr	r1, [pc, #28]	@ (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ee:	4808      	ldr	r0, [pc, #32]	@ (8008410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083f0:	f7ff fdf0 	bl	8007fd4 <USBD_GetString>
 80083f4:	e004      	b.n	8008400 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4904      	ldr	r1, [pc, #16]	@ (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083fa:	4805      	ldr	r0, [pc, #20]	@ (8008410 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083fc:	f7ff fdea 	bl	8007fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008400:	4b02      	ldr	r3, [pc, #8]	@ (800840c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000580 	.word	0x20000580
 8008410:	08008c7c 	.word	0x08008c7c

08008414 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	220c      	movs	r2, #12
 8008424:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008426:	4b03      	ldr	r3, [pc, #12]	@ (8008434 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000150 	.word	0x20000150

08008438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800843e:	4b0f      	ldr	r3, [pc, #60]	@ (800847c <Get_SerialNum+0x44>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008444:	4b0e      	ldr	r3, [pc, #56]	@ (8008480 <Get_SerialNum+0x48>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800844a:	4b0e      	ldr	r3, [pc, #56]	@ (8008484 <Get_SerialNum+0x4c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800845e:	2208      	movs	r2, #8
 8008460:	4909      	ldr	r1, [pc, #36]	@ (8008488 <Get_SerialNum+0x50>)
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f814 	bl	8008490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008468:	2204      	movs	r2, #4
 800846a:	4908      	ldr	r1, [pc, #32]	@ (800848c <Get_SerialNum+0x54>)
 800846c:	68b8      	ldr	r0, [r7, #8]
 800846e:	f000 f80f 	bl	8008490 <IntToUnicode>
  }
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	1fff7a10 	.word	0x1fff7a10
 8008480:	1fff7a14 	.word	0x1fff7a14
 8008484:	1fff7a18 	.word	0x1fff7a18
 8008488:	20000162 	.word	0x20000162
 800848c:	20000172 	.word	0x20000172

08008490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]
 80084a6:	e027      	b.n	80084f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0f1b      	lsrs	r3, r3, #28
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	d80b      	bhi.n	80084c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	0f1b      	lsrs	r3, r3, #28
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	4619      	mov	r1, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	440b      	add	r3, r1
 80084c0:	3230      	adds	r2, #48	@ 0x30
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	e00a      	b.n	80084de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	0f1b      	lsrs	r3, r3, #28
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4619      	mov	r1, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	440b      	add	r3, r1
 80084d8:	3237      	adds	r2, #55	@ 0x37
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	3301      	adds	r3, #1
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	3301      	adds	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
 80084f8:	7dfa      	ldrb	r2, [r7, #23]
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d3d3      	bcc.n	80084a8 <IntToUnicode+0x18>
  }
}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b0a0      	sub	sp, #128	@ 0x80
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008518:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	605a      	str	r2, [r3, #4]
 8008522:	609a      	str	r2, [r3, #8]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008528:	f107 0310 	add.w	r3, r7, #16
 800852c:	225c      	movs	r2, #92	@ 0x5c
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fb53 	bl	8008bdc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800853e:	d149      	bne.n	80085d4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008544:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008546:	2300      	movs	r3, #0
 8008548:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800854a:	f107 0310 	add.w	r3, r7, #16
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb f9be 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800855a:	f7f8 f9cf 	bl	80008fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	4b1e      	ldr	r3, [pc, #120]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008566:	4a1d      	ldr	r2, [pc, #116]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 8008568:	f043 0301 	orr.w	r3, r3, #1
 800856c:	6313      	str	r3, [r2, #48]	@ 0x30
 800856e:	4b1b      	ldr	r3, [pc, #108]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800857a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800857e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008580:	2302      	movs	r3, #2
 8008582:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008584:	2300      	movs	r3, #0
 8008586:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008588:	2303      	movs	r3, #3
 800858a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800858c:	230a      	movs	r3, #10
 800858e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008590:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008594:	4619      	mov	r1, r3
 8008596:	4812      	ldr	r0, [pc, #72]	@ (80085e0 <HAL_PCD_MspInit+0xd0>)
 8008598:	f7f9 fc5e 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800859c:	4b0f      	ldr	r3, [pc, #60]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 800859e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a0:	4a0e      	ldr	r2, [pc, #56]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 80085a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80085a8:	2300      	movs	r3, #0
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	4b0b      	ldr	r3, [pc, #44]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 80085ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b0:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 80085b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80085b8:	4b08      	ldr	r3, [pc, #32]	@ (80085dc <HAL_PCD_MspInit+0xcc>)
 80085ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	2043      	movs	r0, #67	@ 0x43
 80085ca:	f7f9 f89e 	bl	800170a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085ce:	2043      	movs	r0, #67	@ 0x43
 80085d0:	f7f9 f8b7 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085d4:	bf00      	nop
 80085d6:	3780      	adds	r7, #128	@ 0x80
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	40023800 	.word	0x40023800
 80085e0:	40020000 	.word	0x40020000

080085e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fe fb5d 	bl	8006cba <USBD_LL_SetupStage>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fb97 	bl	8006d64 <USBD_LL_DataOutStage>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	3320      	adds	r3, #32
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	4619      	mov	r1, r3
 8008666:	f7fe fc30 	bl	8006eca <USBD_LL_DataInStage>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe fd6a 	bl	800715a <USBD_LL_SOF>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	79db      	ldrb	r3, [r3, #7]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d102      	bne.n	80086a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
 80086a6:	e008      	b.n	80086ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	79db      	ldrb	r3, [r3, #7]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d102      	bne.n	80086b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e001      	b.n	80086ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086b6:	f7f8 f921 	bl	80008fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086c0:	7bfa      	ldrb	r2, [r7, #15]
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fd04 	bl	80070d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fcac 	bl	800702e <USBD_LL_Reset>
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fcff 	bl	80070f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7adb      	ldrb	r3, [r3, #11]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008714:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <HAL_PCD_SuspendCallback+0x48>)
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	4a03      	ldr	r2, [pc, #12]	@ (8008728 <HAL_PCD_SuspendCallback+0x48>)
 800871a:	f043 0306 	orr.w	r3, r3, #6
 800871e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed00 	.word	0xe000ed00

0800872c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fcf5 	bl	800712a <USBD_LL_Resume>
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fd4d 	bl	80071fe <USBD_LL_IsoOUTIncomplete>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fd09 	bl	800719a <USBD_LL_IsoINIncomplete>
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fd5f 	bl	8007262 <USBD_LL_DevConnected>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fd5c 	bl	8007278 <USBD_LL_DevDisconnected>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d13c      	bne.n	8008852 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087d8:	4a20      	ldr	r2, [pc, #128]	@ (800885c <USBD_LL_Init+0x94>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a1e      	ldr	r2, [pc, #120]	@ (800885c <USBD_LL_Init+0x94>)
 80087e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087e8:	4b1c      	ldr	r3, [pc, #112]	@ (800885c <USBD_LL_Init+0x94>)
 80087ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80087ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80087f0:	4b1a      	ldr	r3, [pc, #104]	@ (800885c <USBD_LL_Init+0x94>)
 80087f2:	2206      	movs	r2, #6
 80087f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087f6:	4b19      	ldr	r3, [pc, #100]	@ (800885c <USBD_LL_Init+0x94>)
 80087f8:	2202      	movs	r2, #2
 80087fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087fc:	4b17      	ldr	r3, [pc, #92]	@ (800885c <USBD_LL_Init+0x94>)
 80087fe:	2200      	movs	r2, #0
 8008800:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008802:	4b16      	ldr	r3, [pc, #88]	@ (800885c <USBD_LL_Init+0x94>)
 8008804:	2202      	movs	r2, #2
 8008806:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008808:	4b14      	ldr	r3, [pc, #80]	@ (800885c <USBD_LL_Init+0x94>)
 800880a:	2200      	movs	r2, #0
 800880c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800880e:	4b13      	ldr	r3, [pc, #76]	@ (800885c <USBD_LL_Init+0x94>)
 8008810:	2200      	movs	r2, #0
 8008812:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008814:	4b11      	ldr	r3, [pc, #68]	@ (800885c <USBD_LL_Init+0x94>)
 8008816:	2200      	movs	r2, #0
 8008818:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800881a:	4b10      	ldr	r3, [pc, #64]	@ (800885c <USBD_LL_Init+0x94>)
 800881c:	2200      	movs	r2, #0
 800881e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008820:	4b0e      	ldr	r3, [pc, #56]	@ (800885c <USBD_LL_Init+0x94>)
 8008822:	2200      	movs	r2, #0
 8008824:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008826:	480d      	ldr	r0, [pc, #52]	@ (800885c <USBD_LL_Init+0x94>)
 8008828:	f7f9 fcdb 	bl	80021e2 <HAL_PCD_Init>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008832:	f7f8 f863 	bl	80008fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008836:	2180      	movs	r1, #128	@ 0x80
 8008838:	4808      	ldr	r0, [pc, #32]	@ (800885c <USBD_LL_Init+0x94>)
 800883a:	f7fa ff22 	bl	8003682 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800883e:	2240      	movs	r2, #64	@ 0x40
 8008840:	2100      	movs	r1, #0
 8008842:	4806      	ldr	r0, [pc, #24]	@ (800885c <USBD_LL_Init+0x94>)
 8008844:	f7fa fed6 	bl	80035f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008848:	2280      	movs	r2, #128	@ 0x80
 800884a:	2101      	movs	r1, #1
 800884c:	4803      	ldr	r0, [pc, #12]	@ (800885c <USBD_LL_Init+0x94>)
 800884e:	f7fa fed1 	bl	80035f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000780 	.word	0x20000780

08008860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008876:	4618      	mov	r0, r3
 8008878:	f7f9 fdc9 	bl	800240e <HAL_PCD_Start>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f97e 	bl	8008b84 <USBD_Get_USB_Status>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888c:	7bbb      	ldrb	r3, [r7, #14]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	4608      	mov	r0, r1
 80088a0:	4611      	mov	r1, r2
 80088a2:	461a      	mov	r2, r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	70fb      	strb	r3, [r7, #3]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70bb      	strb	r3, [r7, #2]
 80088ac:	4613      	mov	r3, r2
 80088ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80088be:	78bb      	ldrb	r3, [r7, #2]
 80088c0:	883a      	ldrh	r2, [r7, #0]
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	f7fa faca 	bl	8002e5c <HAL_PCD_EP_Open>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f958 	bl	8008b84 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7fa fb13 	bl	8002f2c <HAL_PCD_EP_Close>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f939 	bl	8008b84 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	4611      	mov	r1, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7fa fbb3 	bl	80030aa <HAL_PCD_EP_SetStall>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f91a 	bl	8008b84 <USBD_Get_USB_Status>
 8008950:	4603      	mov	r3, r0
 8008952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008954:	7bbb      	ldrb	r3, [r7, #14]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f7fa fbf7 	bl	8003170 <HAL_PCD_EP_ClrStall>
 8008982:	4603      	mov	r3, r0
 8008984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f8fb 	bl	8008b84 <USBD_Get_USB_Status>
 800898e:	4603      	mov	r3, r0
 8008990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008992:	7bbb      	ldrb	r3, [r7, #14]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0b      	bge.n	80089d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	4613      	mov	r3, r2
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4413      	add	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	3316      	adds	r3, #22
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	e00b      	b.n	80089e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80089e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fa f9fe 	bl	8002e14 <HAL_PCD_SetAddress>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f8b0 	bl	8008b84 <USBD_Get_USB_Status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b086      	sub	sp, #24
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a50:	7af9      	ldrb	r1, [r7, #11]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	f7fa faee 	bl	8003036 <HAL_PCD_EP_Transmit>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f88f 	bl	8008b84 <USBD_Get_USB_Status>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	460b      	mov	r3, r1
 8008a82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a92:	7af9      	ldrb	r1, [r7, #11]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	f7fa fa92 	bl	8002fc0 <HAL_PCD_EP_Receive>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f86e 	bl	8008b84 <USBD_Get_USB_Status>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_PCDEx_LPM_Callback+0x18>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d01f      	beq.n	8008b0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008ace:	e03b      	b.n	8008b48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	7adb      	ldrb	r3, [r3, #11]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008ad8:	f7f7 fd6e 	bl	80005b8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008adc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ae2:	f023 0306 	bic.w	r3, r3, #6
 8008ae6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008afa:	f023 0301 	bic.w	r3, r3, #1
 8008afe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fb0f 	bl	800712a <USBD_LL_Resume>
    break;
 8008b0c:	e01c      	b.n	8008b48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b20:	f043 0301 	orr.w	r3, r3, #1
 8008b24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe fae0 	bl	80070f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7adb      	ldrb	r3, [r3, #11]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b3a:	4b05      	ldr	r3, [pc, #20]	@ (8008b50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	4a04      	ldr	r2, [pc, #16]	@ (8008b50 <HAL_PCDEx_LPM_Callback+0x98>)
 8008b40:	f043 0306 	orr.w	r3, r3, #6
 8008b44:	6113      	str	r3, [r2, #16]
    break;
 8008b46:	bf00      	nop
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008b5c:	4b03      	ldr	r3, [pc, #12]	@ (8008b6c <USBD_static_malloc+0x18>)
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	20000c64 	.word	0x20000c64

08008b70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]

}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d817      	bhi.n	8008bc8 <USBD_Get_USB_Status+0x44>
 8008b98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba0 <USBD_Get_USB_Status+0x1c>)
 8008b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9e:	bf00      	nop
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bb7 	.word	0x08008bb7
 8008ba8:	08008bbd 	.word	0x08008bbd
 8008bac:	08008bc3 	.word	0x08008bc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bb4:	e00b      	b.n	8008bce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bba:	e008      	b.n	8008bce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc0:	e005      	b.n	8008bce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc6:	e002      	b.n	8008bce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	73fb      	strb	r3, [r7, #15]
    break;
 8008bcc:	bf00      	nop
  }
  return usb_status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <memset>:
 8008bdc:	4402      	add	r2, r0
 8008bde:	4603      	mov	r3, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d100      	bne.n	8008be6 <memset+0xa>
 8008be4:	4770      	bx	lr
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e7f9      	b.n	8008be0 <memset+0x4>

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4d0d      	ldr	r5, [pc, #52]	@ (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1b64      	subs	r4, r4, r5
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2600      	movs	r6, #0
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008c30 <__libc_init_array+0x44>)
 8008c00:	f000 f818 	bl	8008c34 <_init>
 8008c04:	1b64      	subs	r4, r4, r5
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2600      	movs	r6, #0
 8008c0a:	42a6      	cmp	r6, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c14:	4798      	blx	r3
 8008c16:	3601      	adds	r6, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1e:	4798      	blx	r3
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	08008cb4 	.word	0x08008cb4
 8008c28:	08008cb4 	.word	0x08008cb4
 8008c2c:	08008cb4 	.word	0x08008cb4
 8008c30:	08008cb8 	.word	0x08008cb8

08008c34 <_init>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr

08008c40 <_fini>:
 8008c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c42:	bf00      	nop
 8008c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c46:	bc08      	pop	{r3}
 8008c48:	469e      	mov	lr, r3
 8008c4a:	4770      	bx	lr
