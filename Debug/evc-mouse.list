
evc-mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a0c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  0000a144  2**0
                  CONTENTS
  4 .ARM          00000008  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c38  08008c38  0000a144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  08008c40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000144  08008d84  0000a144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c48  08008d84  0000ac48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151dc  00000000  00000000  0000a174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b2  00000000  00000000  0001f350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00022b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e65  00000000  00000000  00023de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cc1  00000000  00000000  00024c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb1  00000000  00000000  0004a90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df20e  00000000  00000000  000634bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001426cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  00142710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001475cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000144 	.word	0x20000144
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08008bb8 	.word	0x08008bb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000148 	.word	0x20000148
 8000200:	08008bb8 	.word	0x08008bb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb87 	bl	8000c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f85f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f97b 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000506:	f000 f959 	bl	80007bc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800050a:	f007 fe49 	bl	80081a0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800050e:	f000 f8c3 	bl	8000698 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000512:	f000 f92f 	bl	8000774 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc1_buffer, 3);
 8000516:	2203      	movs	r2, #3
 8000518:	4924      	ldr	r1, [pc, #144]	@ (80005ac <main+0xb8>)
 800051a:	4825      	ldr	r0, [pc, #148]	@ (80005b0 <main+0xbc>)
 800051c:	f000 fc50 	bl	8000dc0 <HAL_ADC_Start_DMA>
  int user_button_switch = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000528:	4822      	ldr	r0, [pc, #136]	@ (80005b4 <main+0xc0>)
 800052a:	f001 fe3d 	bl	80021a8 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00c      	beq.n	800054e <main+0x5a>
		{
			user_button_switch ^= 1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f083 0301 	eor.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
			while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin));
 800053c:	bf00      	nop
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	481c      	ldr	r0, [pc, #112]	@ (80005b4 <main+0xc0>)
 8000544:	f001 fe30 	bl	80021a8 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f7      	bne.n	800053e <main+0x4a>
		}

		if (user_button_switch)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d024      	beq.n	800059e <main+0xaa>
		{
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2101      	movs	r1, #1
 8000558:	4817      	ldr	r0, [pc, #92]	@ (80005b8 <main+0xc4>)
 800055a:	f001 fe3d 	bl	80021d8 <HAL_GPIO_WritePin>
			r.pan_x = calculate_vector(adc1_buffer[0]);
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <main+0xb8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f9ce 	bl	8000904 <calculate_vector>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <main+0xc8>)
 800056e:	705a      	strb	r2, [r3, #1]
			r.pan_y = calculate_vector(adc1_buffer[1]);
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <main+0xb8>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f9c5 	bl	8000904 <calculate_vector>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <main+0xc8>)
 8000580:	709a      	strb	r2, [r3, #2]
			r.zoom = calculate_vector(adc1_buffer[2]);
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <main+0xb8>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f9bc 	bl	8000904 <calculate_vector>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <main+0xc8>)
 8000592:	70da      	strb	r2, [r3, #3]
			send_viewport_report(r);
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <main+0xc8>)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f007 fdf0 	bl	800817c <send_viewport_report>
 800059c:	e7c2      	b.n	8000524 <main+0x30>
		}
		else
		{
			HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <main+0xc4>)
 80005a4:	f001 fe18 	bl	80021d8 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80005a8:	e7bc      	b.n	8000524 <main+0x30>
 80005aa:	bf00      	nop
 80005ac:	20000254 	.word	0x20000254
 80005b0:	20000160 	.word	0x20000160
 80005b4:	40020800 	.word	0x40020800
 80005b8:	40020400 	.word	0x40020400
 80005bc:	20000260 	.word	0x20000260

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2234      	movs	r2, #52	@ 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fac6 	bl	8008b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <SystemClock_Config+0xd0>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a28      	ldr	r2, [pc, #160]	@ (8000690 <SystemClock_Config+0xd0>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a22      	ldr	r2, [pc, #136]	@ (8000694 <SystemClock_Config+0xd4>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000634:	23a8      	movs	r3, #168	@ 0xa8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063c:	2307      	movs	r3, #7
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4618      	mov	r0, r3
 800064a:	f003 feaf 	bl	80043ac <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000654:	f000 f966 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f003 f84c 	bl	8003714 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f94f 	bl	8000924 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006ac:	4a2f      	ldr	r2, [pc, #188]	@ (800076c <MX_ADC1_Init+0xd4>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ca:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <MX_ADC1_Init+0xd8>)
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006de:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80006e4:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f8:	481b      	ldr	r0, [pc, #108]	@ (8000768 <MX_ADC1_Init+0xd0>)
 80006fa:	f000 fb1d 	bl	8000d38 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 f90e 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000708:	2303      	movs	r3, #3
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <MX_ADC1_Init+0xd0>)
 800071a:	f000 fc7f 	bl	800101c <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000724:	f000 f8fe 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000728:	230a      	movs	r3, #10
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_ADC1_Init+0xd0>)
 8000736:	f000 fc71 	bl	800101c <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000740:	f000 f8f0 	bl	8000924 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000744:	230d      	movs	r3, #13
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000748:	2303      	movs	r3, #3
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_ADC1_Init+0xd0>)
 8000752:	f000 fc63 	bl	800101c <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800075c:	f000 f8e2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000160 	.word	0x20000160
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000778:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_TIM10_Init+0x40>)
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <MX_TIM10_Init+0x44>)
 800077c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16700;
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_TIM10_Init+0x40>)
 8000780:	f244 123c 	movw	r2, #16700	@ 0x413c
 8000784:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_TIM10_Init+0x40>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_TIM10_Init+0x40>)
 800078e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000792:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_TIM10_Init+0x40>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_TIM10_Init+0x40>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_TIM10_Init+0x40>)
 80007a2:	f004 f8a1 	bl	80048e8 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80007ac:	f000 f8ba 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000208 	.word	0x20000208
 80007b8:	40014400 	.word	0x40014400

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_DMA_Init+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a0b      	ldr	r2, [pc, #44]	@ (80007f8 <MX_DMA_Init+0x3c>)
 80007cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_DMA_Init+0x3c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2038      	movs	r0, #56	@ 0x38
 80007e4:	f000 ffa5 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007e8:	2038      	movs	r0, #56	@ 0x38
 80007ea:	f000 ffbe 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b2d      	ldr	r3, [pc, #180]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a2c      	ldr	r2, [pc, #176]	@ (80008cc <MX_GPIO_Init+0xd0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0xd4>)
 8000888:	f001 fca6 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <MX_GPIO_Init+0xd8>)
 80008a4:	f001 faec 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_GPIO_Init+0xd4>)
 80008c0:	f001 fade 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	@ 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800

080008d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	if (htim == &htim10)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d102      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		tim10_overflow = 1;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
	}
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000208 	.word	0x20000208
 8000900:	20000250 	.word	0x20000250

08000904 <calculate_vector>:
	tim10_clear();
}

// Actual adc_value must be 12 bits in resolution
int8_t calculate_vector(uint32_t adc_value)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return (int8_t)(((adc_value & 0x00000FFF) >> 4) - 128);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	b2db      	uxtb	r3, r3
 8000912:	3b80      	subs	r3, #128	@ 0x80
 8000914:	b2db      	uxtb	r3, r3
 8000916:	b25b      	sxtb	r3, r3
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a3c      	ldr	r2, [pc, #240]	@ (8000a90 <HAL_ADC_MspInit+0x110>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d171      	bne.n	8000a86 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <HAL_ADC_MspInit+0x114>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80009f6:	2309      	movs	r3, #9
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <HAL_ADC_MspInit+0x118>)
 8000a0a:	f001 fa39 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481e      	ldr	r0, [pc, #120]	@ (8000a9c <HAL_ADC_MspInit+0x11c>)
 8000a22:	f001 fa2d 	bl	8001e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a28:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa4 <HAL_ADC_MspInit+0x124>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a50:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a6c:	f000 fe98 	bl	80017a0 <HAL_DMA_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000a76:	f7ff ff55 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a80:	4a07      	ldr	r2, [pc, #28]	@ (8000aa0 <HAL_ADC_MspInit+0x120>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012000 	.word	0x40012000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	200001a8 	.word	0x200001a8
 8000aa4:	40026410 	.word	0x40026410

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8000af0 <HAL_TIM_Base_MspInit+0x48>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d115      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_TIM_Base_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 fe29 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ae0:	2019      	movs	r0, #25
 8000ae2:	f000 fe42 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40014400 	.word	0x40014400
 8000af4:	40023800 	.word	0x40023800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f8af 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5e:	f003 ff12 	bl	8004986 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000208 	.word	0x20000208

08000b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b70:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <DMA2_Stream0_IRQHandler+0x10>)
 8000b72:	f000 ff1b 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001a8 	.word	0x200001a8

08000b80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <OTG_FS_IRQHandler+0x10>)
 8000b86:	f001 fc8b 	bl	80024a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000748 	.word	0x20000748

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <SystemInit+0x20>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <SystemInit+0x20>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bbc:	f7ff ffea 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f007 ffc3 	bl	8008b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fc83 	bl	80004f4 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000bfc:	08008c40 	.word	0x08008c40
  ldr r2, =_sbss
 8000c00:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000c04:	20000c48 	.word	0x20000c48

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <HAL_Init+0x40>)
 8000c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_Init+0x40>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <HAL_Init+0x40>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 fd71 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f808 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c40:	f7ff fe76 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023c00 	.word	0x40023c00

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x54>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fd89 	bl	8001786 <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00e      	b.n	8000c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	d80a      	bhi.n	8000c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	2200      	movs	r2, #0
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 fd51 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <HAL_InitTick+0x5c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	20000264 	.word	0x20000264

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000264 	.word	0x20000264

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e033      	b.n	8000db6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d109      	bne.n	8000d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fe12 	bl	8000980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 0310 	and.w	r3, r3, #16
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	f043 0202 	orr.w	r2, r3, #2
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fa78 	bl	8001280 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000da6:	e001      	b.n	8000dac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Start_DMA+0x1e>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e0e9      	b.n	8000fb2 <HAL_ADC_Start_DMA+0x1f2>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d018      	beq.n	8000e26 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e04:	4b6d      	ldr	r3, [pc, #436]	@ (8000fbc <HAL_ADC_Start_DMA+0x1fc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a6d      	ldr	r2, [pc, #436]	@ (8000fc0 <HAL_ADC_Start_DMA+0x200>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9a      	lsrs	r2, r3, #18
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e34:	d107      	bne.n	8000e46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e44:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	f040 80a1 	bne.w	8000f98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e94:	d106      	bne.n	8000ea4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f023 0206 	bic.w	r2, r3, #6
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ea2:	e002      	b.n	8000eaa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb2:	4b44      	ldr	r3, [pc, #272]	@ (8000fc4 <HAL_ADC_Start_DMA+0x204>)
 8000eb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eba:	4a43      	ldr	r2, [pc, #268]	@ (8000fc8 <HAL_ADC_Start_DMA+0x208>)
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec2:	4a42      	ldr	r2, [pc, #264]	@ (8000fcc <HAL_ADC_Start_DMA+0x20c>)
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eca:	4a41      	ldr	r2, [pc, #260]	@ (8000fd0 <HAL_ADC_Start_DMA+0x210>)
 8000ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000ee6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ef6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	334c      	adds	r3, #76	@ 0x4c
 8000f02:	4619      	mov	r1, r3
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f000 fcf8 	bl	80018fc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d12a      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <HAL_ADC_Start_DMA+0x214>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d015      	beq.n	8000f4e <HAL_ADC_Start_DMA+0x18e>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd8 <HAL_ADC_Start_DMA+0x218>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d105      	bne.n	8000f38 <HAL_ADC_Start_DMA+0x178>
 8000f2c:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <HAL_ADC_Start_DMA+0x204>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00a      	beq.n	8000f4e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a27      	ldr	r2, [pc, #156]	@ (8000fdc <HAL_ADC_Start_DMA+0x21c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d136      	bne.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
 8000f42:	4b20      	ldr	r3, [pc, #128]	@ (8000fc4 <HAL_ADC_Start_DMA+0x204>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d130      	bne.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d129      	bne.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	e020      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_ADC_Start_DMA+0x214>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d11b      	bne.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d114      	bne.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	e00b      	b.n	8000fb0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f043 0210 	orr.w	r2, r3, #16
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	40012300 	.word	0x40012300
 8000fc8:	08001479 	.word	0x08001479
 8000fcc:	08001533 	.word	0x08001533
 8000fd0:	0800154f 	.word	0x0800154f
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40012100 	.word	0x40012100
 8000fdc:	40012200 	.word	0x40012200

08000fe0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1c>
 8001034:	2302      	movs	r3, #2
 8001036:	e113      	b.n	8001260 <HAL_ADC_ConfigChannel+0x244>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b09      	cmp	r3, #9
 8001046:	d925      	bls.n	8001094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68d9      	ldr	r1, [r3, #12]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	3b1e      	subs	r3, #30
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43da      	mvns	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	400a      	ands	r2, r1
 800106c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68d9      	ldr	r1, [r3, #12]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	4603      	mov	r3, r0
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4403      	add	r3, r0
 8001086:	3b1e      	subs	r3, #30
 8001088:	409a      	lsls	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	e022      	b.n	80010da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6919      	ldr	r1, [r3, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	2207      	movs	r2, #7
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	400a      	ands	r2, r1
 80010b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6919      	ldr	r1, [r3, #16]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4403      	add	r3, r0
 80010d0:	409a      	lsls	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d824      	bhi.n	800112c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b05      	subs	r3, #5
 80010f4:	221f      	movs	r2, #31
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	400a      	ands	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b05      	subs	r3, #5
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	e04c      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b0c      	cmp	r3, #12
 8001132:	d824      	bhi.n	800117e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b23      	subs	r3, #35	@ 0x23
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43da      	mvns	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b23      	subs	r3, #35	@ 0x23
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
 800117c:	e023      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3b41      	subs	r3, #65	@ 0x41
 8001190:	221f      	movs	r2, #31
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	400a      	ands	r2, r1
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	3b41      	subs	r3, #65	@ 0x41
 80011ba:	fa00 f203 	lsl.w	r2, r0, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c6:	4b29      	ldr	r3, [pc, #164]	@ (800126c <HAL_ADC_ConfigChannel+0x250>)
 80011c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <HAL_ADC_ConfigChannel+0x254>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d10f      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x1d8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_ADC_ConfigChannel+0x254>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1c      	ldr	r2, [pc, #112]	@ (8001274 <HAL_ADC_ConfigChannel+0x258>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_ADC_ConfigChannel+0x1f4>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b11      	cmp	r3, #17
 800120e:	d122      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_ADC_ConfigChannel+0x258>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d111      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_ADC_ConfigChannel+0x25c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_ADC_ConfigChannel+0x260>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9a      	lsrs	r2, r3, #18
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001248:	e002      	b.n	8001250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40012300 	.word	0x40012300
 8001270:	40012000 	.word	0x40012000
 8001274:	10000012 	.word	0x10000012
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001288:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <ADC_Init+0x1f0>)
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	021a      	lsls	r2, r3, #8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6899      	ldr	r1, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	4a58      	ldr	r2, [pc, #352]	@ (8001474 <ADC_Init+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6899      	ldr	r1, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6899      	ldr	r1, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e00f      	b.n	800137e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800136c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800137c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0202 	bic.w	r2, r2, #2
 800138c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6899      	ldr	r1, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e1b      	ldrb	r3, [r3, #24]
 8001398:	005a      	lsls	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01b      	beq.n	80013e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6859      	ldr	r1, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	3b01      	subs	r3, #1
 80013d8:	035a      	lsls	r2, r3, #13
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e007      	b.n	80013f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	3b01      	subs	r3, #1
 8001410:	051a      	lsls	r2, r3, #20
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6899      	ldr	r1, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001436:	025a      	lsls	r2, r3, #9
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800144e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	029a      	lsls	r2, r3, #10
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40012300 	.word	0x40012300
 8001474:	0f000001 	.word	0x0f000001

08001478 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001484:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800148e:	2b00      	cmp	r3, #0
 8001490:	d13c      	bne.n	800150c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12b      	bne.n	8001504 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d127      	bne.n	8001504 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d119      	bne.n	8001504 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0220 	bic.w	r2, r2, #32
 80014de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff fd6b 	bl	8000fe0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800150a:	e00e      	b.n	800152a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fd75 	bl	8001008 <HAL_ADC_ErrorCallback>
}
 800151e:	e004      	b.n	800152a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fd57 	bl	8000ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2240      	movs	r2, #64	@ 0x40
 8001560:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f043 0204 	orr.w	r2, r3, #4
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff fd4a 	bl	8001008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	@ (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	@ (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	@ 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff3e 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff31 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff fa94 	bl	8000cd8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e099      	b.n	80018f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	e00f      	b.n	80017fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017de:	f7ff fa7b 	bl	8000cd8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d908      	bls.n	80017fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e078      	b.n	80018f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e8      	bne.n	80017de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <HAL_DMA_Init+0x158>)
 8001818:	4013      	ands	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	2b04      	cmp	r3, #4
 8001856:	d107      	bne.n	8001868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001860:	4313      	orrs	r3, r2
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	2b04      	cmp	r3, #4
 8001890:	d117      	bne.n	80018c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fa6f 	bl	8001d88 <DMA_CheckFifoParam>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2240      	movs	r2, #64	@ 0x40
 80018b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018be:	2301      	movs	r3, #1
 80018c0:	e016      	b.n	80018f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa26 	bl	8001d1c <DMA_CalcBaseAndBitshift>
 80018d0:	4603      	mov	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	223f      	movs	r2, #63	@ 0x3f
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	f010803f 	.word	0xf010803f

080018fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Start_IT+0x26>
 800191e:	2302      	movs	r3, #2
 8001920:	e040      	b.n	80019a4 <HAL_DMA_Start_IT+0xa8>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d12f      	bne.n	8001996 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f9b8 	bl	8001cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	223f      	movs	r2, #63	@ 0x3f
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0216 	orr.w	r2, r2, #22
 800196a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0208 	orr.w	r2, r2, #8
 8001982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e005      	b.n	80019a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019b8:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf4 <HAL_DMA_IRQHandler+0x248>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a8e      	ldr	r2, [pc, #568]	@ (8001bf8 <HAL_DMA_IRQHandler+0x24c>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0a9b      	lsrs	r3, r3, #10
 80019c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	2208      	movs	r2, #8
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01a      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	2208      	movs	r2, #8
 8001a06:	409a      	lsls	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d012      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	2204      	movs	r2, #4
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00b      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a70:	2204      	movs	r2, #4
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	f043 0204 	orr.w	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a88:	2210      	movs	r2, #16
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d043      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03c      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d018      	beq.n	8001aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d108      	bne.n	8001adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d024      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
 8001ada:	e01f      	b.n	8001b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01b      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
 8001aec:	e016      	b.n	8001b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0208 	bic.w	r2, r2, #8
 8001b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b20:	2220      	movs	r2, #32
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 808f 	beq.w	8001c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8087 	beq.w	8001c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2220      	movs	r2, #32
 8001b44:	409a      	lsls	r2, r3
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d136      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0216 	bic.w	r2, r2, #22
 8001b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x1da>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0208 	bic.w	r2, r2, #8
 8001b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9a:	223f      	movs	r2, #63	@ 0x3f
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d07e      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
        }
        return;
 8001bc2:	e079      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01d      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10d      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d031      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
 8001bf0:	e02c      	b.n	8001c4c <HAL_DMA_IRQHandler+0x2a0>
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
 8001c0c:	e01e      	b.n	8001c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10f      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0210 	bic.w	r2, r2, #16
 8001c2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d032      	beq.n	8001cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d022      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2205      	movs	r2, #5
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d307      	bcc.n	8001c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f2      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x2cc>
 8001c92:	e000      	b.n	8001c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
 8001cb6:	e000      	b.n	8001cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cb8:	bf00      	nop
    }
  }
}
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b40      	cmp	r3, #64	@ 0x40
 8001cec:	d108      	bne.n	8001d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cfe:	e007      	b.n	8001d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3b10      	subs	r3, #16
 8001d2c:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <DMA_CalcBaseAndBitshift+0x64>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <DMA_CalcBaseAndBitshift+0x68>)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d909      	bls.n	8001d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	1d1a      	adds	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d5c:	e007      	b.n	8001d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	aaaaaaab 	.word	0xaaaaaaab
 8001d84:	08008c28 	.word	0x08008c28

08001d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d11f      	bne.n	8001de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d856      	bhi.n	8001e56 <DMA_CheckFifoParam+0xce>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <DMA_CheckFifoParam+0x28>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dd3 	.word	0x08001dd3
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001e57 	.word	0x08001e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d046      	beq.n	8001e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd0:	e043      	b.n	8001e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dda:	d140      	bne.n	8001e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e03d      	b.n	8001e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dea:	d121      	bne.n	8001e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d837      	bhi.n	8001e62 <DMA_CheckFifoParam+0xda>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <DMA_CheckFifoParam+0x70>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e09 	.word	0x08001e09
 8001dfc:	08001e0f 	.word	0x08001e0f
 8001e00:	08001e09 	.word	0x08001e09
 8001e04:	08001e21 	.word	0x08001e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0c:	e030      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e1e:	e022      	b.n	8001e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e28:	d11f      	bne.n	8001e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e2e:	e01c      	b.n	8001e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d903      	bls.n	8001e3e <DMA_CheckFifoParam+0xb6>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d003      	beq.n	8001e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e3c:	e018      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      break;
 8001e42:	e015      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
      break;
 8001e54:	e00b      	b.n	8001e6e <DMA_CheckFifoParam+0xe6>
      break;
 8001e56:	bf00      	nop
 8001e58:	e00a      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5a:	bf00      	nop
 8001e5c:	e008      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e5e:	bf00      	nop
 8001e60:	e006      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e62:	bf00      	nop
 8001e64:	e004      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e66:	bf00      	nop
 8001e68:	e002      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e6a:	bf00      	nop
 8001e6c:	e000      	b.n	8001e70 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e165      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8154 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80ae 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b5d      	ldr	r3, [pc, #372]	@ (8002180 <HAL_GPIO_Init+0x300>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a5c      	ldr	r2, [pc, #368]	@ (8002180 <HAL_GPIO_Init+0x300>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b5a      	ldr	r3, [pc, #360]	@ (8002180 <HAL_GPIO_Init+0x300>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a58      	ldr	r2, [pc, #352]	@ (8002184 <HAL_GPIO_Init+0x304>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	@ (8002188 <HAL_GPIO_Init+0x308>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x21a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <HAL_GPIO_Init+0x30c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x216>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4d      	ldr	r2, [pc, #308]	@ (8002190 <HAL_GPIO_Init+0x310>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x212>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4c      	ldr	r2, [pc, #304]	@ (8002194 <HAL_GPIO_Init+0x314>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4b      	ldr	r2, [pc, #300]	@ (8002198 <HAL_GPIO_Init+0x318>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x20a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4a      	ldr	r2, [pc, #296]	@ (800219c <HAL_GPIO_Init+0x31c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x206>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a49      	ldr	r2, [pc, #292]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x202>
 800207e:	2306      	movs	r3, #6
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002082:	2307      	movs	r3, #7
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b3a      	ldr	r3, [pc, #232]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a31      	ldr	r2, [pc, #196]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a26      	ldr	r2, [pc, #152]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1c      	ldr	r2, [pc, #112]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a11      	ldr	r2, [pc, #68]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae96 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af02      	add	r7, sp, #8
 8002210:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e108      	b.n	800242e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f006 f92c 	bl	8008494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800224a:	d102      	bne.n	8002252 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fe85 	bl	8004f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7c1a      	ldrb	r2, [r3, #16]
 8002264:	f88d 2000 	strb.w	r2, [sp]
 8002268:	3304      	adds	r3, #4
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	f002 fd64 	bl	8004d38 <USB_CoreInit>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0d5      	b.n	800242e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fe7d 	bl	8004f88 <USB_SetCurrentMode>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0c6      	b.n	800242e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e04a      	b.n	800233c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3315      	adds	r3, #21
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3314      	adds	r3, #20
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b298      	uxth	r0, r3
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	332e      	adds	r3, #46	@ 0x2e
 80022e2:	4602      	mov	r2, r0
 80022e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3318      	adds	r3, #24
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	331c      	adds	r3, #28
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3320      	adds	r3, #32
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3324      	adds	r3, #36	@ 0x24
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	791b      	ldrb	r3, [r3, #4]
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3af      	bcc.n	80022a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e044      	b.n	80023d6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3b5      	bcc.n	800234c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c1a      	ldrb	r2, [r3, #16]
 80023e8:	f88d 2000 	strb.w	r2, [sp]
 80023ec:	3304      	adds	r3, #4
 80023ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f0:	f002 fe16 	bl	8005020 <USB_DevInit>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e013      	b.n	800242e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7b1b      	ldrb	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f001 f955 	bl	80036cc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fe4d 	bl	80060c6 <USB_DevDisconnect>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_PCD_Start+0x1c>
 800244e:	2302      	movs	r3, #2
 8002450:	e022      	b.n	8002498 <HAL_PCD_Start+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f002 fd60 	bl	8004f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fdfb 	bl	8006084 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b08d      	sub	sp, #52	@ 0x34
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 feb9 	bl	800622e <USB_GetMode>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 84b9 	bne.w	8002e36 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fe1d 	bl	8006108 <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 84af 	beq.w	8002e34 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fe0a 	bl	8006108 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0202 	and.w	r2, r2, #2
 800250c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fdf8 	bl	8006108 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b10      	cmp	r3, #16
 8002520:	d161      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2b02      	cmp	r3, #2
 800255c:	d124      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d035      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6a38      	ldr	r0, [r7, #32]
 800257e:	f003 fc2f 	bl	8005de0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258e:	441a      	add	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a0:	441a      	add	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	e016      	b.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	0c5b      	lsrs	r3, r3, #17
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d110      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025ba:	2208      	movs	r2, #8
 80025bc:	4619      	mov	r1, r3
 80025be:	6a38      	ldr	r0, [r7, #32]
 80025c0:	f003 fc0e 	bl	8005de0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0210 	orr.w	r2, r2, #16
 80025e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fd8c 	bl	8006108 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025fa:	f040 80a7 	bne.w	800274c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fd91 	bl	800612e <USB_ReadDevAllOutEpInterrupt>
 800260c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800260e:	e099      	b.n	8002744 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808e 	beq.w	8002738 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fdb5 	bl	8006196 <USB_ReadDevOutEPInterrupt>
 800262c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800264a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 feb7 	bl	80033c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 ff8d 	bl	8003590 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2310      	movs	r3, #16
 8002690:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d030      	beq.n	80026fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	2b80      	cmp	r3, #128	@ 0x80
 80026a6:	d109      	bne.n	80026bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	78db      	ldrb	r3, [r3, #3]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f005 fff0 	bl	80086cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2302      	movs	r3, #2
 80026fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002730:	461a      	mov	r2, r3
 8002732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f af62 	bne.w	8002610 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fcd9 	bl	8006108 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002760:	f040 80db 	bne.w	800291a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fcfa 	bl	8006162 <USB_ReadDevAllInEpInterrupt>
 800276e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002774:	e0cd      	b.n	8002912 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80c2 	beq.w	8002906 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fd20 	bl	80061d2 <USB_ReadDevInEPInterrupt>
 8002792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d057      	beq.n	800284e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027be:	4013      	ands	r3, r2
 80027c0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	799b      	ldrb	r3, [r3, #6]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d132      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3320      	adds	r3, #32
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	331c      	adds	r3, #28
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4419      	add	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	3320      	adds	r3, #32
 8002812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3324      	adds	r3, #36	@ 0x24
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800283a:	461a      	mov	r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	f003 fd27 	bl	8006290 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f005 feba 	bl	80085c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2340      	movs	r3, #64	@ 0x40
 80028a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028ae:	6a38      	ldr	r0, [r7, #32]
 80028b0:	f002 fd14 	bl	80052dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3310      	adds	r3, #16
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d108      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f005 ff07 	bl	80086f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2302      	movs	r3, #2
 80028f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fcd0 	bl	80032a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af2e 	bne.w	8002776 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fbf2 	bl	8006108 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800292a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800292e:	d122      	bne.n	8002976 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002956:	2100      	movs	r1, #0
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f006 f86f 	bl	8008a3c <HAL_PCDEx_LPM_Callback>
 800295e:	e002      	b.n	8002966 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f005 fea5 	bl	80086b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fbc4 	bl	8006108 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800298a:	d112      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f005 fe61 	bl	8008664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029b0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fba6 	bl	8006108 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c6:	d121      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80029d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80029fc:	2101      	movs	r1, #1
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f006 f81c 	bl	8008a3c <HAL_PCDEx_LPM_Callback>
 8002a04:	e002      	b.n	8002a0c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f005 fe2c 	bl	8008664 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fb79 	bl	8006108 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a20:	f040 80b7 	bne.w	8002b92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fc4c 	bl	80052dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a48:	e046      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a56:	461a      	mov	r2, r3
 8002a58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6e:	0151      	lsls	r1, r2, #5
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	440a      	add	r2, r1
 8002a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa2:	0151      	lsls	r1, r2, #5
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002aac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac2:	0151      	lsls	r1, r2, #5
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002acc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ad0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	461a      	mov	r2, r3
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d3b2      	bcc.n	8002a4a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002af6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7bdb      	ldrb	r3, [r3, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b10:	f043 030b 	orr.w	r3, r3, #11
 8002b14:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b26:	f043 030b 	orr.w	r3, r3, #11
 8002b2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2c:	e015      	b.n	8002b5a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b40:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b54:	f043 030b 	orr.w	r3, r3, #11
 8002b58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b68:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f003 fb87 	bl	8006290 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fab6 	bl	8006108 <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba6:	d123      	bne.n	8002bf0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fb4c 	bl	800624a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fc09 	bl	80053ce <USB_GetDevSpeed>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681c      	ldr	r4, [r3, #0]
 8002bc8:	f000 fe8a 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f002 f913 	bl	8004e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f005 fd19 	bl	8008612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fa87 	bl	8006108 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d10a      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f005 fcf6 	bl	80085f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 0208 	and.w	r2, r2, #8
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 fa72 	bl	8006108 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b80      	cmp	r3, #128	@ 0x80
 8002c2c:	d123      	bne.n	8002c76 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3e:	e014      	b.n	8002c6a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 faf0 	bl	8003244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	3301      	adds	r3, #1
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	791b      	ldrb	r3, [r3, #4]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d3e4      	bcc.n	8002c40 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 fa44 	bl	8006108 <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c8a:	d13c      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	e02b      	b.n	8002cea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d115      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da12      	bge.n	8002ce4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3317      	adds	r3, #23
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fab0 	bl	8003244 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	791b      	ldrb	r3, [r3, #4]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d3cd      	bcc.n	8002c92 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 f9fc 	bl	8006108 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d1a:	d156      	bne.n	8002dca <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d20:	e045      	b.n	8002dae <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d12e      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da2b      	bge.n	8002da8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d5c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d121      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da4:	6053      	str	r3, [r2, #4]
            break;
 8002da6:	e008      	b.n	8002dba <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	3301      	adds	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d3b3      	bcc.n	8002d22 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 f99a 	bl	8006108 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dde:	d10a      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 fc97 	bl	8008714 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 f984 	bl	8006108 <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d115      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f005 fc87 	bl	8008730 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e000      	b.n	8002e36 <HAL_PCD_IRQHandler+0x996>
      return;
 8002e34:	bf00      	nop
    }
  }
}
 8002e36:	3734      	adds	r7, #52	@ 0x34
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_PCD_SetAddress+0x1a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e012      	b.n	8002e7c <HAL_PCD_SetAddress+0x40>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f8e3 	bl	8006038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	70fb      	strb	r3, [r7, #3]
 8002e96:	460b      	mov	r3, r1
 8002e98:	803b      	strh	r3, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da0f      	bge.n	8002eca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 020f 	and.w	r2, r3, #15
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	3310      	adds	r3, #16
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00f      	b.n	8002eea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef6:	883a      	ldrh	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	78ba      	ldrb	r2, [r7, #2]
 8002f00:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f14:	78bb      	ldrb	r3, [r7, #2]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_EP_Open+0xaa>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_Open+0xc8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fa6b 	bl	8005418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0f      	bge.n	8002f88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	3310      	adds	r3, #16
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	705a      	strb	r2, [r3, #1]
 8002f86:	e00f      	b.n	8002fa8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_PCD_EP_Close+0x6e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e00e      	b.n	8002fe0 <HAL_PCD_EP_Close+0x8c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 faa9 	bl	8005528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2200      	movs	r2, #0
 8003028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	799b      	ldrb	r3, [r3, #6]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	799b      	ldrb	r3, [r3, #6]
 800304c:	461a      	mov	r2, r3
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	f002 fb46 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	460b      	mov	r3, r1
 800306c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3310      	adds	r3, #16
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2200      	movs	r2, #0
 8003096:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2201      	movs	r2, #1
 800309c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309e:	7afb      	ldrb	r3, [r7, #11]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	799b      	ldrb	r3, [r3, #6]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	799b      	ldrb	r3, [r3, #6]
 80030c0:	461a      	mov	r2, r3
 80030c2:	6979      	ldr	r1, [r7, #20]
 80030c4:	f002 fb0c 	bl	80056e0 <USB_EPStartXfer>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	7912      	ldrb	r2, [r2, #4]
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e04f      	b.n	8003190 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da0f      	bge.n	8003118 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	3310      	adds	r3, #16
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	705a      	strb	r2, [r3, #1]
 8003116:	e00d      	b.n	8003134 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_PCD_EP_SetStall+0x82>
 8003150:	2302      	movs	r3, #2
 8003152:	e01d      	b.n	8003190 <HAL_PCD_EP_SetStall+0xbe>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68f9      	ldr	r1, [r7, #12]
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fe94 	bl	8005e90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7999      	ldrb	r1, [r3, #6]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003180:	461a      	mov	r2, r3
 8003182:	f003 f885 	bl	8006290 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	7912      	ldrb	r2, [r2, #4]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e042      	b.n	800323c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da0f      	bge.n	80031de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3310      	adds	r3, #16
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	705a      	strb	r2, [r3, #1]
 80031dc:	e00f      	b.n	80031fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_EP_ClrStall+0x86>
 800321a:	2302      	movs	r3, #2
 800321c:	e00e      	b.n	800323c <HAL_PCD_EP_ClrStall+0xa4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fe9d 	bl	8005f6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da0c      	bge.n	8003272 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3310      	adds	r3, #16
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e00c      	b.n	800328c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f002 fcbc 	bl	8005c10 <USB_EPStopXfer>
 8003298:	4603      	mov	r3, r0
 800329a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800329c:	7afb      	ldrb	r3, [r7, #11]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	@ 0x28
 80032aa:	af02      	add	r7, sp, #8
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3310      	adds	r3, #16
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3304      	adds	r3, #4
 80032cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d901      	bls.n	80032de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06b      	b.n	80033b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d902      	bls.n	80032fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3303      	adds	r3, #3
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003302:	e02a      	b.n	800335a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	429a      	cmp	r2, r3
 8003318:	d902      	bls.n	8003320 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3303      	adds	r3, #3
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	4603      	mov	r3, r0
 800333c:	6978      	ldr	r0, [r7, #20]
 800333e:	f002 fd11 	bl	8005d64 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	441a      	add	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	441a      	add	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	429a      	cmp	r2, r3
 800336e:	d809      	bhi.n	8003384 <PCD_WriteEmptyTxFifo+0xde>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003378:	429a      	cmp	r2, r3
 800337a:	d203      	bcs.n	8003384 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1bf      	bne.n	8003304 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	d811      	bhi.n	80033b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2201      	movs	r2, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	6939      	ldr	r1, [r7, #16]
 80033ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033b0:	4013      	ands	r3, r2
 80033b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	333c      	adds	r3, #60	@ 0x3c
 80033d8:	3304      	adds	r3, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d17b      	bne.n	80034ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4a61      	ldr	r2, [pc, #388]	@ (8003588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	f240 80b9 	bls.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80b3 	beq.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003428:	6093      	str	r3, [r2, #8]
 800342a:	e0a7      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	2320      	movs	r3, #32
 8003446:	6093      	str	r3, [r2, #8]
 8003448:	e098      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 8093 	bne.w	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4a4b      	ldr	r2, [pc, #300]	@ (8003588 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90f      	bls.n	800347e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003474:	461a      	mov	r2, r3
 8003476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347a:	6093      	str	r3, [r2, #8]
 800347c:	e07e      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	3304      	adds	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	0159      	lsls	r1, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	440b      	add	r3, r1
 80034a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	1ad2      	subs	r2, r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d114      	bne.n	80034e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034c8:	461a      	mov	r2, r3
 80034ca:	2101      	movs	r1, #1
 80034cc:	f002 fee0 	bl	8006290 <USB_EP0_OutStart>
 80034d0:	e006      	b.n	80034e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	441a      	add	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 f850 	bl	800858c <HAL_PCD_DataOutStageCallback>
 80034ec:	e046      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4a26      	ldr	r2, [pc, #152]	@ (800358c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d124      	bne.n	8003540 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e032      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f005 f827 	bl	800858c <HAL_PCD_DataOutStageCallback>
 800353e:	e01d      	b.n	800357c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d114      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d108      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003568:	461a      	mov	r2, r3
 800356a:	2100      	movs	r1, #0
 800356c:	f002 fe90 	bl	8006290 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f005 f808 	bl	800858c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	4f54300a 	.word	0x4f54300a
 800358c:	4f54310a 	.word	0x4f54310a

08003590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	333c      	adds	r3, #60	@ 0x3c
 80035a8:	3304      	adds	r3, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <PCD_EP_OutSetupPacket_int+0x88>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d90e      	bls.n	80035e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f004 ffbf 	bl	8008568 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d90c      	bls.n	800360c <PCD_EP_OutSetupPacket_int+0x7c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	799b      	ldrb	r3, [r3, #6]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d108      	bne.n	800360c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003604:	461a      	mov	r2, r3
 8003606:	2101      	movs	r1, #1
 8003608:	f002 fe42 	bl	8006290 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	4f54300a 	.word	0x4f54300a

0800361c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
 8003628:	4613      	mov	r3, r2
 800362a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800363a:	883b      	ldrh	r3, [r7, #0]
 800363c:	0419      	lsls	r1, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	430a      	orrs	r2, r1
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
 8003648:	e028      	b.n	800369c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e00d      	b.n	800367a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	3340      	adds	r3, #64	@ 0x40
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4413      	add	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	3301      	adds	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	3b01      	subs	r3, #1
 8003680:	429a      	cmp	r2, r3
 8003682:	d3ec      	bcc.n	800365e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003684:	883b      	ldrh	r3, [r7, #0]
 8003686:	0418      	lsls	r0, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6819      	ldr	r1, [r3, #0]
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	3b01      	subs	r3, #1
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4302      	orrs	r2, r0
 8003694:	3340      	adds	r3, #64	@ 0x40
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	f043 0303 	orr.w	r3, r3, #3
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0cc      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b68      	ldr	r3, [pc, #416]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d90c      	bls.n	8003750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b65      	ldr	r3, [pc, #404]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0b8      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b59      	ldr	r3, [pc, #356]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a58      	ldr	r2, [pc, #352]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003780:	4b53      	ldr	r3, [pc, #332]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a52      	ldr	r2, [pc, #328]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800378a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	494d      	ldr	r1, [pc, #308]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d044      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d119      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b3f      	ldr	r3, [pc, #252]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e067      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4934      	ldr	r1, [pc, #208]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fd fa68 	bl	8000cd8 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fd fa64 	bl	8000cd8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04f      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2b      	ldr	r3, [pc, #172]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20c      	bcs.n	800385c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e032      	b.n	80038c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4916      	ldr	r1, [pc, #88]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490e      	ldr	r1, [pc, #56]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800389a:	f000 fb57 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490a      	ldr	r1, [pc, #40]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038b6:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd f9c8 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023c00 	.word	0x40023c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08008c18 	.word	0x08008c18
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	@ 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d010      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003936:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	496c      	ldr	r1, [pc, #432]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d010      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800395e:	4b64      	ldr	r3, [pc, #400]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	4960      	ldr	r1, [pc, #384]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398c:	4b58      	ldr	r3, [pc, #352]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	4955      	ldr	r1, [pc, #340]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039aa:	d101      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80039ac:	2301      	movs	r3, #1
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80039b8:	2301      	movs	r3, #1
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039c8:	4b49      	ldr	r3, [pc, #292]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	4946      	ldr	r1, [pc, #280]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e6:	d101      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80039e8:	2301      	movs	r3, #1
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80039f4:	2301      	movs	r3, #1
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808a 	beq.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a38      	ldr	r2, [pc, #224]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a16:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a22:	4b34      	ldr	r3, [pc, #208]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a33      	ldr	r2, [pc, #204]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2e:	f7fd f953 	bl	8000cd8 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fd f94f 	bl	8000cd8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e278      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a48:	4b2a      	ldr	r3, [pc, #168]	@ (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a54:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02f      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a72:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a82:	4b1d      	ldr	r3, [pc, #116]	@ (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a8e:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d114      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fd f91d 	bl	8000cd8 <HAL_GetTick>
 8003a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd f919 	bl	8000cd8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e240      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad0:	d114      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae6:	4902      	ldr	r1, [pc, #8]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
 8003aec:	e00c      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40007000 	.word	0x40007000
 8003af8:	42470e40 	.word	0x42470e40
 8003afc:	4b4a      	ldr	r3, [pc, #296]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a49      	ldr	r2, [pc, #292]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b06:	6093      	str	r3, [r2, #8]
 8003b08:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	4944      	ldr	r1, [pc, #272]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	4937      	ldr	r1, [pc, #220]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b5e:	4b32      	ldr	r3, [pc, #200]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6c:	492e      	ldr	r1, [pc, #184]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d011      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b80:	4b29      	ldr	r3, [pc, #164]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8e:	4926      	ldr	r1, [pc, #152]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	491a      	ldr	r1, [pc, #104]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003bd2:	4b15      	ldr	r3, [pc, #84]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	4911      	ldr	r1, [pc, #68]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c04:	f040 80ff 	bne.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd f863 	bl	8000cd8 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c14:	e00e      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c16:	f7fd f85f 	bl	8000cd8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d907      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e188      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	424711e0 	.word	0x424711e0
 8003c30:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c34:	4b7e      	ldr	r3, [pc, #504]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ea      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d028      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d124      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003c68:	4b71      	ldr	r3, [pc, #452]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	3301      	adds	r3, #1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	071b      	lsls	r3, r3, #28
 8003caa:	4961      	ldr	r1, [pc, #388]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d035      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cdc:	d130      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cf6:	0f1b      	lsrs	r3, r3, #28
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	019b      	lsls	r3, r3, #6
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	041b      	lsls	r3, r3, #16
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	071b      	lsls	r3, r3, #28
 8003d20:	4943      	ldr	r1, [pc, #268]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d2e:	f023 021f 	bic.w	r2, r3, #31
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	493d      	ldr	r1, [pc, #244]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d029      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d54:	d124      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d56:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d68:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d6e:	0f1b      	lsrs	r3, r3, #28
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	019b      	lsls	r3, r3, #6
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	071b      	lsls	r3, r3, #28
 8003d98:	4925      	ldr	r1, [pc, #148]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d016      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	071b      	lsls	r3, r3, #28
 8003dd2:	4917      	ldr	r1, [pc, #92]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dda:	4b16      	ldr	r3, [pc, #88]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fc ff7a 	bl	8000cd8 <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003de8:	f7fc ff76 	bl	8000cd8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e09f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 8095 	bne.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fc ff60 	bl	8000cd8 <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e1a:	e00f      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e1c:	f7fc ff5c 	bl	8000cd8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d908      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e085      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	42470068 	.word	0x42470068
 8003e38:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e3c:	4b41      	ldr	r3, [pc, #260]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e48:	d0e8      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d127      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003e72:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	4928      	ldr	r1, [pc, #160]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ea8:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	4922      	ldr	r1, [pc, #136]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d01d      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ed6:	d118      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	0e1b      	lsrs	r3, r3, #24
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	019b      	lsls	r3, r3, #6
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	4910      	ldr	r1, [pc, #64]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f10:	f7fc fee2 	bl	8000cd8 <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f18:	f7fc fede 	bl	8000cd8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e007      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f36:	d1ef      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3730      	adds	r7, #48	@ 0x30
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	42470070 	.word	0x42470070

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b0ae      	sub	sp, #184	@ 0xb8
 8003f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f72:	4bcb      	ldr	r3, [pc, #812]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	f200 8206 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x440>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	0800438d 	.word	0x0800438d
 8003f90:	0800438d 	.word	0x0800438d
 8003f94:	0800438d 	.word	0x0800438d
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	0800438d 	.word	0x0800438d
 8003fa0:	0800438d 	.word	0x0800438d
 8003fa4:	0800438d 	.word	0x0800438d
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	0800438d 	.word	0x0800438d
 8003fb0:	0800438d 	.word	0x0800438d
 8003fb4:	0800438d 	.word	0x0800438d
 8003fb8:	080041bd 	.word	0x080041bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4bb9      	ldr	r3, [pc, #740]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003fc2:	e1e7      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc4:	4bb8      	ldr	r3, [pc, #736]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fca:	e1e3      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fcc:	4bb4      	ldr	r3, [pc, #720]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fd8:	4bb1      	ldr	r3, [pc, #708]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d071      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe4:	4bae      	ldr	r3, [pc, #696]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ff0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	0159      	lsls	r1, r3, #5
 8004018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401c:	0150      	lsls	r0, r2, #5
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4621      	mov	r1, r4
 8004024:	1a51      	subs	r1, r2, r1
 8004026:	6439      	str	r1, [r7, #64]	@ 0x40
 8004028:	4629      	mov	r1, r5
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800403c:	4649      	mov	r1, r9
 800403e:	018b      	lsls	r3, r1, #6
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004046:	4641      	mov	r1, r8
 8004048:	018a      	lsls	r2, r1, #6
 800404a:	4641      	mov	r1, r8
 800404c:	1a51      	subs	r1, r2, r1
 800404e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004050:	4649      	mov	r1, r9
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004064:	4649      	mov	r1, r9
 8004066:	00cb      	lsls	r3, r1, #3
 8004068:	4641      	mov	r1, r8
 800406a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800406e:	4641      	mov	r1, r8
 8004070:	00ca      	lsls	r2, r1, #3
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	4603      	mov	r3, r0
 8004078:	4622      	mov	r2, r4
 800407a:	189b      	adds	r3, r3, r2
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
 800407e:	462b      	mov	r3, r5
 8004080:	460a      	mov	r2, r1
 8004082:	eb42 0303 	adc.w	r3, r2, r3
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004094:	4629      	mov	r1, r5
 8004096:	024b      	lsls	r3, r1, #9
 8004098:	4621      	mov	r1, r4
 800409a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800409e:	4621      	mov	r1, r4
 80040a0:	024a      	lsls	r2, r1, #9
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80040b8:	f7fc f8a4 	bl	8000204 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4613      	mov	r3, r2
 80040c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c6:	e067      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	4b75      	ldr	r3, [pc, #468]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80040d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040e2:	2300      	movs	r3, #0
 80040e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	f04f 0000 	mov.w	r0, #0
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	0159      	lsls	r1, r3, #5
 80040f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fc:	0150      	lsls	r0, r2, #5
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4621      	mov	r1, r4
 8004104:	1a51      	subs	r1, r2, r1
 8004106:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004108:	4629      	mov	r1, r5
 800410a:	eb63 0301 	sbc.w	r3, r3, r1
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800411c:	4649      	mov	r1, r9
 800411e:	018b      	lsls	r3, r1, #6
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004126:	4641      	mov	r1, r8
 8004128:	018a      	lsls	r2, r1, #6
 800412a:	4641      	mov	r1, r8
 800412c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004130:	4649      	mov	r1, r9
 8004132:	eb63 0b01 	sbc.w	fp, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004142:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414a:	4692      	mov	sl, r2
 800414c:	469b      	mov	fp, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb1a 0303 	adds.w	r3, sl, r3
 8004154:	623b      	str	r3, [r7, #32]
 8004156:	462b      	mov	r3, r5
 8004158:	eb4b 0303 	adc.w	r3, fp, r3
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800416a:	4629      	mov	r1, r5
 800416c:	028b      	lsls	r3, r1, #10
 800416e:	4621      	mov	r1, r4
 8004170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004174:	4621      	mov	r1, r4
 8004176:	028a      	lsls	r2, r1, #10
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004180:	2200      	movs	r2, #0
 8004182:	673b      	str	r3, [r7, #112]	@ 0x70
 8004184:	677a      	str	r2, [r7, #116]	@ 0x74
 8004186:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800418a:	f7fc f83b 	bl	8000204 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4613      	mov	r3, r2
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80041aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80041ba:	e0eb      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041bc:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d06b      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d4:	4b32      	ldr	r3, [pc, #200]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	2200      	movs	r2, #0
 80041dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e8:	2300      	movs	r3, #0
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80041f0:	4622      	mov	r2, r4
 80041f2:	462b      	mov	r3, r5
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	0159      	lsls	r1, r3, #5
 80041fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004202:	0150      	lsls	r0, r2, #5
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4621      	mov	r1, r4
 800420a:	1a51      	subs	r1, r2, r1
 800420c:	61b9      	str	r1, [r7, #24]
 800420e:	4629      	mov	r1, r5
 8004210:	eb63 0301 	sbc.w	r3, r3, r1
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004222:	4659      	mov	r1, fp
 8004224:	018b      	lsls	r3, r1, #6
 8004226:	4651      	mov	r1, sl
 8004228:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800422c:	4651      	mov	r1, sl
 800422e:	018a      	lsls	r2, r1, #6
 8004230:	4651      	mov	r1, sl
 8004232:	ebb2 0801 	subs.w	r8, r2, r1
 8004236:	4659      	mov	r1, fp
 8004238:	eb63 0901 	sbc.w	r9, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004248:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004250:	4690      	mov	r8, r2
 8004252:	4699      	mov	r9, r3
 8004254:	4623      	mov	r3, r4
 8004256:	eb18 0303 	adds.w	r3, r8, r3
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	462b      	mov	r3, r5
 800425e:	eb49 0303 	adc.w	r3, r9, r3
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004270:	4629      	mov	r1, r5
 8004272:	024b      	lsls	r3, r1, #9
 8004274:	4621      	mov	r1, r4
 8004276:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800427a:	4621      	mov	r1, r4
 800427c:	024a      	lsls	r2, r1, #9
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004286:	2200      	movs	r2, #0
 8004288:	65bb      	str	r3, [r7, #88]	@ 0x58
 800428a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800428c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004290:	f7fb ffb8 	bl	8000204 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800429e:	e065      	b.n	800436c <HAL_RCC_GetSysClockFreq+0x420>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	2200      	movs	r2, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	4611      	mov	r1, r2
 80042b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80042be:	2300      	movs	r3, #0
 80042c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80042c6:	4642      	mov	r2, r8
 80042c8:	464b      	mov	r3, r9
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	0159      	lsls	r1, r3, #5
 80042d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d8:	0150      	lsls	r0, r2, #5
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4641      	mov	r1, r8
 80042e0:	1a51      	subs	r1, r2, r1
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	4649      	mov	r1, r9
 80042e6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042f8:	4659      	mov	r1, fp
 80042fa:	018b      	lsls	r3, r1, #6
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004302:	4651      	mov	r1, sl
 8004304:	018a      	lsls	r2, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	1a54      	subs	r4, r2, r1
 800430a:	4659      	mov	r1, fp
 800430c:	eb63 0501 	sbc.w	r5, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	00eb      	lsls	r3, r5, #3
 800431a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431e:	00e2      	lsls	r2, r4, #3
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	4643      	mov	r3, r8
 8004326:	18e3      	adds	r3, r4, r3
 8004328:	603b      	str	r3, [r7, #0]
 800432a:	464b      	mov	r3, r9
 800432c:	eb45 0303 	adc.w	r3, r5, r3
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433e:	4629      	mov	r1, r5
 8004340:	028b      	lsls	r3, r1, #10
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004348:	4621      	mov	r1, r4
 800434a:	028a      	lsls	r2, r1, #10
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004354:	2200      	movs	r2, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004358:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800435a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800435e:	f7fb ff51 	bl	8000204 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4613      	mov	r3, r2
 8004368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	0f1b      	lsrs	r3, r3, #28
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800437a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800437e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800438a:	e003      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800438e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004398:	4618      	mov	r0, r3
 800439a:	37b8      	adds	r7, #184	@ 0xb8
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400

080043ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e28d      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8083 	beq.w	80044d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043cc:	4b94      	ldr	r3, [pc, #592]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d019      	beq.n	800440c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043d8:	4b91      	ldr	r3, [pc, #580]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f0:	d00c      	beq.n	800440c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f2:	4b8b      	ldr	r3, [pc, #556]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d112      	bne.n	8004424 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	4b88      	ldr	r3, [pc, #544]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004406:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440a:	d10b      	bne.n	8004424 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	4b84      	ldr	r3, [pc, #528]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05b      	beq.n	80044d0 <HAL_RCC_OscConfig+0x124>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d157      	bne.n	80044d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e25a      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d106      	bne.n	800443c <HAL_RCC_OscConfig+0x90>
 800442e:	4b7c      	ldr	r3, [pc, #496]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7b      	ldr	r2, [pc, #492]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e01d      	b.n	8004478 <HAL_RCC_OscConfig+0xcc>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0xb4>
 8004446:	4b76      	ldr	r3, [pc, #472]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a75      	ldr	r2, [pc, #468]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b73      	ldr	r3, [pc, #460]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a72      	ldr	r2, [pc, #456]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0xcc>
 8004460:	4b6f      	ldr	r3, [pc, #444]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a6e      	ldr	r2, [pc, #440]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b6c      	ldr	r3, [pc, #432]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6b      	ldr	r2, [pc, #428]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc fc2a 	bl	8000cd8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004488:	f7fc fc26 	bl	8000cd8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e21f      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0xdc>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fc fc16 	bl	8000cd8 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fc fc12 	bl	8000cd8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e20b      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	4b57      	ldr	r3, [pc, #348]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x104>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06f      	beq.n	80045be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044de:	4b50      	ldr	r3, [pc, #320]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044ea:	4b4d      	ldr	r3, [pc, #308]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d105      	bne.n	8004502 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00b      	beq.n	800451a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004502:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d11c      	bne.n	8004548 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d116      	bne.n	8004548 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_RCC_OscConfig+0x186>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e1d3      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004532:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4937      	ldr	r1, [pc, #220]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	e03a      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d020      	beq.n	8004592 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004550:	4b34      	ldr	r3, [pc, #208]	@ (8004624 <HAL_RCC_OscConfig+0x278>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fc fbbf 	bl	8000cd8 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455e:	f7fc fbbb 	bl	8000cd8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e1b4      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4925      	ldr	r1, [pc, #148]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e015      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b24      	ldr	r3, [pc, #144]	@ (8004624 <HAL_RCC_OscConfig+0x278>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fc fb9e 	bl	8000cd8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fc fb9a 	bl	8000cd8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e193      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d8:	f7fc fb7e 	bl	8000cd8 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e0:	f7fc fb7a 	bl	8000cd8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e173      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_RCC_OscConfig+0x274>)
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x234>
 80045fe:	e01b      	b.n	8004638 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004600:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_OscConfig+0x27c>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7fc fb67 	bl	8000cd8 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	e00e      	b.n	800462c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460e:	f7fc fb63 	bl	8000cd8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d907      	bls.n	800462c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e15c      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
 8004620:	40023800 	.word	0x40023800
 8004624:	42470000 	.word	0x42470000
 8004628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800462c:	4b8a      	ldr	r3, [pc, #552]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800462e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ea      	bne.n	800460e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8097 	beq.w	8004774 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b83      	ldr	r3, [pc, #524]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	4b7f      	ldr	r3, [pc, #508]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465e:	4a7e      	ldr	r2, [pc, #504]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	@ 0x40
 8004666:	4b7c      	ldr	r3, [pc, #496]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004676:	4b79      	ldr	r3, [pc, #484]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d118      	bne.n	80046b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004682:	4b76      	ldr	r3, [pc, #472]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 8004688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468e:	f7fc fb23 	bl	8000cd8 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004696:	f7fc fb1f 	bl	8000cd8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e118      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	4b6c      	ldr	r3, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x4b0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d106      	bne.n	80046ca <HAL_RCC_OscConfig+0x31e>
 80046bc:	4b66      	ldr	r3, [pc, #408]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c8:	e01c      	b.n	8004704 <HAL_RCC_OscConfig+0x358>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b05      	cmp	r3, #5
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x340>
 80046d2:	4b61      	ldr	r3, [pc, #388]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	4a60      	ldr	r2, [pc, #384]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046de:	4b5e      	ldr	r3, [pc, #376]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0x358>
 80046ec:	4b5a      	ldr	r3, [pc, #360]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	4a59      	ldr	r2, [pc, #356]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f8:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	4a56      	ldr	r2, [pc, #344]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80046fe:	f023 0304 	bic.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fc fae4 	bl	8000cd8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	e00a      	b.n	800472a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004714:	f7fc fae0 	bl	8000cd8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e0d7      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	4b4b      	ldr	r3, [pc, #300]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0ee      	beq.n	8004714 <HAL_RCC_OscConfig+0x368>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fc face 	bl	8000cd8 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fc faca 	bl	8000cd8 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e0c1      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1ee      	bne.n	8004740 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	4a3a      	ldr	r2, [pc, #232]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80ad 	beq.w	80048d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477e:	4b36      	ldr	r3, [pc, #216]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b08      	cmp	r3, #8
 8004788:	d060      	beq.n	800484c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d145      	bne.n	800481e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004792:	4b33      	ldr	r3, [pc, #204]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fc fa9e 	bl	8000cd8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc fa9a 	bl	8000cd8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e093      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b29      	ldr	r3, [pc, #164]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491b      	ldr	r1, [pc, #108]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fc fa6f 	bl	8000cd8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fc fa6b 	bl	8000cd8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e064      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x452>
 800481c:	e05c      	b.n	80048d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCC_OscConfig+0x4b4>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc fa58 	bl	8000cd8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fa54 	bl	8000cd8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e04d      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_RCC_OscConfig+0x4ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x480>
 800484a:	e045      	b.n	80048d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e040      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
 8004860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004864:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <HAL_RCC_OscConfig+0x538>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d030      	beq.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d129      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d122      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800489a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d119      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10f      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800

080048e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e041      	b.n	800497e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc f8ca 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 f946 	bl	8004bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f06f 0202 	mvn.w	r2, #2
 80049ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8d2 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 80049d6:	e005      	b.n	80049e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8c4 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8d5 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f06f 0204 	mvn.w	r2, #4
 8004a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8ac 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004a22:	e005      	b.n	8004a30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f89e 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8af 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01b      	beq.n	8004a82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0208 	mvn.w	r2, #8
 8004a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2204      	movs	r2, #4
 8004a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f886 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f878 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f889 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0210 	mvn.w	r2, #16
 8004a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f860 	bl	8004b7a <HAL_TIM_IC_CaptureCallback>
 8004aba:	e005      	b.n	8004ac8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f852 	bl	8004b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f863 	bl	8004b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0201 	mvn.w	r2, #1
 8004aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7fb fef3 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00c      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f907 	bl	8004d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f834 	bl	8004ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f06f 0220 	mvn.w	r2, #32
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8d9 	bl	8004d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a46      	ldr	r2, [pc, #280]	@ (8004ce4 <TIM_Base_SetConfig+0x12c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a43      	ldr	r2, [pc, #268]	@ (8004ce8 <TIM_Base_SetConfig+0x130>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a42      	ldr	r2, [pc, #264]	@ (8004cec <TIM_Base_SetConfig+0x134>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a41      	ldr	r2, [pc, #260]	@ (8004cf0 <TIM_Base_SetConfig+0x138>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a40      	ldr	r2, [pc, #256]	@ (8004cf4 <TIM_Base_SetConfig+0x13c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a35      	ldr	r2, [pc, #212]	@ (8004ce4 <TIM_Base_SetConfig+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c18:	d027      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a32      	ldr	r2, [pc, #200]	@ (8004ce8 <TIM_Base_SetConfig+0x130>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d023      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a31      	ldr	r2, [pc, #196]	@ (8004cec <TIM_Base_SetConfig+0x134>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d01f      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	@ (8004cf0 <TIM_Base_SetConfig+0x138>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <TIM_Base_SetConfig+0x13c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d017      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf8 <TIM_Base_SetConfig+0x140>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d013      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2d      	ldr	r2, [pc, #180]	@ (8004cfc <TIM_Base_SetConfig+0x144>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <TIM_Base_SetConfig+0x148>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2b      	ldr	r2, [pc, #172]	@ (8004d04 <TIM_Base_SetConfig+0x14c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d08 <TIM_Base_SetConfig+0x150>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a29      	ldr	r2, [pc, #164]	@ (8004d0c <TIM_Base_SetConfig+0x154>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d108      	bne.n	8004c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a10      	ldr	r2, [pc, #64]	@ (8004ce4 <TIM_Base_SetConfig+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0xf8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a12      	ldr	r2, [pc, #72]	@ (8004cf4 <TIM_Base_SetConfig+0x13c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f023 0201 	bic.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	611a      	str	r2, [r3, #16]
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40010400 	.word	0x40010400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40014400 	.word	0x40014400
 8004d00:	40014800 	.word	0x40014800
 8004d04:	40001800 	.word	0x40001800
 8004d08:	40001c00 	.word	0x40001c00
 8004d0c:	40002000 	.word	0x40002000

08004d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d38:	b084      	sub	sp, #16
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	f107 001c 	add.w	r0, r7, #28
 8004d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d123      	bne.n	8004d9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fadc 	bl	800634c <USB_CoreReset>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e01b      	b.n	8004dd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f001 fad0 	bl	800634c <USB_CoreReset>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004db0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dc4:	e005      	b.n	8004dd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dd2:	7fbb      	ldrb	r3, [r7, #30]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10b      	bne.n	8004df0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f043 0206 	orr.w	r2, r3, #6
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f043 0220 	orr.w	r2, r3, #32
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dfc:	b004      	add	sp, #16
 8004dfe:	4770      	bx	lr

08004e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d165      	bne.n	8004ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a41      	ldr	r2, [pc, #260]	@ (8004f1c <USB_SetTurnaroundTime+0x11c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d906      	bls.n	8004e2a <USB_SetTurnaroundTime+0x2a>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a40      	ldr	r2, [pc, #256]	@ (8004f20 <USB_SetTurnaroundTime+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d202      	bcs.n	8004e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e24:	230f      	movs	r3, #15
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e062      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <USB_SetTurnaroundTime+0x120>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d306      	bcc.n	8004e40 <USB_SetTurnaroundTime+0x40>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <USB_SetTurnaroundTime+0x124>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d202      	bcs.n	8004e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e3a:	230e      	movs	r3, #14
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e057      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a38      	ldr	r2, [pc, #224]	@ (8004f24 <USB_SetTurnaroundTime+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d306      	bcc.n	8004e56 <USB_SetTurnaroundTime+0x56>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a37      	ldr	r2, [pc, #220]	@ (8004f28 <USB_SetTurnaroundTime+0x128>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d202      	bcs.n	8004e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e50:	230d      	movs	r3, #13
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e04c      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a33      	ldr	r2, [pc, #204]	@ (8004f28 <USB_SetTurnaroundTime+0x128>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d306      	bcc.n	8004e6c <USB_SetTurnaroundTime+0x6c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <USB_SetTurnaroundTime+0x12c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d802      	bhi.n	8004e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e66:	230c      	movs	r3, #12
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e041      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8004f2c <USB_SetTurnaroundTime+0x12c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d906      	bls.n	8004e82 <USB_SetTurnaroundTime+0x82>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4a2e      	ldr	r2, [pc, #184]	@ (8004f30 <USB_SetTurnaroundTime+0x130>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d802      	bhi.n	8004e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e7c:	230b      	movs	r3, #11
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e036      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <USB_SetTurnaroundTime+0x130>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d906      	bls.n	8004e98 <USB_SetTurnaroundTime+0x98>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4a29      	ldr	r2, [pc, #164]	@ (8004f34 <USB_SetTurnaroundTime+0x134>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d802      	bhi.n	8004e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e92:	230a      	movs	r3, #10
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	e02b      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <USB_SetTurnaroundTime+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d906      	bls.n	8004eae <USB_SetTurnaroundTime+0xae>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	@ (8004f38 <USB_SetTurnaroundTime+0x138>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d202      	bcs.n	8004eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ea8:	2309      	movs	r3, #9
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e020      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <USB_SetTurnaroundTime+0x138>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d306      	bcc.n	8004ec4 <USB_SetTurnaroundTime+0xc4>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <USB_SetTurnaroundTime+0x13c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d802      	bhi.n	8004ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	e015      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <USB_SetTurnaroundTime+0x13c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d906      	bls.n	8004eda <USB_SetTurnaroundTime+0xda>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <USB_SetTurnaroundTime+0x140>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d202      	bcs.n	8004eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ed4:	2307      	movs	r3, #7
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e00a      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004eda:	2306      	movs	r3, #6
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e007      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d102      	bne.n	8004eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ee6:	2309      	movs	r3, #9
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e001      	b.n	8004ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004eec:	2309      	movs	r3, #9
 8004eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	029b      	lsls	r3, r3, #10
 8004f04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	00d8acbf 	.word	0x00d8acbf
 8004f20:	00e4e1c0 	.word	0x00e4e1c0
 8004f24:	00f42400 	.word	0x00f42400
 8004f28:	01067380 	.word	0x01067380
 8004f2c:	011a499f 	.word	0x011a499f
 8004f30:	01312cff 	.word	0x01312cff
 8004f34:	014ca43f 	.word	0x014ca43f
 8004f38:	016e3600 	.word	0x016e3600
 8004f3c:	01a6ab1f 	.word	0x01a6ab1f
 8004f40:	01e84800 	.word	0x01e84800

08004f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d115      	bne.n	8004fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fb6:	200a      	movs	r0, #10
 8004fb8:	f7fb fe9a 	bl	8000cf0 <HAL_Delay>
      ms += 10U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	330a      	adds	r3, #10
 8004fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f933 	bl	800622e <USB_GetMode>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d01e      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fd2:	d9f0      	bls.n	8004fb6 <USB_SetCurrentMode+0x2e>
 8004fd4:	e01a      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d115      	bne.n	8005008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fe8:	200a      	movs	r0, #10
 8004fea:	f7fb fe81 	bl	8000cf0 <HAL_Delay>
      ms += 10U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	330a      	adds	r3, #10
 8004ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 f91a 	bl	800622e <USB_GetMode>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <USB_SetCurrentMode+0x84>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2bc7      	cmp	r3, #199	@ 0xc7
 8005004:	d9f0      	bls.n	8004fe8 <USB_SetCurrentMode+0x60>
 8005006:	e001      	b.n	800500c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e005      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005010:	d101      	bne.n	8005016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005020:	b084      	sub	sp, #16
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800502e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800503a:	2300      	movs	r3, #0
 800503c:	613b      	str	r3, [r7, #16]
 800503e:	e009      	b.n	8005054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3340      	adds	r3, #64	@ 0x40
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3301      	adds	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b0e      	cmp	r3, #14
 8005058:	d9f2      	bls.n	8005040 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800505a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11c      	bne.n	800509c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e005      	b.n	80050a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050ae:	461a      	mov	r2, r3
 80050b0:	2300      	movs	r3, #0
 80050b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10d      	bne.n	80050d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050c4:	2100      	movs	r1, #0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f968 	bl	800539c <USB_SetDevSpeed>
 80050cc:	e008      	b.n	80050e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050ce:	2101      	movs	r1, #1
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f963 	bl	800539c <USB_SetDevSpeed>
 80050d6:	e003      	b.n	80050e0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050d8:	2103      	movs	r1, #3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f95e 	bl	800539c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e0:	2110      	movs	r1, #16
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8fa 	bl	80052dc <USB_FlushTxFifo>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f924 	bl	8005340 <USB_FlushRxFifo>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e043      	b.n	80051b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005142:	d118      	bne.n	8005176 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e013      	b.n	8005188 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e008      	b.n	8005188 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005182:	461a      	mov	r2, r3
 8005184:	2300      	movs	r3, #0
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a6:	461a      	mov	r2, r3
 80051a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051b8:	461a      	mov	r2, r3
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4293      	cmp	r3, r2
 80051be:	d3b5      	bcc.n	800512c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	e043      	b.n	800524e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051dc:	d118      	bne.n	8005210 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f0:	461a      	mov	r2, r3
 80051f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e013      	b.n	8005222 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e008      	b.n	8005222 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	2300      	movs	r3, #0
 8005232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005240:	461a      	mov	r2, r3
 8005242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3301      	adds	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005252:	461a      	mov	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4293      	cmp	r3, r2
 8005258:	d3b5      	bcc.n	80051c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800527a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800527c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 0210 	orr.w	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <USB_DevInit+0x2b8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800529c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d005      	beq.n	80052b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f043 0208 	orr.w	r2, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d4:	b004      	add	sp, #16
 80052d6:	4770      	bx	lr
 80052d8:	803c3800 	.word	0x803c3800

080052dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f6:	d901      	bls.n	80052fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e01b      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	daf2      	bge.n	80052ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	019b      	lsls	r3, r3, #6
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005320:	d901      	bls.n	8005326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e006      	b.n	8005334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b20      	cmp	r3, #32
 8005330:	d0f0      	beq.n	8005314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005358:	d901      	bls.n	800535e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e018      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	daf2      	bge.n	800534c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2210      	movs	r2, #16
 800536e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537c:	d901      	bls.n	8005382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d0f0      	beq.n	8005370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d102      	bne.n	80053f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]
 80053f2:	e00a      	b.n	800540a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d002      	beq.n	8005400 <USB_GetDevSpeed+0x32>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b06      	cmp	r3, #6
 80053fe:	d102      	bne.n	8005406 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005400:	2302      	movs	r3, #2
 8005402:	75fb      	strb	r3, [r7, #23]
 8005404:	e001      	b.n	800540a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005406:	230f      	movs	r3, #15
 8005408:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800540a:	7dfb      	ldrb	r3, [r7, #23]
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d13a      	bne.n	80054aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	2101      	movs	r1, #1
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005452:	4313      	orrs	r3, r2
 8005454:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d155      	bne.n	8005518 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005488:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	059b      	lsls	r3, r3, #22
 800548e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005490:	4313      	orrs	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e036      	b.n	8005518 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d11a      	bne.n	8005518 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	791b      	ldrb	r3, [r3, #4]
 80054fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054fe:	430b      	orrs	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d161      	bne.n	8005608 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800555a:	d11f      	bne.n	800559c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005576:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005596:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800559a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	2101      	movs	r1, #1
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055bc:	4013      	ands	r3, r2
 80055be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e0:	4013      	ands	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	0159      	lsls	r1, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	440b      	add	r3, r1
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	4619      	mov	r1, r3
 8005600:	4b35      	ldr	r3, [pc, #212]	@ (80056d8 <USB_DeactivateEndpoint+0x1b0>)
 8005602:	4013      	ands	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
 8005606:	e060      	b.n	80056ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800561e:	d11f      	bne.n	8005660 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800563e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800565a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800565e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	041b      	lsls	r3, r3, #16
 8005678:	43db      	mvns	r3, r3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005680:	4013      	ands	r3, r2
 8005682:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	43db      	mvns	r3, r3
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a4:	4013      	ands	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0159      	lsls	r1, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	440b      	add	r3, r1
 80056be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c2:	4619      	mov	r1, r3
 80056c4:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <USB_DeactivateEndpoint+0x1b4>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	ec337800 	.word	0xec337800
 80056dc:	eff37800 	.word	0xeff37800

080056e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	f040 817a 	bne.w	80059f6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d132      	bne.n	8005770 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005724:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005728:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800572c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005748:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800574c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005768:	0cdb      	lsrs	r3, r3, #19
 800576a:	04db      	lsls	r3, r3, #19
 800576c:	6113      	str	r3, [r2, #16]
 800576e:	e092      	b.n	8005896 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	0cdb      	lsrs	r3, r3, #19
 800578c:	04db      	lsls	r3, r3, #19
 800578e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11a      	bne.n	80057f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d903      	bls.n	80057ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057ec:	6113      	str	r3, [r2, #16]
 80057ee:	e01b      	b.n	8005828 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6919      	ldr	r1, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	440b      	add	r3, r1
 8005808:	1e59      	subs	r1, r3, #1
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005812:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005814:	4ba2      	ldr	r3, [pc, #648]	@ (8005aa0 <USB_EPStartXfer+0x3c0>)
 8005816:	400b      	ands	r3, r1
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	0148      	lsls	r0, r1, #5
 800581c:	69f9      	ldr	r1, [r7, #28]
 800581e:	4401      	add	r1, r0
 8005820:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	0148      	lsls	r0, r1, #5
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	4401      	add	r1, r0
 8005846:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800584a:	4313      	orrs	r3, r2
 800584c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	791b      	ldrb	r3, [r3, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d11f      	bne.n	8005896 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005870:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005890:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d14b      	bne.n	8005934 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d128      	bne.n	8005912 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d110      	bne.n	80058f2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e00f      	b.n	8005912 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e165      	b.n	8005c00 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	791b      	ldrb	r3, [r3, #4]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d015      	beq.n	8005988 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 814d 	beq.w	8005c00 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800596c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	2101      	movs	r1, #1
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	69f9      	ldr	r1, [r7, #28]
 800597e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005982:	4313      	orrs	r3, r2
 8005984:	634b      	str	r3, [r1, #52]	@ 0x34
 8005986:	e13b      	b.n	8005c00 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d110      	bne.n	80059ba <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	0151      	lsls	r1, r2, #5
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	440a      	add	r2, r1
 80059ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e00f      	b.n	80059da <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	b298      	uxth	r0, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4603      	mov	r3, r0
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f9b8 	bl	8005d64 <USB_WritePacket>
 80059f4:	e104      	b.n	8005c00 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	04db      	lsls	r3, r3, #19
 8005a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a38:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d131      	bne.n	8005aa4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a9c:	6113      	str	r3, [r2, #16]
 8005a9e:	e061      	b.n	8005b64 <USB_EPStartXfer+0x484>
 8005aa0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d123      	bne.n	8005af4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005af0:	6113      	str	r3, [r2, #16]
 8005af2:	e037      	b.n	8005b64 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	8afa      	ldrh	r2, [r7, #22]
 8005b10:	fb03 f202 	mul.w	r2, r3, r2
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	04d9      	lsls	r1, r3, #19
 8005b2a:	4b38      	ldr	r3, [pc, #224]	@ (8005c0c <USB_EPStartXfer+0x52c>)
 8005b2c:	400b      	ands	r3, r1
 8005b2e:	69b9      	ldr	r1, [r7, #24]
 8005b30:	0148      	lsls	r0, r1, #5
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	4401      	add	r1, r0
 8005b36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	0148      	lsls	r0, r1, #5
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	4401      	add	r1, r0
 8005b5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b60:	4313      	orrs	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10d      	bne.n	8005b86 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	68d9      	ldr	r1, [r3, #12]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	460a      	mov	r2, r1
 8005b84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	791b      	ldrb	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d128      	bne.n	8005be0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d110      	bne.n	8005bc0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00f      	b.n	8005be0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	1ff80000 	.word	0x1ff80000

08005c10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d14a      	bne.n	8005cc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c46:	f040 8086 	bne.w	8005d56 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d902      	bls.n	8005ca8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca6:	e056      	b.n	8005d56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cc0:	d0e7      	beq.n	8005c92 <USB_EPStopXfer+0x82>
 8005cc2:	e048      	b.n	8005d56 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cdc:	d13b      	bne.n	8005d56 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d00:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d902      	bls.n	8005d3c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3a:	e00c      	b.n	8005d56 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d54:	d0e7      	beq.n	8005d26 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	@ 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	460b      	mov	r3, r1
 8005d74:	71fb      	strb	r3, [r7, #7]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d123      	bne.n	8005dd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d8a:	88bb      	ldrh	r3, [r7, #4]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	089b      	lsrs	r3, r3, #2
 8005d90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e018      	b.n	8005dca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	031a      	lsls	r2, r3, #12
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da4:	461a      	mov	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	3301      	adds	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3301      	adds	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3e2      	bcc.n	8005d98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3724      	adds	r7, #36	@ 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b08b      	sub	sp, #44	@ 0x2c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	e014      	b.n	8005e36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	3301      	adds	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	3301      	adds	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	3301      	adds	r3, #1
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3e6      	bcc.n	8005e0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e3e:	8bfb      	ldrh	r3, [r7, #30]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01e      	beq.n	8005e82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f107 0310 	add.w	r3, r7, #16
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	701a      	strb	r2, [r3, #0]
      i++;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	3301      	adds	r3, #1
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005e76:	8bfb      	ldrh	r3, [r7, #30]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e7c:	8bfb      	ldrh	r3, [r7, #30]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ea      	bne.n	8005e58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	372c      	adds	r7, #44	@ 0x2c
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d12c      	bne.n	8005f06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	db12      	blt.n	8005ee4 <USB_EPSetStall+0x54>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00f      	beq.n	8005ee4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ede:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ee2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e02b      	b.n	8005f5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	db12      	blt.n	8005f3e <USB_EPSetStall+0xae>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d128      	bne.n	8005fda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fa6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	791b      	ldrb	r3, [r3, #4]
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d003      	beq.n	8005fb8 <USB_EPClearStall+0x4c>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	791b      	ldrb	r3, [r3, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d138      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	e027      	b.n	800602a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ff8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d003      	beq.n	800600a <USB_EPClearStall+0x9e>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	791b      	ldrb	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d10f      	bne.n	800602a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006028:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006056:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800605a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800606c:	68f9      	ldr	r1, [r7, #12]
 800606e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060b2:	f023 0302 	bic.w	r3, r3, #2
 80060b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	4013      	ands	r3, r2
 8006150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0c1b      	lsrs	r3, r3, #16
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	b29b      	uxth	r3, r3
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061c4:	68bb      	ldr	r3, [r7, #8]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	01db      	lsls	r3, r3, #7
 8006204:	b2db      	uxtb	r3, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006220:	68bb      	ldr	r3, [r7, #8]
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0301 	and.w	r3, r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006264:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006268:	f023 0307 	bic.w	r3, r3, #7
 800626c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800627c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	460b      	mov	r3, r1
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	333c      	adds	r3, #60	@ 0x3c
 80062a6:	3304      	adds	r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4a26      	ldr	r2, [pc, #152]	@ (8006348 <USB_EP0_OutStart+0xb8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d90a      	bls.n	80062ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062c4:	d101      	bne.n	80062ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e037      	b.n	800633a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f8:	f043 0318 	orr.w	r3, r3, #24
 80062fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800630c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006310:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006312:	7afb      	ldrb	r3, [r7, #11]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10f      	bne.n	8006338 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006332:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	4f54300a 	.word	0x4f54300a

0800634c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006364:	d901      	bls.n	800636a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e01b      	b.n	80063a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	daf2      	bge.n	8006358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f043 0201 	orr.w	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800638e:	d901      	bls.n	8006394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b01      	cmp	r3, #1
 800639e:	d0f0      	beq.n	8006382 <USB_CoreReset+0x36>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80063bc:	2018      	movs	r0, #24
 80063be:	f002 fb8b 	bl	8008ad8 <USBD_static_malloc>
 80063c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d109      	bne.n	80063de <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32b0      	adds	r2, #176	@ 0xb0
 80063d4:	2100      	movs	r1, #0
 80063d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80063da:	2302      	movs	r3, #2
 80063dc:	e08a      	b.n	80064f4 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	32b0      	adds	r2, #176	@ 0xb0
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32b0      	adds	r2, #176	@ 0xb0
 80063f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7c1b      	ldrb	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d11b      	bne.n	8006442 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800640a:	4b3c      	ldr	r3, [pc, #240]	@ (80064fc <USBD_CUSTOM_HID_Init+0x14c>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f003 020f 	and.w	r2, r3, #15
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	3326      	adds	r3, #38	@ 0x26
 8006420:	2205      	movs	r2, #5
 8006422:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006424:	4b36      	ldr	r3, [pc, #216]	@ (8006500 <USBD_CUSTOM_HID_Init+0x150>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 020f 	and.w	r2, r3, #15
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800643c:	2205      	movs	r2, #5
 800643e:	801a      	strh	r2, [r3, #0]
 8006440:	e01a      	b.n	8006478 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006442:	4b2e      	ldr	r3, [pc, #184]	@ (80064fc <USBD_CUSTOM_HID_Init+0x14c>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3326      	adds	r3, #38	@ 0x26
 8006458:	2201      	movs	r2, #1
 800645a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800645c:	4b28      	ldr	r3, [pc, #160]	@ (8006500 <USBD_CUSTOM_HID_Init+0x150>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006474:	2201      	movs	r2, #1
 8006476:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006478:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <USBD_CUSTOM_HID_Init+0x14c>)
 800647a:	7819      	ldrb	r1, [r3, #0]
 800647c:	2304      	movs	r3, #4
 800647e:	2203      	movs	r2, #3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 f9ca 	bl	800881a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006486:	4b1d      	ldr	r3, [pc, #116]	@ (80064fc <USBD_CUSTOM_HID_Init+0x14c>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	2201      	movs	r2, #1
 800649e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80064a0:	4b17      	ldr	r3, [pc, #92]	@ (8006500 <USBD_CUSTOM_HID_Init+0x150>)
 80064a2:	7819      	ldrb	r1, [r3, #0]
 80064a4:	2302      	movs	r3, #2
 80064a6:	2203      	movs	r2, #3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f002 f9b6 	bl	800881a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80064ae:	4b14      	ldr	r3, [pc, #80]	@ (8006500 <USBD_CUSTOM_HID_Init+0x150>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80064c6:	2201      	movs	r2, #1
 80064c8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	33b0      	adds	r3, #176	@ 0xb0
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <USBD_CUSTOM_HID_Init+0x150>)
 80064e6:	7819      	ldrb	r1, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	2302      	movs	r3, #2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f002 fa83 	bl	80089f8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000086 	.word	0x20000086
 8006500:	20000087 	.word	0x20000087

08006504 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006510:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 f9a5 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800651c:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3324      	adds	r3, #36	@ 0x24
 8006532:	2200      	movs	r2, #0
 8006534:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006536:	4b2e      	ldr	r3, [pc, #184]	@ (80065f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	3326      	adds	r3, #38	@ 0x26
 800654c:	2200      	movs	r2, #0
 800654e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006550:	4b28      	ldr	r3, [pc, #160]	@ (80065f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f002 f985 	bl	8008866 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800655c:	4b25      	ldr	r3, [pc, #148]	@ (80065f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006574:	2200      	movs	r2, #0
 8006576:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006578:	4b1e      	ldr	r3, [pc, #120]	@ (80065f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f003 020f 	and.w	r2, r3, #15
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006590:	2200      	movs	r2, #0
 8006592:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	32b0      	adds	r2, #176	@ 0xb0
 800659e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01f      	beq.n	80065e6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	33b0      	adds	r3, #176	@ 0xb0
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	32b0      	adds	r2, #176	@ 0xb0
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 fa93 	bl	8008af4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32b0      	adds	r2, #176	@ 0xb0
 80065d8:	2100      	movs	r1, #0
 80065da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000086 	.word	0x20000086
 80065f4:	20000087 	.word	0x20000087

080065f8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	32b0      	adds	r2, #176	@ 0xb0
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006610:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	e0f8      	b.n	800681e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006634:	2b00      	cmp	r3, #0
 8006636:	d056      	beq.n	80066e6 <USBD_CUSTOM_HID_Setup+0xee>
 8006638:	2b20      	cmp	r3, #32
 800663a:	f040 80e8 	bne.w	800680e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	3b02      	subs	r3, #2
 8006644:	2b09      	cmp	r3, #9
 8006646:	d846      	bhi.n	80066d6 <USBD_CUSTOM_HID_Setup+0xde>
 8006648:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <USBD_CUSTOM_HID_Setup+0x58>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	080066a9 	.word	0x080066a9
 8006654:	08006687 	.word	0x08006687
 8006658:	080066d7 	.word	0x080066d7
 800665c:	080066d7 	.word	0x080066d7
 8006660:	080066d7 	.word	0x080066d7
 8006664:	080066d7 	.word	0x080066d7
 8006668:	080066d7 	.word	0x080066d7
 800666c:	080066b9 	.word	0x080066b9
 8006670:	08006697 	.word	0x08006697
 8006674:	08006679 	.word	0x08006679
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	b2db      	uxtb	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	605a      	str	r2, [r3, #4]
          break;
 8006684:	e02e      	b.n	80066e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3304      	adds	r3, #4
 800668a:	2201      	movs	r2, #1
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fcf4 	bl	800807c <USBD_CtlSendData>
          break;
 8006694:	e026      	b.n	80066e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	885b      	ldrh	r3, [r3, #2]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b29b      	uxth	r3, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	609a      	str	r2, [r3, #8]
          break;
 80066a6:	e01d      	b.n	80066e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3308      	adds	r3, #8
 80066ac:	2201      	movs	r2, #1
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fce3 	bl	800807c <USBD_CtlSendData>
          break;
 80066b6:	e015      	b.n	80066e4 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2201      	movs	r2, #1
 80066bc:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80066be:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	88db      	ldrh	r3, [r3, #6]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	bf28      	it	cs
 80066c8:	2302      	movcs	r3, #2
 80066ca:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80066cc:	461a      	mov	r2, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fd00 	bl	80080d4 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80066d4:	e006      	b.n	80066e4 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f001 fc5e 	bl	8007f9a <USBD_CtlError>
          ret = USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	75fb      	strb	r3, [r7, #23]
          break;
 80066e2:	bf00      	nop
      }
      break;
 80066e4:	e09a      	b.n	800681c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b0b      	cmp	r3, #11
 80066ec:	f200 8086 	bhi.w	80067fc <USBD_CUSTOM_HID_Setup+0x204>
 80066f0:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <USBD_CUSTOM_HID_Setup+0x100>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	08006729 	.word	0x08006729
 80066fc:	0800680b 	.word	0x0800680b
 8006700:	080067fd 	.word	0x080067fd
 8006704:	080067fd 	.word	0x080067fd
 8006708:	080067fd 	.word	0x080067fd
 800670c:	080067fd 	.word	0x080067fd
 8006710:	08006753 	.word	0x08006753
 8006714:	080067fd 	.word	0x080067fd
 8006718:	080067fd 	.word	0x080067fd
 800671c:	080067fd 	.word	0x080067fd
 8006720:	080067ab 	.word	0x080067ab
 8006724:	080067d5 	.word	0x080067d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b03      	cmp	r3, #3
 8006732:	d107      	bne.n	8006744 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006734:	f107 030e 	add.w	r3, r7, #14
 8006738:	2202      	movs	r2, #2
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fc9d 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006742:	e063      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fc27 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	75fb      	strb	r3, [r7, #23]
          break;
 8006750:	e05c      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	885b      	ldrh	r3, [r3, #2]
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b22      	cmp	r3, #34	@ 0x22
 800675c:	d110      	bne.n	8006780 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	2b4b      	cmp	r3, #75	@ 0x4b
 8006764:	bf28      	it	cs
 8006766:	234b      	movcs	r3, #75	@ 0x4b
 8006768:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	@ 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	e00d      	b.n	800679c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	885b      	ldrh	r3, [r3, #2]
 8006784:	0a1b      	lsrs	r3, r3, #8
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b21      	cmp	r3, #33	@ 0x21
 800678a:	d107      	bne.n	800679c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800678c:	4b26      	ldr	r3, [pc, #152]	@ (8006828 <USBD_CUSTOM_HID_Setup+0x230>)
 800678e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	88db      	ldrh	r3, [r3, #6]
 8006794:	2b09      	cmp	r3, #9
 8006796:	bf28      	it	cs
 8006798:	2309      	movcs	r3, #9
 800679a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800679c:	8bfb      	ldrh	r3, [r7, #30]
 800679e:	461a      	mov	r2, r3
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fc6a 	bl	800807c <USBD_CtlSendData>
          break;
 80067a8:	e030      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d107      	bne.n	80067c6 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	330c      	adds	r3, #12
 80067ba:	2201      	movs	r2, #1
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fc5c 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067c4:	e022      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fbe6 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80067ce:	2303      	movs	r3, #3
 80067d0:	75fb      	strb	r3, [r7, #23]
          break;
 80067d2:	e01b      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d106      	bne.n	80067ee <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067ec:	e00e      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fbd2 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80067f6:	2303      	movs	r3, #3
 80067f8:	75fb      	strb	r3, [r7, #23]
          break;
 80067fa:	e007      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fbcb 	bl	8007f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8006804:	2303      	movs	r3, #3
 8006806:	75fb      	strb	r3, [r7, #23]
          break;
 8006808:	e000      	b.n	800680c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800680a:	bf00      	nop
      }
      break;
 800680c:	e006      	b.n	800681c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fbc2 	bl	8007f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8006816:	2303      	movs	r3, #3
 8006818:	75fb      	strb	r3, [r7, #23]
      break;
 800681a:	bf00      	nop
  }
  return (uint8_t)ret;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000070 	.word	0x20000070

0800682c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	32b0      	adds	r2, #176	@ 0xb0
 8006844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006848:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006850:	2303      	movs	r3, #3
 8006852:	e017      	b.n	8006884 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b03      	cmp	r3, #3
 800685e:	d110      	bne.n	8006882 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	7d1b      	ldrb	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2201      	movs	r2, #1
 800686c:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800686e:	4b07      	ldr	r3, [pc, #28]	@ (800688c <USBD_CUSTOM_HID_SendReport+0x60>)
 8006870:	7819      	ldrb	r1, [r3, #0]
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f002 f89d 	bl	80089b6 <USBD_LL_Transmit>
 800687c:	e001      	b.n	8006882 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000086 	.word	0x20000086

08006890 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006898:	2181      	movs	r1, #129	@ 0x81
 800689a:	4815      	ldr	r0, [pc, #84]	@ (80068f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800689c:	f000 fd1d 	bl	80072da <USBD_GetEpDesc>
 80068a0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80068a2:	2101      	movs	r1, #1
 80068a4:	4812      	ldr	r0, [pc, #72]	@ (80068f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80068a6:	f000 fd18 	bl	80072da <USBD_GetEpDesc>
 80068aa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f042 0204 	orr.w	r2, r2, #4
 80068ba:	711a      	strb	r2, [r3, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d009      	beq.n	80068e0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f042 0202 	orr.w	r2, r2, #2
 80068d4:	711a      	strb	r2, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2201      	movs	r2, #1
 80068de:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2229      	movs	r2, #41	@ 0x29
 80068e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80068e6:	4b02      	ldr	r3, [pc, #8]	@ (80068f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000044 	.word	0x20000044

080068f4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80068fc:	2181      	movs	r1, #129	@ 0x81
 80068fe:	4815      	ldr	r0, [pc, #84]	@ (8006954 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006900:	f000 fceb 	bl	80072da <USBD_GetEpDesc>
 8006904:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006906:	2101      	movs	r1, #1
 8006908:	4812      	ldr	r0, [pc, #72]	@ (8006954 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800690a:	f000 fce6 	bl	80072da <USBD_GetEpDesc>
 800690e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f042 0204 	orr.w	r2, r2, #4
 800691e:	711a      	strb	r2, [r3, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2205      	movs	r2, #5
 8006928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2200      	movs	r2, #0
 8006934:	f042 0202 	orr.w	r2, r2, #2
 8006938:	711a      	strb	r2, [r3, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2205      	movs	r2, #5
 8006942:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2229      	movs	r2, #41	@ 0x29
 8006948:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800694a:	4b02      	ldr	r3, [pc, #8]	@ (8006954 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000044 	.word	0x20000044

08006958 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006960:	2181      	movs	r1, #129	@ 0x81
 8006962:	4815      	ldr	r0, [pc, #84]	@ (80069b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006964:	f000 fcb9 	bl	80072da <USBD_GetEpDesc>
 8006968:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800696a:	2101      	movs	r1, #1
 800696c:	4812      	ldr	r0, [pc, #72]	@ (80069b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800696e:	f000 fcb4 	bl	80072da <USBD_GetEpDesc>
 8006972:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f042 0204 	orr.w	r2, r2, #4
 8006982:	711a      	strb	r2, [r3, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d009      	beq.n	80069a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2200      	movs	r2, #0
 8006998:	f042 0202 	orr.w	r2, r2, #2
 800699c:	711a      	strb	r2, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2201      	movs	r2, #1
 80069a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2229      	movs	r2, #41	@ 0x29
 80069ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80069ae:	4b02      	ldr	r3, [pc, #8]	@ (80069b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000044 	.word	0x20000044

080069bc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	32b0      	adds	r2, #176	@ 0xb0
 80069d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d6:	2200      	movs	r2, #0
 80069d8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32b0      	adds	r2, #176	@ 0xb0
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e017      	b.n	8006a3a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32b0      	adds	r2, #176	@ 0xb0
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	@ 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	7810      	ldrb	r0, [r2, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	7852      	ldrb	r2, [r2, #1]
 8006a34:	4611      	mov	r1, r2
 8006a36:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32b0      	adds	r2, #176	@ 0xb0
 8006a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e00f      	b.n	8006a82 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	32b0      	adds	r2, #176	@ 0xb0
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006a72:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006a74:	7819      	ldrb	r1, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	2302      	movs	r3, #2
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 ffbc 	bl	80089f8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000087 	.word	0x20000087

08006a90 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	32b0      	adds	r2, #176	@ 0xb0
 8006aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e016      	b.n	8006ae0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d111      	bne.n	8006ade <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	33b0      	adds	r3, #176	@ 0xb0
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	7810      	ldrb	r0, [r2, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	7852      	ldrb	r2, [r2, #1]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	220a      	movs	r2, #10
 8006af4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006af6:	4b03      	ldr	r3, [pc, #12]	@ (8006b04 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	2000007c 	.word	0x2000007c

08006b08 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e009      	b.n	8006b30 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	33b0      	adds	r3, #176	@ 0xb0
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e01f      	b.n	8006b94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	79fa      	ldrb	r2, [r7, #7]
 8006b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fddf 	bl	800874c <USBD_LL_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e025      	b.n	8006c00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	32ae      	adds	r2, #174	@ 0xae
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00f      	beq.n	8006bf0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32ae      	adds	r2, #174	@ 0xae
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	f107 020e 	add.w	r2, r7, #14
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fde7 	bl	80087e4 <USBD_LL_Start>
 8006c16:	4603      	mov	r3, r0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f001 f936 	bl	8007f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006cc8:	461a      	mov	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d01a      	beq.n	8006d14 <USBD_LL_SetupStage+0x72>
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d822      	bhi.n	8006d28 <USBD_LL_SetupStage+0x86>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <USBD_LL_SetupStage+0x4a>
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d00a      	beq.n	8006d00 <USBD_LL_SetupStage+0x5e>
 8006cea:	e01d      	b.n	8006d28 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fb63 	bl	80073c0 <USBD_StdDevReq>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfe:	e020      	b.n	8006d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fbcb 	bl	80074a4 <USBD_StdItfReq>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
      break;
 8006d12:	e016      	b.n	8006d42 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fc2d 	bl	800757c <USBD_StdEPReq>
 8006d22:	4603      	mov	r3, r0
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	e00c      	b.n	8006d42 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fdb4 	bl	80088a4 <USBD_LL_StallEP>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d40:	bf00      	nop
  }

  return ret;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	460b      	mov	r3, r1
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d16e      	bne.n	8006e42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d6a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	f040 8098 	bne.w	8006ea8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d913      	bls.n	8006dac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	1ad2      	subs	r2, r2, r3
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	bf28      	it	cs
 8006d9e:	4613      	movcs	r3, r2
 8006da0:	461a      	mov	r2, r3
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f001 f9b2 	bl	800810e <USBD_CtlContinueRx>
 8006daa:	e07d      	b.n	8006ea8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d014      	beq.n	8006de4 <USBD_LL_DataOutStage+0x98>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d81d      	bhi.n	8006dfa <USBD_LL_DataOutStage+0xae>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <USBD_LL_DataOutStage+0x7c>
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d003      	beq.n	8006dce <USBD_LL_DataOutStage+0x82>
 8006dc6:	e018      	b.n	8006dfa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	75bb      	strb	r3, [r7, #22]
            break;
 8006dcc:	e018      	b.n	8006e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fa64 	bl	80072a6 <USBD_CoreFindIF>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75bb      	strb	r3, [r7, #22]
            break;
 8006de2:	e00d      	b.n	8006e00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	4619      	mov	r1, r3
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fa66 	bl	80072c0 <USBD_CoreFindEP>
 8006df4:	4603      	mov	r3, r0
 8006df6:	75bb      	strb	r3, [r7, #22]
            break;
 8006df8:	e002      	b.n	8006e00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75bb      	strb	r3, [r7, #22]
            break;
 8006dfe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e00:	7dbb      	ldrb	r3, [r7, #22]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d119      	bne.n	8006e3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d113      	bne.n	8006e3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e12:	7dba      	ldrb	r2, [r7, #22]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	32ae      	adds	r2, #174	@ 0xae
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e22:	7dba      	ldrb	r2, [r7, #22]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e2a:	7dba      	ldrb	r2, [r7, #22]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	32ae      	adds	r2, #174	@ 0xae
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f001 f978 	bl	8008130 <USBD_CtlSendStatus>
 8006e40:	e032      	b.n	8006ea8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fa37 	bl	80072c0 <USBD_CoreFindEP>
 8006e52:	4603      	mov	r3, r0
 8006e54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e56:	7dbb      	ldrb	r3, [r7, #22]
 8006e58:	2bff      	cmp	r3, #255	@ 0xff
 8006e5a:	d025      	beq.n	8006ea8 <USBD_LL_DataOutStage+0x15c>
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d122      	bne.n	8006ea8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d117      	bne.n	8006e9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e6e:	7dba      	ldrb	r2, [r7, #22]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	32ae      	adds	r2, #174	@ 0xae
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00f      	beq.n	8006e9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e7e:	7dba      	ldrb	r2, [r7, #22]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e86:	7dba      	ldrb	r2, [r7, #22]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	32ae      	adds	r2, #174	@ 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	7afa      	ldrb	r2, [r7, #11]
 8006e94:	4611      	mov	r1, r2
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	e000      	b.n	8006eaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d16f      	bne.n	8006fa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d15a      	bne.n	8006f8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d914      	bls.n	8006f0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f001 f8da 	bl	80080b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f001 fd77 	bl	80089f8 <USBD_LL_PrepareReceive>
 8006f0a:	e03f      	b.n	8006f8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d11c      	bne.n	8006f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d316      	bcc.n	8006f52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d20f      	bcs.n	8006f52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f32:	2200      	movs	r2, #0
 8006f34:	2100      	movs	r1, #0
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f001 f8bb 	bl	80080b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	2100      	movs	r1, #0
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f001 fd54 	bl	80089f8 <USBD_LL_PrepareReceive>
 8006f50:	e01c      	b.n	8006f8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d10f      	bne.n	8006f7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f7e:	2180      	movs	r1, #128	@ 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f001 fc8f 	bl	80088a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 f8e5 	bl	8008156 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d03a      	beq.n	800700c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fe42 	bl	8006c20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006fa4:	e032      	b.n	800700c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f985 	bl	80072c0 <USBD_CoreFindEP>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2bff      	cmp	r3, #255	@ 0xff
 8006fbe:	d025      	beq.n	800700c <USBD_LL_DataInStage+0x15a>
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d122      	bne.n	800700c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d11c      	bne.n	800700c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006fd2:	7dfa      	ldrb	r2, [r7, #23]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	32ae      	adds	r2, #174	@ 0xae
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d014      	beq.n	800700c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006fe2:	7dfa      	ldrb	r2, [r7, #23]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006fea:	7dfa      	ldrb	r2, [r7, #23]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	32ae      	adds	r2, #174	@ 0xae
 8006ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	7afa      	ldrb	r2, [r7, #11]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	4798      	blx	r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007002:	7dbb      	ldrb	r3, [r7, #22]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007008:	7dbb      	ldrb	r3, [r7, #22]
 800700a:	e000      	b.n	800700e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d014      	beq.n	800707c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	4611      	mov	r1, r2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800707c:	2340      	movs	r3, #64	@ 0x40
 800707e:	2200      	movs	r2, #0
 8007080:	2100      	movs	r1, #0
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fbc9 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2240      	movs	r2, #64	@ 0x40
 8007094:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007098:	2340      	movs	r3, #64	@ 0x40
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	@ 0x80
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 fbbb 	bl	800881a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2240      	movs	r2, #64	@ 0x40
 80070ae:	621a      	str	r2, [r3, #32]

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d006      	beq.n	80070fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2204      	movs	r2, #4
 8007100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b04      	cmp	r3, #4
 8007124:	d106      	bne.n	8007134 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b03      	cmp	r3, #3
 8007154:	d110      	bne.n	8007178 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	32ae      	adds	r2, #174	@ 0xae
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e01c      	b.n	80071de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d115      	bne.n	80071dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32ae      	adds	r2, #174	@ 0xae
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32ae      	adds	r2, #174	@ 0xae
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	78fa      	ldrb	r2, [r7, #3]
 80071d6:	4611      	mov	r1, r2
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	32ae      	adds	r2, #174	@ 0xae
 80071fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	e01c      	b.n	8007242 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b03      	cmp	r3, #3
 8007212:	d115      	bne.n	8007240 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	@ 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32ae      	adds	r2, #174	@ 0xae
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	4611      	mov	r1, r2
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00e      	beq.n	800729c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6852      	ldr	r2, [r2, #4]
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	4611      	mov	r1, r2
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	7812      	ldrb	r2, [r2, #0]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d91f      	bls.n	8007340 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007306:	e013      	b.n	8007330 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007308:	f107 030a 	add.w	r3, r7, #10
 800730c:	4619      	mov	r1, r3
 800730e:	6978      	ldr	r0, [r7, #20]
 8007310:	f000 f81b 	bl	800734a <USBD_GetNextDesc>
 8007314:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d108      	bne.n	8007330 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	789b      	ldrb	r3, [r3, #2]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	429a      	cmp	r2, r3
 800732a:	d008      	beq.n	800733e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	885b      	ldrh	r3, [r3, #2]
 8007334:	b29a      	uxth	r2, r3
 8007336:	897b      	ldrh	r3, [r7, #10]
 8007338:	429a      	cmp	r2, r3
 800733a:	d8e5      	bhi.n	8007308 <USBD_GetEpDesc+0x2e>
 800733c:	e000      	b.n	8007340 <USBD_GetEpDesc+0x66>
          break;
 800733e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007340:	693b      	ldr	r3, [r7, #16]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	7812      	ldrb	r2, [r2, #0]
 8007360:	4413      	add	r3, r2
 8007362:	b29a      	uxth	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007374:	68fb      	ldr	r3, [r7, #12]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3301      	adds	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073a0:	8a3b      	ldrh	r3, [r7, #16]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073b0:	89fb      	ldrh	r3, [r7, #14]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
	...

080073c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073d6:	2b40      	cmp	r3, #64	@ 0x40
 80073d8:	d005      	beq.n	80073e6 <USBD_StdDevReq+0x26>
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d857      	bhi.n	800748e <USBD_StdDevReq+0xce>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00f      	beq.n	8007402 <USBD_StdDevReq+0x42>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d153      	bne.n	800748e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32ae      	adds	r2, #174	@ 0xae
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e04a      	b.n	8007498 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b09      	cmp	r3, #9
 8007408:	d83b      	bhi.n	8007482 <USBD_StdDevReq+0xc2>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <USBD_StdDevReq+0x50>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007465 	.word	0x08007465
 8007414:	08007479 	.word	0x08007479
 8007418:	08007483 	.word	0x08007483
 800741c:	0800746f 	.word	0x0800746f
 8007420:	08007483 	.word	0x08007483
 8007424:	08007443 	.word	0x08007443
 8007428:	08007439 	.word	0x08007439
 800742c:	08007483 	.word	0x08007483
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800744d 	.word	0x0800744d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa3c 	bl	80078b8 <USBD_GetDescriptor>
          break;
 8007440:	e024      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fbcb 	bl	8007be0 <USBD_SetAddress>
          break;
 800744a:	e01f      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fc0a 	bl	8007c68 <USBD_SetConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
          break;
 8007458:	e018      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fcad 	bl	8007dbc <USBD_GetConfig>
          break;
 8007462:	e013      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fcde 	bl	8007e28 <USBD_GetStatus>
          break;
 800746c:	e00e      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fd0d 	bl	8007e90 <USBD_SetFeature>
          break;
 8007476:	e009      	b.n	800748c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fd31 	bl	8007ee2 <USBD_ClrFeature>
          break;
 8007480:	e004      	b.n	800748c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fd88 	bl	8007f9a <USBD_CtlError>
          break;
 800748a:	bf00      	nop
      }
      break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fd82 	bl	8007f9a <USBD_CtlError>
      break;
 8007496:	bf00      	nop
  }

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop

080074a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074ba:	2b40      	cmp	r3, #64	@ 0x40
 80074bc:	d005      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074be:	2b40      	cmp	r3, #64	@ 0x40
 80074c0:	d852      	bhi.n	8007568 <USBD_StdItfReq+0xc4>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d14e      	bne.n	8007568 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d840      	bhi.n	800755a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	889b      	ldrh	r3, [r3, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d836      	bhi.n	8007550 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	889b      	ldrh	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff fedb 	bl	80072a6 <USBD_CoreFindIF>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2bff      	cmp	r3, #255	@ 0xff
 80074f8:	d01d      	beq.n	8007536 <USBD_StdItfReq+0x92>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11a      	bne.n	8007536 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007500:	7bba      	ldrb	r2, [r7, #14]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	@ 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007510:	7bba      	ldrb	r2, [r7, #14]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007518:	7bba      	ldrb	r2, [r7, #14]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	@ 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800752e:	e004      	b.n	800753a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007534:	e001      	b.n	800753a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	88db      	ldrh	r3, [r3, #6]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d110      	bne.n	8007564 <USBD_StdItfReq+0xc0>
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fdf1 	bl	8008130 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800754e:	e009      	b.n	8007564 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fd21 	bl	8007f9a <USBD_CtlError>
          break;
 8007558:	e004      	b.n	8007564 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd1c 	bl	8007f9a <USBD_CtlError>
          break;
 8007562:	e000      	b.n	8007566 <USBD_StdItfReq+0xc2>
          break;
 8007564:	bf00      	nop
      }
      break;
 8007566:	e004      	b.n	8007572 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd15 	bl	8007f9a <USBD_CtlError>
      break;
 8007570:	bf00      	nop
  }

  return ret;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889b      	ldrh	r3, [r3, #4]
 800758e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007598:	2b40      	cmp	r3, #64	@ 0x40
 800759a:	d007      	beq.n	80075ac <USBD_StdEPReq+0x30>
 800759c:	2b40      	cmp	r3, #64	@ 0x40
 800759e:	f200 817f 	bhi.w	80078a0 <USBD_StdEPReq+0x324>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02a      	beq.n	80075fc <USBD_StdEPReq+0x80>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	f040 817a 	bne.w	80078a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fe85 	bl	80072c0 <USBD_CoreFindEP>
 80075b6:	4603      	mov	r3, r0
 80075b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ba:	7b7b      	ldrb	r3, [r7, #13]
 80075bc:	2bff      	cmp	r3, #255	@ 0xff
 80075be:	f000 8174 	beq.w	80078aa <USBD_StdEPReq+0x32e>
 80075c2:	7b7b      	ldrb	r3, [r7, #13]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8170 	bne.w	80078aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075ca:	7b7a      	ldrb	r2, [r7, #13]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075d2:	7b7a      	ldrb	r2, [r7, #13]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	32ae      	adds	r2, #174	@ 0xae
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8163 	beq.w	80078aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32ae      	adds	r2, #174	@ 0xae
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075fa:	e156      	b.n	80078aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	2b03      	cmp	r3, #3
 8007602:	d008      	beq.n	8007616 <USBD_StdEPReq+0x9a>
 8007604:	2b03      	cmp	r3, #3
 8007606:	f300 8145 	bgt.w	8007894 <USBD_StdEPReq+0x318>
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 809b 	beq.w	8007746 <USBD_StdEPReq+0x1ca>
 8007610:	2b01      	cmp	r3, #1
 8007612:	d03c      	beq.n	800768e <USBD_StdEPReq+0x112>
 8007614:	e13e      	b.n	8007894 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d002      	beq.n	8007628 <USBD_StdEPReq+0xac>
 8007622:	2b03      	cmp	r3, #3
 8007624:	d016      	beq.n	8007654 <USBD_StdEPReq+0xd8>
 8007626:	e02c      	b.n	8007682 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <USBD_StdEPReq+0xce>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	@ 0x80
 8007632:	d00a      	beq.n	800764a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f933 	bl	80088a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763e:	2180      	movs	r1, #128	@ 0x80
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f92f 	bl	80088a4 <USBD_LL_StallEP>
 8007646:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007648:	e020      	b.n	800768c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fca4 	bl	8007f9a <USBD_CtlError>
              break;
 8007652:	e01b      	b.n	800768c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	885b      	ldrh	r3, [r3, #2]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10e      	bne.n	800767a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <USBD_StdEPReq+0xfe>
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b80      	cmp	r3, #128	@ 0x80
 8007666:	d008      	beq.n	800767a <USBD_StdEPReq+0xfe>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	88db      	ldrh	r3, [r3, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f915 	bl	80088a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fd58 	bl	8008130 <USBD_CtlSendStatus>

              break;
 8007680:	e004      	b.n	800768c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fc88 	bl	8007f9a <USBD_CtlError>
              break;
 800768a:	bf00      	nop
          }
          break;
 800768c:	e107      	b.n	800789e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d002      	beq.n	80076a0 <USBD_StdEPReq+0x124>
 800769a:	2b03      	cmp	r3, #3
 800769c:	d016      	beq.n	80076cc <USBD_StdEPReq+0x150>
 800769e:	e04b      	b.n	8007738 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <USBD_StdEPReq+0x146>
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b80      	cmp	r3, #128	@ 0x80
 80076aa:	d00a      	beq.n	80076c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f8f7 	bl	80088a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b6:	2180      	movs	r1, #128	@ 0x80
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f8f3 	bl	80088a4 <USBD_LL_StallEP>
 80076be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c0:	e040      	b.n	8007744 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc68 	bl	8007f9a <USBD_CtlError>
              break;
 80076ca:	e03b      	b.n	8007744 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d136      	bne.n	8007742 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 f8fd 	bl	80088e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fd21 	bl	8008130 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fde4 	bl	80072c0 <USBD_CoreFindEP>
 80076f8:	4603      	mov	r3, r0
 80076fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076fc:	7b7b      	ldrb	r3, [r7, #13]
 80076fe:	2bff      	cmp	r3, #255	@ 0xff
 8007700:	d01f      	beq.n	8007742 <USBD_StdEPReq+0x1c6>
 8007702:	7b7b      	ldrb	r3, [r7, #13]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11c      	bne.n	8007742 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007708:	7b7a      	ldrb	r2, [r7, #13]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007710:	7b7a      	ldrb	r2, [r7, #13]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32ae      	adds	r2, #174	@ 0xae
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007720:	7b7a      	ldrb	r2, [r7, #13]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32ae      	adds	r2, #174	@ 0xae
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007736:	e004      	b.n	8007742 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc2d 	bl	8007f9a <USBD_CtlError>
              break;
 8007740:	e000      	b.n	8007744 <USBD_StdEPReq+0x1c8>
              break;
 8007742:	bf00      	nop
          }
          break;
 8007744:	e0ab      	b.n	800789e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d002      	beq.n	8007758 <USBD_StdEPReq+0x1dc>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d032      	beq.n	80077bc <USBD_StdEPReq+0x240>
 8007756:	e097      	b.n	8007888 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d007      	beq.n	800776e <USBD_StdEPReq+0x1f2>
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b80      	cmp	r3, #128	@ 0x80
 8007762:	d004      	beq.n	800776e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc17 	bl	8007f9a <USBD_CtlError>
                break;
 800776c:	e091      	b.n	8007892 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800776e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	da0b      	bge.n	800778e <USBD_StdEPReq+0x212>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	3310      	adds	r3, #16
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	e00b      	b.n	80077a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	4413      	add	r3, r2
 80077a4:	3304      	adds	r3, #4
 80077a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2202      	movs	r2, #2
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc61 	bl	800807c <USBD_CtlSendData>
              break;
 80077ba:	e06a      	b.n	8007892 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da11      	bge.n	80077e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	f003 020f 	and.w	r2, r3, #15
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	3324      	adds	r3, #36	@ 0x24
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d117      	bne.n	800780e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fbda 	bl	8007f9a <USBD_CtlError>
                  break;
 80077e6:	e054      	b.n	8007892 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	f003 020f 	and.w	r2, r3, #15
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fbc7 	bl	8007f9a <USBD_CtlError>
                  break;
 800780c:	e041      	b.n	8007892 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800780e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007812:	2b00      	cmp	r3, #0
 8007814:	da0b      	bge.n	800782e <USBD_StdEPReq+0x2b2>
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3310      	adds	r3, #16
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	3304      	adds	r3, #4
 800782c:	e00b      	b.n	8007846 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	3304      	adds	r3, #4
 8007846:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <USBD_StdEPReq+0x2d8>
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b80      	cmp	r3, #128	@ 0x80
 8007852:	d103      	bne.n	800785c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	e00e      	b.n	800787a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f85d 	bl	8008920 <USBD_LL_IsStallEP>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e002      	b.n	800787a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2202      	movs	r2, #2
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fbfb 	bl	800807c <USBD_CtlSendData>
              break;
 8007886:	e004      	b.n	8007892 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb85 	bl	8007f9a <USBD_CtlError>
              break;
 8007890:	bf00      	nop
          }
          break;
 8007892:	e004      	b.n	800789e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fb7f 	bl	8007f9a <USBD_CtlError>
          break;
 800789c:	bf00      	nop
      }
      break;
 800789e:	e005      	b.n	80078ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb79 	bl	8007f9a <USBD_CtlError>
      break;
 80078a8:	e000      	b.n	80078ac <USBD_StdEPReq+0x330>
      break;
 80078aa:	bf00      	nop
  }

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	885b      	ldrh	r3, [r3, #2]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b0e      	cmp	r3, #14
 80078da:	f200 8152 	bhi.w	8007b82 <USBD_GetDescriptor+0x2ca>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <USBD_GetDescriptor+0x2c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007955 	.word	0x08007955
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	080079ad 	.word	0x080079ad
 80078f0:	08007b83 	.word	0x08007b83
 80078f4:	08007b83 	.word	0x08007b83
 80078f8:	08007b23 	.word	0x08007b23
 80078fc:	08007b4f 	.word	0x08007b4f
 8007900:	08007b83 	.word	0x08007b83
 8007904:	08007b83 	.word	0x08007b83
 8007908:	08007b83 	.word	0x08007b83
 800790c:	08007b83 	.word	0x08007b83
 8007910:	08007b83 	.word	0x08007b83
 8007914:	08007b83 	.word	0x08007b83
 8007918:	08007b83 	.word	0x08007b83
 800791c:	08007921 	.word	0x08007921
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007942:	e126      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fb27 	bl	8007f9a <USBD_CtlError>
        err++;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	3301      	adds	r3, #1
 8007950:	72fb      	strb	r3, [r7, #11]
      break;
 8007952:	e11e      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
      break;
 800796a:	e112      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7c1b      	ldrb	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800797a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797c:	f107 0208 	add.w	r2, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800798e:	e100      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	f107 0208 	add.w	r2, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	e0f2      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	885b      	ldrh	r3, [r3, #2]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b05      	cmp	r3, #5
 80079b4:	f200 80ac 	bhi.w	8007b10 <USBD_GetDescriptor+0x258>
 80079b8:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <USBD_GetDescriptor+0x108>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d9 	.word	0x080079d9
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a75 	.word	0x08007a75
 80079d0:	08007aa9 	.word	0x08007aa9
 80079d4:	08007add 	.word	0x08007add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e091      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 facb 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e089      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e077      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fab1 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e06f      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e05d      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa97 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e055      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e043      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa7d 	bl	8007f9a <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e03b      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e029      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa63 	bl	8007f9a <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e021      	b.n	8007b20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e00f      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa49 	bl	8007f9a <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e007      	b.n	8007b20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa41 	bl	8007f9a <USBD_CtlError>
          err++;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b1e:	bf00      	nop
      }
      break;
 8007b20:	e037      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7c1b      	ldrb	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b32:	f107 0208 	add.w	r2, r7, #8
 8007b36:	4610      	mov	r0, r2
 8007b38:	4798      	blx	r3
 8007b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b3c:	e029      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa2a 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b4c:	e021      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10d      	bne.n	8007b72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5e:	f107 0208 	add.w	r2, r7, #8
 8007b62:	4610      	mov	r0, r2
 8007b64:	4798      	blx	r3
 8007b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b70:	e00f      	b.n	8007b92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa10 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b80:	e007      	b.n	8007b92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa08 	bl	8007f9a <USBD_CtlError>
      err++;
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b90:	bf00      	nop
  }

  if (err != 0U)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11e      	bne.n	8007bd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d016      	beq.n	8007bce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007ba0:	893b      	ldrh	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88da      	ldrh	r2, [r3, #6]
 8007baa:	893b      	ldrh	r3, [r7, #8]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	bf28      	it	cs
 8007bb0:	4613      	movcs	r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bb6:	893b      	ldrh	r3, [r7, #8]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa5d 	bl	800807c <USBD_CtlSendData>
 8007bc2:	e009      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9e7 	bl	8007f9a <USBD_CtlError>
 8007bcc:	e004      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 faae 	bl	8008130 <USBD_CtlSendStatus>
 8007bd4:	e000      	b.n	8007bd8 <USBD_GetDescriptor+0x320>
    return;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d131      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	88db      	ldrh	r3, [r3, #6]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12d      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c00:	d829      	bhi.n	8007c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d104      	bne.n	8007c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9bc 	bl	8007f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	e01d      	b.n	8007c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fea1 	bl	8008978 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa7a 	bl	8008130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4a:	e009      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c54:	e004      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f99e 	bl	8007f9a <USBD_CtlError>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c80:	4b4d      	ldr	r3, [pc, #308]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d905      	bls.n	8007c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f985 	bl	8007f9a <USBD_CtlError>
    return USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e08c      	b.n	8007dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d002      	beq.n	8007ca6 <USBD_SetConfig+0x3e>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d029      	beq.n	8007cf8 <USBD_SetConfig+0x90>
 8007ca4:	e075      	b.n	8007d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ca6:	4b44      	ldr	r3, [pc, #272]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cae:	4b42      	ldr	r3, [pc, #264]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fe ffb9 	bl	8006c36 <USBD_SetClassConfig>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f962 	bl	8007f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cde:	e065      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa25 	bl	8008130 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007cee:	e05d      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa1d 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007cf6:	e059      	b.n	8007dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d112      	bne.n	8007d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007d08:	4b2b      	ldr	r3, [pc, #172]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d12:	4b29      	ldr	r3, [pc, #164]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ffa8 	bl	8006c6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa06 	bl	8008130 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d24:	e042      	b.n	8007dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d02a      	beq.n	8007d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fe ff96 	bl	8006c6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fe ff6f 	bl	8006c36 <USBD_SetClassConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f918 	bl	8007f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fe ff7b 	bl	8006c6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007d80:	e014      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9d4 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007d88:	e010      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9d0 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007d90:	e00c      	b.n	8007dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f900 	bl	8007f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d9a:	4b07      	ldr	r3, [pc, #28]	@ (8007db8 <USBD_SetConfig+0x150>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fe ff64 	bl	8006c6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	73fb      	strb	r3, [r7, #15]
      break;
 8007daa:	bf00      	nop
  }

  return ret;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000268 	.word	0x20000268

08007dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d004      	beq.n	8007dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8e2 	bl	8007f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dd6:	e023      	b.n	8007e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	dc02      	bgt.n	8007dea <USBD_GetConfig+0x2e>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc03      	bgt.n	8007df0 <USBD_GetConfig+0x34>
 8007de8:	e015      	b.n	8007e16 <USBD_GetConfig+0x5a>
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d00b      	beq.n	8007e06 <USBD_GetConfig+0x4a>
 8007dee:	e012      	b.n	8007e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f93c 	bl	800807c <USBD_CtlSendData>
        break;
 8007e04:	e00c      	b.n	8007e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f934 	bl	800807c <USBD_CtlSendData>
        break;
 8007e14:	e004      	b.n	8007e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8be 	bl	8007f9a <USBD_CtlError>
        break;
 8007e1e:	bf00      	nop
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d81e      	bhi.n	8007e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d004      	beq.n	8007e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8a5 	bl	8007f9a <USBD_CtlError>
        break;
 8007e50:	e01a      	b.n	8007e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	330c      	adds	r3, #12
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f900 	bl	800807c <USBD_CtlSendData>
      break;
 8007e7c:	e004      	b.n	8007e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f88a 	bl	8007f9a <USBD_CtlError>
      break;
 8007e86:	bf00      	nop
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	885b      	ldrh	r3, [r3, #2]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f940 	bl	8008130 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007eb0:	e013      	b.n	8007eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d10b      	bne.n	8007ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	889b      	ldrh	r3, [r3, #4]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f930 	bl	8008130 <USBD_CtlSendStatus>
}
 8007ed0:	e003      	b.n	8007eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f860 	bl	8007f9a <USBD_CtlError>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d80b      	bhi.n	8007f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10c      	bne.n	8007f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f910 	bl	8008130 <USBD_CtlSendStatus>
      }
      break;
 8007f10:	e004      	b.n	8007f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f840 	bl	8007f9a <USBD_CtlError>
      break;
 8007f1a:	e000      	b.n	8007f1e <USBD_ClrFeature+0x3c>
      break;
 8007f1c:	bf00      	nop
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fa16 	bl	8007382 <SWAPBYTE>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fa09 	bl	8007382 <SWAPBYTE>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff f9fc 	bl	8007382 <SWAPBYTE>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	80da      	strh	r2, [r3, #6]
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	2180      	movs	r1, #128	@ 0x80
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc7c 	bl	80088a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fac:	2100      	movs	r1, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fc78 	bl	80088a4 <USBD_LL_StallEP>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d036      	beq.n	8008040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f000 f836 	bl	8008048 <USBD_GetLen>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4413      	add	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7812      	ldrb	r2, [r2, #0]
 8007ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	2203      	movs	r2, #3
 8008004:	701a      	strb	r2, [r3, #0]
  idx++;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	3301      	adds	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800800c:	e013      	b.n	8008036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4413      	add	r3, r2
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
    idx++;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	3301      	adds	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	3301      	adds	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e7      	bne.n	800800e <USBD_GetString+0x52>
 800803e:	e000      	b.n	8008042 <USBD_GetString+0x86>
    return;
 8008040:	bf00      	nop
  }
}
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008058:	e005      	b.n	8008066 <USBD_GetLen+0x1e>
  {
    len++;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	3301      	adds	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3301      	adds	r3, #1
 8008064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f5      	bne.n	800805a <USBD_GetLen+0x12>
  }

  return len;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2202      	movs	r2, #2
 800808c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	2100      	movs	r1, #0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fc87 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fc76 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2203      	movs	r2, #3
 80080e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	2100      	movs	r1, #0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fc7a 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fc69 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2204      	movs	r2, #4
 800813c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008140:	2300      	movs	r3, #0
 8008142:	2200      	movs	r2, #0
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fc35 	bl	80089b6 <USBD_LL_Transmit>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2205      	movs	r2, #5
 8008162:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc43 	bl	80089f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <send_viewport_report>:
	r.report_ID = REPORTID_MOUSE;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&r, sizeof (MouseReport));
}

void send_viewport_report(ViewportReport r)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	r.report_ID = REPORTID_VIEWPORT;
 8008184:	2302      	movs	r3, #2
 8008186:	713b      	strb	r3, [r7, #4]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&r, sizeof (MouseReport));
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	2204      	movs	r2, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4803      	ldr	r0, [pc, #12]	@ (800819c <send_viewport_report+0x20>)
 8008190:	f7fe fb4c 	bl	800682c <USBD_CUSTOM_HID_SendReport>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	2000026c 	.word	0x2000026c

080081a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081a4:	2200      	movs	r2, #0
 80081a6:	4912      	ldr	r1, [pc, #72]	@ (80081f0 <MX_USB_DEVICE_Init+0x50>)
 80081a8:	4812      	ldr	r0, [pc, #72]	@ (80081f4 <MX_USB_DEVICE_Init+0x54>)
 80081aa:	f7fe fcc7 	bl	8006b3c <USBD_Init>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081b4:	f7f8 fbb6 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80081b8:	490f      	ldr	r1, [pc, #60]	@ (80081f8 <MX_USB_DEVICE_Init+0x58>)
 80081ba:	480e      	ldr	r0, [pc, #56]	@ (80081f4 <MX_USB_DEVICE_Init+0x54>)
 80081bc:	f7fe fcee 	bl	8006b9c <USBD_RegisterClass>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081c6:	f7f8 fbad 	bl	8000924 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80081ca:	490c      	ldr	r1, [pc, #48]	@ (80081fc <MX_USB_DEVICE_Init+0x5c>)
 80081cc:	4809      	ldr	r0, [pc, #36]	@ (80081f4 <MX_USB_DEVICE_Init+0x54>)
 80081ce:	f7fe fc9b 	bl	8006b08 <USBD_CUSTOM_HID_RegisterInterface>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081d8:	f7f8 fba4 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081dc:	4805      	ldr	r0, [pc, #20]	@ (80081f4 <MX_USB_DEVICE_Init+0x54>)
 80081de:	f7fe fd13 	bl	8006c08 <USBD_Start>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081e8:	f7f8 fb9c 	bl	8000924 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081ec:	bf00      	nop
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	200000e4 	.word	0x200000e4
 80081f4:	2000026c 	.word	0x2000026c
 80081f8:	2000000c 	.word	0x2000000c
 80081fc:	200000d4 	.word	0x200000d4

08008200 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008204:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008206:	4618      	mov	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008214:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	460a      	mov	r2, r1
 800822a:	71fb      	strb	r3, [r7, #7]
 800822c:	4613      	mov	r3, r2
 800822e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008230:	4806      	ldr	r0, [pc, #24]	@ (800824c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008232:	f7fe fc07 	bl	8006a44 <USBD_CUSTOM_HID_ReceivePacket>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	e000      	b.n	8008244 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8008242:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	2000026c 	.word	0x2000026c

08008250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	6039      	str	r1, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2212      	movs	r2, #18
 8008260:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008262:	4b03      	ldr	r3, [pc, #12]	@ (8008270 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	20000104 	.word	0x20000104

08008274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	4603      	mov	r3, r0
 800827c:	6039      	str	r1, [r7, #0]
 800827e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2204      	movs	r2, #4
 8008284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008286:	4b03      	ldr	r3, [pc, #12]	@ (8008294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	20000124 	.word	0x20000124

08008298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d105      	bne.n	80082b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	4907      	ldr	r1, [pc, #28]	@ (80082cc <USBD_FS_ProductStrDescriptor+0x34>)
 80082ae:	4808      	ldr	r0, [pc, #32]	@ (80082d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80082b0:	f7ff fe84 	bl	8007fbc <USBD_GetString>
 80082b4:	e004      	b.n	80082c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	4904      	ldr	r1, [pc, #16]	@ (80082cc <USBD_FS_ProductStrDescriptor+0x34>)
 80082ba:	4805      	ldr	r0, [pc, #20]	@ (80082d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80082bc:	f7ff fe7e 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000548 	.word	0x20000548
 80082d0:	08008bd0 	.word	0x08008bd0

080082d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	4904      	ldr	r1, [pc, #16]	@ (80082f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082e4:	4804      	ldr	r0, [pc, #16]	@ (80082f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082e6:	f7ff fe69 	bl	8007fbc <USBD_GetString>
  return USBD_StrDesc;
 80082ea:	4b02      	ldr	r3, [pc, #8]	@ (80082f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000548 	.word	0x20000548
 80082f8:	08008bdc 	.word	0x08008bdc

080082fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	221a      	movs	r2, #26
 800830c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800830e:	f000 f855 	bl	80083bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008312:	4b02      	ldr	r3, [pc, #8]	@ (800831c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000128 	.word	0x20000128

08008320 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4907      	ldr	r1, [pc, #28]	@ (8008354 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008336:	4808      	ldr	r0, [pc, #32]	@ (8008358 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008338:	f7ff fe40 	bl	8007fbc <USBD_GetString>
 800833c:	e004      	b.n	8008348 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4904      	ldr	r1, [pc, #16]	@ (8008354 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008342:	4805      	ldr	r0, [pc, #20]	@ (8008358 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008344:	f7ff fe3a 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008348:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000548 	.word	0x20000548
 8008358:	08008bec 	.word	0x08008bec

0800835c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4907      	ldr	r1, [pc, #28]	@ (8008390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008372:	4808      	ldr	r0, [pc, #32]	@ (8008394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008374:	f7ff fe22 	bl	8007fbc <USBD_GetString>
 8008378:	e004      	b.n	8008384 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4904      	ldr	r1, [pc, #16]	@ (8008390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800837e:	4805      	ldr	r0, [pc, #20]	@ (8008394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008380:	f7ff fe1c 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008384:	4b02      	ldr	r3, [pc, #8]	@ (8008390 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000548 	.word	0x20000548
 8008394:	08008c00 	.word	0x08008c00

08008398 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	6039      	str	r1, [r7, #0]
 80083a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	220c      	movs	r2, #12
 80083a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80083aa:	4b03      	ldr	r3, [pc, #12]	@ (80083b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	20000118 	.word	0x20000118

080083bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <Get_SerialNum+0x44>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008404 <Get_SerialNum+0x48>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008408 <Get_SerialNum+0x4c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4413      	add	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083e2:	2208      	movs	r2, #8
 80083e4:	4909      	ldr	r1, [pc, #36]	@ (800840c <Get_SerialNum+0x50>)
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 f814 	bl	8008414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083ec:	2204      	movs	r2, #4
 80083ee:	4908      	ldr	r1, [pc, #32]	@ (8008410 <Get_SerialNum+0x54>)
 80083f0:	68b8      	ldr	r0, [r7, #8]
 80083f2:	f000 f80f 	bl	8008414 <IntToUnicode>
  }
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	1fff7a10 	.word	0x1fff7a10
 8008404:	1fff7a14 	.word	0x1fff7a14
 8008408:	1fff7a18 	.word	0x1fff7a18
 800840c:	2000012a 	.word	0x2000012a
 8008410:	2000013a 	.word	0x2000013a

08008414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]
 800842a:	e027      	b.n	800847c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	0f1b      	lsrs	r3, r3, #28
 8008430:	2b09      	cmp	r3, #9
 8008432:	d80b      	bhi.n	800844c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0f1b      	lsrs	r3, r3, #28
 8008438:	b2da      	uxtb	r2, r3
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4619      	mov	r1, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	440b      	add	r3, r1
 8008444:	3230      	adds	r2, #48	@ 0x30
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	e00a      	b.n	8008462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	0f1b      	lsrs	r3, r3, #28
 8008450:	b2da      	uxtb	r2, r3
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4619      	mov	r1, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	440b      	add	r3, r1
 800845c:	3237      	adds	r2, #55	@ 0x37
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008468:	7dfb      	ldrb	r3, [r7, #23]
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	3301      	adds	r3, #1
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4413      	add	r3, r2
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	3301      	adds	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
 800847c:	7dfa      	ldrb	r2, [r7, #23]
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	429a      	cmp	r2, r3
 8008482:	d3d3      	bcc.n	800842c <IntToUnicode+0x18>
  }
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
	...

08008494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b0a0      	sub	sp, #128	@ 0x80
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800849c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	60da      	str	r2, [r3, #12]
 80084aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084ac:	f107 0310 	add.w	r3, r7, #16
 80084b0:	225c      	movs	r2, #92	@ 0x5c
 80084b2:	2100      	movs	r1, #0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fb53 	bl	8008b60 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084c2:	d149      	bne.n	8008558 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80084c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80084ca:	2300      	movs	r3, #0
 80084cc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084ce:	f107 0310 	add.w	r3, r7, #16
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fb fa10 	bl	80038f8 <HAL_RCCEx_PeriphCLKConfig>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80084de:	f7f8 fa21 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80084f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80084fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008502:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008504:	2302      	movs	r3, #2
 8008506:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008508:	2300      	movs	r3, #0
 800850a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800850c:	2303      	movs	r3, #3
 800850e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008510:	230a      	movs	r3, #10
 8008512:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008514:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008518:	4619      	mov	r1, r3
 800851a:	4812      	ldr	r0, [pc, #72]	@ (8008564 <HAL_PCD_MspInit+0xd0>)
 800851c:	f7f9 fcb0 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008520:	4b0f      	ldr	r3, [pc, #60]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	4a0e      	ldr	r2, [pc, #56]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 8008526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852a:	6353      	str	r3, [r2, #52]	@ 0x34
 800852c:	2300      	movs	r3, #0
 800852e:	60bb      	str	r3, [r7, #8]
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 8008532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008534:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 8008536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800853a:	6453      	str	r3, [r2, #68]	@ 0x44
 800853c:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <HAL_PCD_MspInit+0xcc>)
 800853e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008544:	60bb      	str	r3, [r7, #8]
 8008546:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	2043      	movs	r0, #67	@ 0x43
 800854e:	f7f9 f8f0 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008552:	2043      	movs	r0, #67	@ 0x43
 8008554:	f7f9 f909 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008558:	bf00      	nop
 800855a:	3780      	adds	r7, #128	@ 0x80
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	40023800 	.word	0x40023800
 8008564:	40020000 	.word	0x40020000

08008568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fb8f 	bl	8006ca2 <USBD_LL_SetupStage>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	440b      	add	r3, r1
 80085ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	78fb      	ldrb	r3, [r7, #3]
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7fe fbc9 	bl	8006d4c <USBD_LL_DataOutStage>
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3320      	adds	r3, #32
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7fe fc62 	bl	8006eb2 <USBD_LL_DataInStage>
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fd9c 	bl	8007142 <USBD_LL_SOF>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800861a:	2301      	movs	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	79db      	ldrb	r3, [r3, #7]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
 800862a:	e008      	b.n	800863e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	79db      	ldrb	r3, [r3, #7]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d102      	bne.n	800863a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
 8008638:	e001      	b.n	800863e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800863a:	f7f8 f973 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008644:	7bfa      	ldrb	r2, [r7, #15]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fd36 	bl	80070ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fcde 	bl	8007016 <USBD_LL_Reset>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fd31 	bl	80070da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7adb      	ldrb	r3, [r3, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008698:	4b04      	ldr	r3, [pc, #16]	@ (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a03      	ldr	r2, [pc, #12]	@ (80086ac <HAL_PCD_SuspendCallback+0x48>)
 800869e:	f043 0306 	orr.w	r3, r3, #6
 80086a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	e000ed00 	.word	0xe000ed00

080086b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fd27 	bl	8007112 <USBD_LL_Resume>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fd7f 	bl	80071e6 <USBD_LL_IsoOUTIncomplete>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fd3b 	bl	8007182 <USBD_LL_IsoINIncomplete>
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fd91 	bl	800724a <USBD_LL_DevConnected>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fd8e 	bl	8007260 <USBD_LL_DevDisconnected>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d13c      	bne.n	80087d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800875c:	4a20      	ldr	r2, [pc, #128]	@ (80087e0 <USBD_LL_Init+0x94>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a1e      	ldr	r2, [pc, #120]	@ (80087e0 <USBD_LL_Init+0x94>)
 8008768:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800876c:	4b1c      	ldr	r3, [pc, #112]	@ (80087e0 <USBD_LL_Init+0x94>)
 800876e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008772:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008774:	4b1a      	ldr	r3, [pc, #104]	@ (80087e0 <USBD_LL_Init+0x94>)
 8008776:	2206      	movs	r2, #6
 8008778:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800877a:	4b19      	ldr	r3, [pc, #100]	@ (80087e0 <USBD_LL_Init+0x94>)
 800877c:	2202      	movs	r2, #2
 800877e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008780:	4b17      	ldr	r3, [pc, #92]	@ (80087e0 <USBD_LL_Init+0x94>)
 8008782:	2200      	movs	r2, #0
 8008784:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008786:	4b16      	ldr	r3, [pc, #88]	@ (80087e0 <USBD_LL_Init+0x94>)
 8008788:	2202      	movs	r2, #2
 800878a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800878c:	4b14      	ldr	r3, [pc, #80]	@ (80087e0 <USBD_LL_Init+0x94>)
 800878e:	2200      	movs	r2, #0
 8008790:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008792:	4b13      	ldr	r3, [pc, #76]	@ (80087e0 <USBD_LL_Init+0x94>)
 8008794:	2200      	movs	r2, #0
 8008796:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008798:	4b11      	ldr	r3, [pc, #68]	@ (80087e0 <USBD_LL_Init+0x94>)
 800879a:	2200      	movs	r2, #0
 800879c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800879e:	4b10      	ldr	r3, [pc, #64]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087aa:	480d      	ldr	r0, [pc, #52]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087ac:	f7f9 fd2d 	bl	800220a <HAL_PCD_Init>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087b6:	f7f8 f8b5 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087ba:	2180      	movs	r1, #128	@ 0x80
 80087bc:	4808      	ldr	r0, [pc, #32]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087be:	f7fa ff74 	bl	80036aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087c2:	2240      	movs	r2, #64	@ 0x40
 80087c4:	2100      	movs	r1, #0
 80087c6:	4806      	ldr	r0, [pc, #24]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087c8:	f7fa ff28 	bl	800361c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087cc:	2280      	movs	r2, #128	@ 0x80
 80087ce:	2101      	movs	r1, #1
 80087d0:	4803      	ldr	r0, [pc, #12]	@ (80087e0 <USBD_LL_Init+0x94>)
 80087d2:	f7fa ff23 	bl	800361c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000748 	.word	0x20000748

080087e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f9 fe1b 	bl	8002436 <HAL_PCD_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f97e 	bl	8008b08 <USBD_Get_USB_Status>
 800880c:	4603      	mov	r3, r0
 800880e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008810:	7bbb      	ldrb	r3, [r7, #14]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	4608      	mov	r0, r1
 8008824:	4611      	mov	r1, r2
 8008826:	461a      	mov	r2, r3
 8008828:	4603      	mov	r3, r0
 800882a:	70fb      	strb	r3, [r7, #3]
 800882c:	460b      	mov	r3, r1
 800882e:	70bb      	strb	r3, [r7, #2]
 8008830:	4613      	mov	r3, r2
 8008832:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	883a      	ldrh	r2, [r7, #0]
 8008846:	78f9      	ldrb	r1, [r7, #3]
 8008848:	f7fa fb1c 	bl	8002e84 <HAL_PCD_EP_Open>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f958 	bl	8008b08 <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885c:	7bbb      	ldrb	r3, [r7, #14]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fa fb65 	bl	8002f54 <HAL_PCD_EP_Close>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f939 	bl	8008b08 <USBD_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa fc05 	bl	80030d2 <HAL_PCD_EP_SetStall>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f91a 	bl	8008b08 <USBD_Get_USB_Status>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7fa fc49 	bl	8003198 <HAL_PCD_EP_ClrStall>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f8fb 	bl	8008b08 <USBD_Get_USB_Status>
 8008912:	4603      	mov	r3, r0
 8008914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008916:	7bbb      	ldrb	r3, [r7, #14]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008932:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008938:	2b00      	cmp	r3, #0
 800893a:	da0b      	bge.n	8008954 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	3316      	adds	r3, #22
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	e00b      	b.n	800896c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800896a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008992:	78fa      	ldrb	r2, [r7, #3]
 8008994:	4611      	mov	r1, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7fa fa50 	bl	8002e3c <HAL_PCD_SetAddress>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f8b0 	bl	8008b08 <USBD_Get_USB_Status>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	460b      	mov	r3, r1
 80089c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80089d4:	7af9      	ldrb	r1, [r7, #11]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	f7fa fb40 	bl	800305e <HAL_PCD_EP_Transmit>
 80089de:	4603      	mov	r3, r0
 80089e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 f88f 	bl	8008b08 <USBD_Get_USB_Status>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	603b      	str	r3, [r7, #0]
 8008a04:	460b      	mov	r3, r1
 8008a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a16:	7af9      	ldrb	r1, [r7, #11]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f7fa fae4 	bl	8002fe8 <HAL_PCD_EP_Receive>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f86e 	bl	8008b08 <USBD_Get_USB_Status>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_PCDEx_LPM_Callback+0x18>
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d01f      	beq.n	8008a92 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008a52:	e03b      	b.n	8008acc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	7adb      	ldrb	r3, [r3, #11]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008a5c:	f7f7 fdb0 	bl	80005c0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008a66:	f023 0306 	bic.w	r3, r3, #6
 8008a6a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6812      	ldr	r2, [r2, #0]
 8008a7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fb41 	bl	8007112 <USBD_LL_Resume>
    break;
 8008a90:	e01c      	b.n	8008acc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008aa4:	f043 0301 	orr.w	r3, r3, #1
 8008aa8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fb12 	bl	80070da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7adb      	ldrb	r3, [r3, #11]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d005      	beq.n	8008aca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008abe:	4b05      	ldr	r3, [pc, #20]	@ (8008ad4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	4a04      	ldr	r2, [pc, #16]	@ (8008ad4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008ac4:	f043 0306 	orr.w	r3, r3, #6
 8008ac8:	6113      	str	r3, [r2, #16]
    break;
 8008aca:	bf00      	nop
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	e000ed00 	.word	0xe000ed00

08008ad8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008ae0:	4b03      	ldr	r3, [pc, #12]	@ (8008af0 <USBD_static_malloc+0x18>)
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000c2c 	.word	0x20000c2c

08008af4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d817      	bhi.n	8008b4c <USBD_Get_USB_Status+0x44>
 8008b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b24 <USBD_Get_USB_Status+0x1c>)
 8008b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b22:	bf00      	nop
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b3b 	.word	0x08008b3b
 8008b2c:	08008b41 	.word	0x08008b41
 8008b30:	08008b47 	.word	0x08008b47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]
    break;
 8008b38:	e00b      	b.n	8008b52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3e:	e008      	b.n	8008b52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b40:	2301      	movs	r3, #1
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	e005      	b.n	8008b52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4a:	e002      	b.n	8008b52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	bf00      	nop
  }
  return usb_status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <memset>:
 8008b60:	4402      	add	r2, r0
 8008b62:	4603      	mov	r3, r0
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d100      	bne.n	8008b6a <memset+0xa>
 8008b68:	4770      	bx	lr
 8008b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6e:	e7f9      	b.n	8008b64 <memset+0x4>

08008b70 <__libc_init_array>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ba8 <__libc_init_array+0x38>)
 8008b74:	4c0d      	ldr	r4, [pc, #52]	@ (8008bac <__libc_init_array+0x3c>)
 8008b76:	1b64      	subs	r4, r4, r5
 8008b78:	10a4      	asrs	r4, r4, #2
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	42a6      	cmp	r6, r4
 8008b7e:	d109      	bne.n	8008b94 <__libc_init_array+0x24>
 8008b80:	4d0b      	ldr	r5, [pc, #44]	@ (8008bb0 <__libc_init_array+0x40>)
 8008b82:	4c0c      	ldr	r4, [pc, #48]	@ (8008bb4 <__libc_init_array+0x44>)
 8008b84:	f000 f818 	bl	8008bb8 <_init>
 8008b88:	1b64      	subs	r4, r4, r5
 8008b8a:	10a4      	asrs	r4, r4, #2
 8008b8c:	2600      	movs	r6, #0
 8008b8e:	42a6      	cmp	r6, r4
 8008b90:	d105      	bne.n	8008b9e <__libc_init_array+0x2e>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b98:	4798      	blx	r3
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7ee      	b.n	8008b7c <__libc_init_array+0xc>
 8008b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba2:	4798      	blx	r3
 8008ba4:	3601      	adds	r6, #1
 8008ba6:	e7f2      	b.n	8008b8e <__libc_init_array+0x1e>
 8008ba8:	08008c38 	.word	0x08008c38
 8008bac:	08008c38 	.word	0x08008c38
 8008bb0:	08008c38 	.word	0x08008c38
 8008bb4:	08008c3c 	.word	0x08008c3c

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
